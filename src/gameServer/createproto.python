# -*- coding: utf-8 -*-


import os
modified_keys=[
    "ReqLoginAuth",
    "ResLoginAuth",
    "ReqSelectPlayer",
    "ResSelectPlayer",
    "ReqCreatePlayer",
    "ResCreatePlayer",
    "ReqEnterGame",
    "ResEnterGame", 
    "ResServerCloseClient",  
    "ReqBagData",
    "ResBagData",
    "ResServerOptItem",
    "ResBagItemCntUpdate",         
    ]

lua = []

seq_proto_list=["Login","Bag","Common","Active","Mail","Fight","Hero"]

def process_proto_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
        allline = [line.strip() for line in lines if line.strip()]
        maxLen = len(allline)
        for i, line in enumerate(allline):
            if i >= maxLen:
                continue
            luak = line[8:] 
            if line.startswith("message") and (luak.startswith("Req") or luak.startswith("//") or luak.startswith("Res")):
                pre = allline[i-1]
                luav = ""
                if pre.startswith("//"):
                    luav = pre[2:]
                luav = luav.strip()  
                dic = {luak:luav}
                lua.append(dic)


def process_proto_folder(folder_path):
    for key in seq_proto_list:
        file_path = os.path.join(folder_path, key+".proto", )
        #print("xxxxxxxxx",file_path)
        process_proto_file(file_path)

process_proto_folder("./protobuf")

with open('./bin/common/msgdef.lua', 'w') as file:
    file.write('local cacheMsg = {}\n\n')
    file.write('local function regMsg(msgId, msgName, lang)\n')
    file.write('\tlocal name = cacheMsg[msgId]\n')
    file.write('\tif name and name == msgName then\n')
    file.write('\t\tprint("msgName repeated", msgId, msgName)\n')
    file.write('\t\treturn\n')
    file.write('\tend\n\n')
    file.write('\tcacheMsg[msgId] = msgName\n')
    file.write('\tgMainThread:cacheMessage(msgId, lang, msgName, "")\n')
    file.write('end\n\n')
    file.write('ProtoDef=\n{\n')
    index = 1
    for entry in lua:
        for key, value in entry.iteritems():
            if value:
                if key in modified_keys:
                    file.write('\t{}={{id={},lang="cpp",name="{}"}}, -- {}\n'.format(key, index, key, value))
                else:
                    file.write('\t{}={{id={},lang="lua",name="{}"}}, -- {}\n'.format(key, index, key, value))
            else:
                file.write('\t{}={{id={},lang="lua",name="{}"}}, -- \n'.format(key, index, key))
            index += 1
    file.write('}\n\n')
    file.write('for k, v in pairs(ProtoDef) do\n')
    file.write('\tregMsg(v.id, k, v.lang)\n')
    file.write('end\n\n')
    file.write('function gGetCppProto()\n')
    file.write('\tlocal tab = {}\n')
    file.write('\tfor k, v in pairs(ProtoDef) do\n')    
    file.write("\t\tif v.lang == 'cpp' then tab[v.id]=k end\n")
    file.write("\tend\n")
    file.write("\treturn tab\n")
    file.write("end\n\n")
    file.write('cacheMsg = nil\n')
    
































