// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#include "Mail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RewardData::RewardData(
    ::_pbi::ConstantInitialized)
  : count_(uint64_t{0u})
  , id_(0){}
struct RewardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewardDataDefaultTypeInternal() {}
  union {
    RewardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewardDataDefaultTypeInternal _RewardData_default_instance_;
PROTOBUF_CONSTEXPR MailList::MailList(
    ::_pbi::ConstantInitialized)
  : data_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(uint64_t{0u})
  , status_(0)
  , time_(0){}
struct MailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailListDefaultTypeInternal() {}
  union {
    MailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailListDefaultTypeInternal _MailList_default_instance_;
PROTOBUF_CONSTEXPR ReqMailList::ReqMailList(
    ::_pbi::ConstantInitialized){}
struct ReqMailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqMailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqMailListDefaultTypeInternal() {}
  union {
    ReqMailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqMailListDefaultTypeInternal _ReqMailList_default_instance_;
PROTOBUF_CONSTEXPR ResMailList::ResMailList(
    ::_pbi::ConstantInitialized)
  : data_(){}
struct ResMailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResMailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResMailListDefaultTypeInternal() {}
  union {
    ResMailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResMailListDefaultTypeInternal _ResMailList_default_instance_;
PROTOBUF_CONSTEXPR ReqOptMail::ReqOptMail(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u})
  , opt_(0){}
struct ReqOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqOptMailDefaultTypeInternal() {}
  union {
    ReqOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqOptMailDefaultTypeInternal _ReqOptMail_default_instance_;
PROTOBUF_CONSTEXPR ResOptMail::ResOptMail(
    ::_pbi::ConstantInitialized)
  : id_(uint64_t{0u})
  , opt_(0){}
struct ResOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResOptMailDefaultTypeInternal() {}
  union {
    ResOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResOptMailDefaultTypeInternal _ResOptMail_default_instance_;
PROTOBUF_CONSTEXPR ReqOneKeyOptMail::ReqOneKeyOptMail(
    ::_pbi::ConstantInitialized)
  : opt_(0){}
struct ReqOneKeyOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqOneKeyOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqOneKeyOptMailDefaultTypeInternal() {}
  union {
    ReqOneKeyOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqOneKeyOptMailDefaultTypeInternal _ReqOneKeyOptMail_default_instance_;
PROTOBUF_CONSTEXPR ResOneKeyOptMail::ResOneKeyOptMail(
    ::_pbi::ConstantInitialized)
  : data_()
  , _data_cached_byte_size_(0)
  , opt_(0){}
struct ResOneKeyOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResOneKeyOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResOneKeyOptMailDefaultTypeInternal() {}
  union {
    ResOneKeyOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResOneKeyOptMailDefaultTypeInternal _ResOneKeyOptMail_default_instance_;
PROTOBUF_CONSTEXPR ResSendMail::ResSendMail(
    ::_pbi::ConstantInitialized)
  : data_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(uint64_t{0u})
  , pid_(uint64_t{0u})
  , time_(0){}
struct ResSendMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResSendMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResSendMailDefaultTypeInternal() {}
  union {
    ResSendMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResSendMailDefaultTypeInternal _ResSendMail_default_instance_;
static ::_pb::Metadata file_level_metadata_Mail_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Mail_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Mail_2eproto = nullptr;

const uint32_t TableStruct_Mail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RewardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RewardData, id_),
  PROTOBUF_FIELD_OFFSET(::RewardData, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MailList, id_),
  PROTOBUF_FIELD_OFFSET(::MailList, title_),
  PROTOBUF_FIELD_OFFSET(::MailList, content_),
  PROTOBUF_FIELD_OFFSET(::MailList, status_),
  PROTOBUF_FIELD_OFFSET(::MailList, time_),
  PROTOBUF_FIELD_OFFSET(::MailList, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqMailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResMailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResMailList, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, id_),
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResOptMail, id_),
  PROTOBUF_FIELD_OFFSET(::ResOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqOneKeyOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqOneKeyOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, opt_),
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResSendMail, id_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, title_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, content_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, desc_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, time_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, data_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, pid_),
  PROTOBUF_FIELD_OFFSET(::ResSendMail, extra_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RewardData)},
  { 8, -1, -1, sizeof(::MailList)},
  { 20, -1, -1, sizeof(::ReqMailList)},
  { 26, -1, -1, sizeof(::ResMailList)},
  { 33, -1, -1, sizeof(::ReqOptMail)},
  { 41, -1, -1, sizeof(::ResOptMail)},
  { 49, -1, -1, sizeof(::ReqOneKeyOptMail)},
  { 56, -1, -1, sizeof(::ResOneKeyOptMail)},
  { 64, -1, -1, sizeof(::ResSendMail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RewardData_default_instance_._instance,
  &::_MailList_default_instance_._instance,
  &::_ReqMailList_default_instance_._instance,
  &::_ResMailList_default_instance_._instance,
  &::_ReqOptMail_default_instance_._instance,
  &::_ResOptMail_default_instance_._instance,
  &::_ReqOneKeyOptMail_default_instance_._instance,
  &::_ResOneKeyOptMail_default_instance_._instance,
  &::_ResSendMail_default_instance_._instance,
};

const char descriptor_table_protodef_Mail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nMail.proto\"\'\n\nRewardData\022\n\n\002id\030\001 \001(\021\022\r"
  "\n\005count\030\002 \001(\004\"o\n\010MailList\022\n\n\002id\030\001 \001(\004\022\r\n"
  "\005title\030\002 \001(\014\022\017\n\007content\030\003 \001(\014\022\016\n\006status\030"
  "\004 \001(\021\022\014\n\004time\030\005 \001(\021\022\031\n\004data\030\006 \003(\0132\013.Rewa"
  "rdData\"\r\n\013ReqMailList\"&\n\013ResMailList\022\027\n\004"
  "data\030\001 \003(\0132\t.MailList\"%\n\nReqOptMail\022\n\n\002i"
  "d\030\001 \001(\004\022\013\n\003opt\030\002 \001(\021\"%\n\nResOptMail\022\n\n\002id"
  "\030\001 \001(\004\022\013\n\003opt\030\002 \001(\021\"\037\n\020ReqOneKeyOptMail\022"
  "\013\n\003opt\030\001 \001(\021\"-\n\020ResOneKeyOptMail\022\013\n\003opt\030"
  "\001 \001(\021\022\014\n\004data\030\002 \003(\021\"\214\001\n\013ResSendMail\022\n\n\002i"
  "d\030\001 \001(\004\022\r\n\005title\030\002 \001(\014\022\017\n\007content\030\003 \001(\014\022"
  "\014\n\004desc\030\004 \001(\014\022\014\n\004time\030\005 \001(\021\022\031\n\004data\030\006 \003("
  "\0132\013.RewardData\022\013\n\003pid\030\007 \001(\004\022\r\n\005extra\030\010 \001"
  "(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Mail_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Mail_2eproto = {
    false, false, 530, descriptor_table_protodef_Mail_2eproto,
    "Mail.proto",
    &descriptor_table_Mail_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_Mail_2eproto::offsets,
    file_level_metadata_Mail_2eproto, file_level_enum_descriptors_Mail_2eproto,
    file_level_service_descriptors_Mail_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Mail_2eproto_getter() {
  return &descriptor_table_Mail_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Mail_2eproto(&descriptor_table_Mail_2eproto);

// ===================================================================

class RewardData::_Internal {
 public:
};

RewardData::RewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RewardData)
}
RewardData::RewardData(const RewardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&count_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:RewardData)
}

inline void RewardData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&count_)) + sizeof(id_));
}

RewardData::~RewardData() {
  // @@protoc_insertion_point(destructor:RewardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RewardData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewardData::Clear() {
// @@protoc_insertion_point(message_clear_start:RewardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&count_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_id(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardData)
  return target;
}

size_t RewardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RewardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RewardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewardData::GetClassData() const { return &_class_data_; }

void RewardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RewardData *>(to)->MergeFrom(
      static_cast<const RewardData &>(from));
}


void RewardData::MergeFrom(const RewardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RewardData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewardData::CopyFrom(const RewardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RewardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardData::IsInitialized() const {
  return true;
}

void RewardData::InternalSwap(RewardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardData, id_)
      + sizeof(RewardData::id_)
      - PROTOBUF_FIELD_OFFSET(RewardData, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[0]);
}

// ===================================================================

class MailList::_Internal {
 public:
};

MailList::MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MailList)
}
MailList::MailList(const MailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:MailList)
}

inline void MailList::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

MailList::~MailList() {
  // @@protoc_insertion_point(destructor:MailList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  content_.Destroy();
}

void MailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailList::Clear() {
// @@protoc_insertion_point(message_clear_start:MailList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  title_.ClearToEmpty();
  content_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RewardData data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_title(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // sint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_status(), target);
  }

  // sint32 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_time(), target);
  }

  // repeated .RewardData data = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailList)
  return target;
}

size_t MailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RewardData data = 6;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // sint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_status());
  }

  // sint32 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailList::GetClassData() const { return &_class_data_; }

void MailList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailList *>(to)->MergeFrom(
      static_cast<const MailList &>(from));
}


void MailList::MergeFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailList::CopyFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailList::IsInitialized() const {
  return true;
}

void MailList::InternalSwap(MailList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailList, time_)
      + sizeof(MailList::time_)
      - PROTOBUF_FIELD_OFFSET(MailList, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[1]);
}

// ===================================================================

class ReqMailList::_Internal {
 public:
};

ReqMailList::ReqMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqMailList)
}
ReqMailList::ReqMailList(const ReqMailList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqMailList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqMailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqMailList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqMailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[2]);
}

// ===================================================================

class ResMailList::_Internal {
 public:
};

ResMailList::ResMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResMailList)
}
ResMailList::ResMailList(const ResMailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResMailList)
}

inline void ResMailList::SharedCtor() {
}

ResMailList::~ResMailList() {
  // @@protoc_insertion_point(destructor:ResMailList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResMailList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResMailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResMailList::Clear() {
// @@protoc_insertion_point(message_clear_start:ResMailList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResMailList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MailList data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResMailList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResMailList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResMailList)
  return target;
}

size_t ResMailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResMailList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResMailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResMailList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResMailList::GetClassData() const { return &_class_data_; }

void ResMailList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResMailList *>(to)->MergeFrom(
      static_cast<const ResMailList &>(from));
}


void ResMailList::MergeFrom(const ResMailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResMailList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResMailList::CopyFrom(const ResMailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResMailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResMailList::IsInitialized() const {
  return true;
}

void ResMailList::InternalSwap(ResMailList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResMailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[3]);
}

// ===================================================================

class ReqOptMail::_Internal {
 public:
};

ReqOptMail::ReqOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqOptMail)
}
ReqOptMail::ReqOptMail(const ReqOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(opt_));
  // @@protoc_insertion_point(copy_constructor:ReqOptMail)
}

inline void ReqOptMail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(opt_));
}

ReqOptMail::~ReqOptMail() {
  // @@protoc_insertion_point(destructor:ReqOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_) -
      reinterpret_cast<char*>(&id_)) + sizeof(opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // sint32 opt = 2;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqOptMail)
  return target;
}

size_t ReqOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // sint32 opt = 2;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqOptMail::GetClassData() const { return &_class_data_; }

void ReqOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqOptMail *>(to)->MergeFrom(
      static_cast<const ReqOptMail &>(from));
}


void ReqOptMail::MergeFrom(const ReqOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqOptMail::CopyFrom(const ReqOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOptMail::IsInitialized() const {
  return true;
}

void ReqOptMail::InternalSwap(ReqOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqOptMail, opt_)
      + sizeof(ReqOptMail::opt_)
      - PROTOBUF_FIELD_OFFSET(ReqOptMail, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[4]);
}

// ===================================================================

class ResOptMail::_Internal {
 public:
};

ResOptMail::ResOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResOptMail)
}
ResOptMail::ResOptMail(const ResOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(opt_));
  // @@protoc_insertion_point(copy_constructor:ResOptMail)
}

inline void ResOptMail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(opt_));
}

ResOptMail::~ResOptMail() {
  // @@protoc_insertion_point(destructor:ResOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ResOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_) -
      reinterpret_cast<char*>(&id_)) + sizeof(opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // sint32 opt = 2;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResOptMail)
  return target;
}

size_t ResOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // sint32 opt = 2;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResOptMail::GetClassData() const { return &_class_data_; }

void ResOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResOptMail *>(to)->MergeFrom(
      static_cast<const ResOptMail &>(from));
}


void ResOptMail::MergeFrom(const ResOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResOptMail::CopyFrom(const ResOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOptMail::IsInitialized() const {
  return true;
}

void ResOptMail::InternalSwap(ResOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResOptMail, opt_)
      + sizeof(ResOptMail::opt_)
      - PROTOBUF_FIELD_OFFSET(ResOptMail, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[5]);
}

// ===================================================================

class ReqOneKeyOptMail::_Internal {
 public:
};

ReqOneKeyOptMail::ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqOneKeyOptMail)
}
ReqOneKeyOptMail::ReqOneKeyOptMail(const ReqOneKeyOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ReqOneKeyOptMail)
}

inline void ReqOneKeyOptMail::SharedCtor() {
opt_ = 0;
}

ReqOneKeyOptMail::~ReqOneKeyOptMail() {
  // @@protoc_insertion_point(destructor:ReqOneKeyOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqOneKeyOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqOneKeyOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqOneKeyOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqOneKeyOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqOneKeyOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 opt = 1;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqOneKeyOptMail)
  return target;
}

size_t ReqOneKeyOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqOneKeyOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 opt = 1;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqOneKeyOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqOneKeyOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqOneKeyOptMail::GetClassData() const { return &_class_data_; }

void ReqOneKeyOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqOneKeyOptMail *>(to)->MergeFrom(
      static_cast<const ReqOneKeyOptMail &>(from));
}


void ReqOneKeyOptMail::MergeFrom(const ReqOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqOneKeyOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqOneKeyOptMail::CopyFrom(const ReqOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqOneKeyOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOneKeyOptMail::IsInitialized() const {
  return true;
}

void ReqOneKeyOptMail::InternalSwap(ReqOneKeyOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqOneKeyOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[6]);
}

// ===================================================================

class ResOneKeyOptMail::_Internal {
 public:
};

ResOneKeyOptMail::ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResOneKeyOptMail)
}
ResOneKeyOptMail::ResOneKeyOptMail(const ResOneKeyOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ResOneKeyOptMail)
}

inline void ResOneKeyOptMail::SharedCtor() {
opt_ = 0;
}

ResOneKeyOptMail::~ResOneKeyOptMail() {
  // @@protoc_insertion_point(destructor:ResOneKeyOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResOneKeyOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResOneKeyOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResOneKeyOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ResOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResOneKeyOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResOneKeyOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 opt = 1;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_opt(), target);
  }

  // repeated sint32 data = 2;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResOneKeyOptMail)
  return target;
}

size_t ResOneKeyOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResOneKeyOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 data = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint32 opt = 1;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResOneKeyOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResOneKeyOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResOneKeyOptMail::GetClassData() const { return &_class_data_; }

void ResOneKeyOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResOneKeyOptMail *>(to)->MergeFrom(
      static_cast<const ResOneKeyOptMail &>(from));
}


void ResOneKeyOptMail::MergeFrom(const ResOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResOneKeyOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResOneKeyOptMail::CopyFrom(const ResOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResOneKeyOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOneKeyOptMail::IsInitialized() const {
  return true;
}

void ResOneKeyOptMail::InternalSwap(ResOneKeyOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResOneKeyOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[7]);
}

// ===================================================================

class ResSendMail::_Internal {
 public:
};

ResSendMail::ResSendMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResSendMail)
}
ResSendMail::ResSendMail(const ResSendMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:ResSendMail)
}

inline void ResSendMail::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

ResSendMail::~ResSendMail() {
  // @@protoc_insertion_point(destructor:ResSendMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResSendMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  content_.Destroy();
  desc_.Destroy();
  extra_.Destroy();
}

void ResSendMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ResSendMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  title_.ClearToEmpty();
  content_.ClearToEmpty();
  desc_.ClearToEmpty();
  extra_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResSendMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RewardData data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResSendMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResSendMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_title(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // bytes desc = 4;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // sint32 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_time(), target);
  }

  // repeated .RewardData data = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 pid = 7;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_pid(), target);
  }

  // bytes extra = 8;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResSendMail)
  return target;
}

size_t ResSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResSendMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RewardData data = 6;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes desc = 4;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes extra = 8;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 pid = 7;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // sint32 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResSendMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResSendMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResSendMail::GetClassData() const { return &_class_data_; }

void ResSendMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResSendMail *>(to)->MergeFrom(
      static_cast<const ResSendMail &>(from));
}


void ResSendMail::MergeFrom(const ResSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResSendMail::CopyFrom(const ResSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSendMail::IsInitialized() const {
  return true;
}

void ResSendMail::InternalSwap(ResSendMail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResSendMail, time_)
      + sizeof(ResSendMail::time_)
      - PROTOBUF_FIELD_OFFSET(ResSendMail, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResSendMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RewardData*
Arena::CreateMaybeMessage< ::RewardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RewardData >(arena);
}
template<> PROTOBUF_NOINLINE ::MailList*
Arena::CreateMaybeMessage< ::MailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqMailList*
Arena::CreateMaybeMessage< ::ReqMailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqMailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ResMailList*
Arena::CreateMaybeMessage< ::ResMailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResMailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqOptMail*
Arena::CreateMaybeMessage< ::ReqOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ResOptMail*
Arena::CreateMaybeMessage< ::ResOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqOneKeyOptMail*
Arena::CreateMaybeMessage< ::ReqOneKeyOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqOneKeyOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ResOneKeyOptMail*
Arena::CreateMaybeMessage< ::ResOneKeyOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResOneKeyOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ResSendMail*
Arena::CreateMaybeMessage< ::ResSendMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResSendMail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
