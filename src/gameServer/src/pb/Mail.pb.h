// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Mail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Mail_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Mail_2eproto;
class MailList;
struct MailListDefaultTypeInternal;
extern MailListDefaultTypeInternal _MailList_default_instance_;
class ReqMailList;
struct ReqMailListDefaultTypeInternal;
extern ReqMailListDefaultTypeInternal _ReqMailList_default_instance_;
class ReqOneKeyOptMail;
struct ReqOneKeyOptMailDefaultTypeInternal;
extern ReqOneKeyOptMailDefaultTypeInternal _ReqOneKeyOptMail_default_instance_;
class ReqOptMail;
struct ReqOptMailDefaultTypeInternal;
extern ReqOptMailDefaultTypeInternal _ReqOptMail_default_instance_;
class ResMailList;
struct ResMailListDefaultTypeInternal;
extern ResMailListDefaultTypeInternal _ResMailList_default_instance_;
class ResOneKeyOptMail;
struct ResOneKeyOptMailDefaultTypeInternal;
extern ResOneKeyOptMailDefaultTypeInternal _ResOneKeyOptMail_default_instance_;
class ResOptMail;
struct ResOptMailDefaultTypeInternal;
extern ResOptMailDefaultTypeInternal _ResOptMail_default_instance_;
class ResSendMail;
struct ResSendMailDefaultTypeInternal;
extern ResSendMailDefaultTypeInternal _ResSendMail_default_instance_;
class RewardData;
struct RewardDataDefaultTypeInternal;
extern RewardDataDefaultTypeInternal _RewardData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MailList* Arena::CreateMaybeMessage<::MailList>(Arena*);
template<> ::ReqMailList* Arena::CreateMaybeMessage<::ReqMailList>(Arena*);
template<> ::ReqOneKeyOptMail* Arena::CreateMaybeMessage<::ReqOneKeyOptMail>(Arena*);
template<> ::ReqOptMail* Arena::CreateMaybeMessage<::ReqOptMail>(Arena*);
template<> ::ResMailList* Arena::CreateMaybeMessage<::ResMailList>(Arena*);
template<> ::ResOneKeyOptMail* Arena::CreateMaybeMessage<::ResOneKeyOptMail>(Arena*);
template<> ::ResOptMail* Arena::CreateMaybeMessage<::ResOptMail>(Arena*);
template<> ::ResSendMail* Arena::CreateMaybeMessage<::ResSendMail>(Arena*);
template<> ::RewardData* Arena::CreateMaybeMessage<::RewardData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RewardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RewardData) */ {
 public:
  inline RewardData() : RewardData(nullptr) {}
  ~RewardData() override;
  explicit PROTOBUF_CONSTEXPR RewardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardData(const RewardData& from);
  RewardData(RewardData&& from) noexcept
    : RewardData() {
    *this = ::std::move(from);
  }

  inline RewardData& operator=(const RewardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardData& operator=(RewardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardData* internal_default_instance() {
    return reinterpret_cast<const RewardData*>(
               &_RewardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RewardData& a, RewardData& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RewardData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RewardData";
  }
  protected:
  explicit RewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // sint32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RewardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t count_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class MailList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailList) */ {
 public:
  inline MailList() : MailList(nullptr) {}
  ~MailList() override;
  explicit PROTOBUF_CONSTEXPR MailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailList(const MailList& from);
  MailList(MailList&& from) noexcept
    : MailList() {
    *this = ::std::move(from);
  }

  inline MailList& operator=(const MailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailList& operator=(MailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailList* internal_default_instance() {
    return reinterpret_cast<const MailList*>(
               &_MailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MailList& a, MailList& b) {
    a.Swap(&b);
  }
  inline void Swap(MailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailList";
  }
  protected:
  explicit MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // repeated .RewardData data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::RewardData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >*
      mutable_data();
  private:
  const ::RewardData& _internal_data(int index) const;
  ::RewardData* _internal_add_data();
  public:
  const ::RewardData& data(int index) const;
  ::RewardData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >&
      data() const;

  // bytes title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // sint32 status = 4;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // sint32 time = 5;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t id_;
  int32_t status_;
  int32_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqMailList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqMailList) */ {
 public:
  inline ReqMailList() : ReqMailList(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqMailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqMailList(const ReqMailList& from);
  ReqMailList(ReqMailList&& from) noexcept
    : ReqMailList() {
    *this = ::std::move(from);
  }

  inline ReqMailList& operator=(const ReqMailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqMailList& operator=(ReqMailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqMailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqMailList* internal_default_instance() {
    return reinterpret_cast<const ReqMailList*>(
               &_ReqMailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqMailList& a, ReqMailList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqMailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqMailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqMailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqMailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqMailList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqMailList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqMailList";
  }
  protected:
  explicit ReqMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqMailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResMailList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResMailList) */ {
 public:
  inline ResMailList() : ResMailList(nullptr) {}
  ~ResMailList() override;
  explicit PROTOBUF_CONSTEXPR ResMailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResMailList(const ResMailList& from);
  ResMailList(ResMailList&& from) noexcept
    : ResMailList() {
    *this = ::std::move(from);
  }

  inline ResMailList& operator=(const ResMailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResMailList& operator=(ResMailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResMailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResMailList* internal_default_instance() {
    return reinterpret_cast<const ResMailList*>(
               &_ResMailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResMailList& a, ResMailList& b) {
    a.Swap(&b);
  }
  inline void Swap(ResMailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResMailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResMailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResMailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResMailList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResMailList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResMailList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResMailList";
  }
  protected:
  explicit ResMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .MailList data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::MailList* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
      mutable_data();
  private:
  const ::MailList& _internal_data(int index) const;
  ::MailList* _internal_add_data();
  public:
  const ::MailList& data(int index) const;
  ::MailList* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
      data() const;

  // @@protoc_insertion_point(class_scope:ResMailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqOptMail) */ {
 public:
  inline ReqOptMail() : ReqOptMail(nullptr) {}
  ~ReqOptMail() override;
  explicit PROTOBUF_CONSTEXPR ReqOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqOptMail(const ReqOptMail& from);
  ReqOptMail(ReqOptMail&& from) noexcept
    : ReqOptMail() {
    *this = ::std::move(from);
  }

  inline ReqOptMail& operator=(const ReqOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqOptMail& operator=(ReqOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqOptMail* internal_default_instance() {
    return reinterpret_cast<const ReqOptMail*>(
               &_ReqOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqOptMail& a, ReqOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqOptMail";
  }
  protected:
  explicit ReqOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOptFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // sint32 opt = 2;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t id_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResOptMail) */ {
 public:
  inline ResOptMail() : ResOptMail(nullptr) {}
  ~ResOptMail() override;
  explicit PROTOBUF_CONSTEXPR ResOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResOptMail(const ResOptMail& from);
  ResOptMail(ResOptMail&& from) noexcept
    : ResOptMail() {
    *this = ::std::move(from);
  }

  inline ResOptMail& operator=(const ResOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResOptMail& operator=(ResOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResOptMail* internal_default_instance() {
    return reinterpret_cast<const ResOptMail*>(
               &_ResOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResOptMail& a, ResOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ResOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResOptMail";
  }
  protected:
  explicit ResOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOptFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // sint32 opt = 2;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t id_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqOneKeyOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqOneKeyOptMail) */ {
 public:
  inline ReqOneKeyOptMail() : ReqOneKeyOptMail(nullptr) {}
  ~ReqOneKeyOptMail() override;
  explicit PROTOBUF_CONSTEXPR ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqOneKeyOptMail(const ReqOneKeyOptMail& from);
  ReqOneKeyOptMail(ReqOneKeyOptMail&& from) noexcept
    : ReqOneKeyOptMail() {
    *this = ::std::move(from);
  }

  inline ReqOneKeyOptMail& operator=(const ReqOneKeyOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqOneKeyOptMail& operator=(ReqOneKeyOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqOneKeyOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqOneKeyOptMail* internal_default_instance() {
    return reinterpret_cast<const ReqOneKeyOptMail*>(
               &_ReqOneKeyOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqOneKeyOptMail& a, ReqOneKeyOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqOneKeyOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqOneKeyOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqOneKeyOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqOneKeyOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqOneKeyOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqOneKeyOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqOneKeyOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqOneKeyOptMail";
  }
  protected:
  explicit ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptFieldNumber = 1,
  };
  // sint32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqOneKeyOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResOneKeyOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResOneKeyOptMail) */ {
 public:
  inline ResOneKeyOptMail() : ResOneKeyOptMail(nullptr) {}
  ~ResOneKeyOptMail() override;
  explicit PROTOBUF_CONSTEXPR ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResOneKeyOptMail(const ResOneKeyOptMail& from);
  ResOneKeyOptMail(ResOneKeyOptMail&& from) noexcept
    : ResOneKeyOptMail() {
    *this = ::std::move(from);
  }

  inline ResOneKeyOptMail& operator=(const ResOneKeyOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResOneKeyOptMail& operator=(ResOneKeyOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResOneKeyOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResOneKeyOptMail* internal_default_instance() {
    return reinterpret_cast<const ResOneKeyOptMail*>(
               &_ResOneKeyOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResOneKeyOptMail& a, ResOneKeyOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ResOneKeyOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResOneKeyOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResOneKeyOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResOneKeyOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResOneKeyOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResOneKeyOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResOneKeyOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResOneKeyOptMail";
  }
  protected:
  explicit ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOptFieldNumber = 1,
  };
  // repeated sint32 data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // sint32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResOneKeyOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResSendMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResSendMail) */ {
 public:
  inline ResSendMail() : ResSendMail(nullptr) {}
  ~ResSendMail() override;
  explicit PROTOBUF_CONSTEXPR ResSendMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResSendMail(const ResSendMail& from);
  ResSendMail(ResSendMail&& from) noexcept
    : ResSendMail() {
    *this = ::std::move(from);
  }

  inline ResSendMail& operator=(const ResSendMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSendMail& operator=(ResSendMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResSendMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResSendMail* internal_default_instance() {
    return reinterpret_cast<const ResSendMail*>(
               &_ResSendMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResSendMail& a, ResSendMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ResSendMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResSendMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResSendMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResSendMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResSendMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResSendMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResSendMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResSendMail";
  }
  protected:
  explicit ResSendMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kDescFieldNumber = 4,
    kExtraFieldNumber = 8,
    kIdFieldNumber = 1,
    kPidFieldNumber = 7,
    kTimeFieldNumber = 5,
  };
  // repeated .RewardData data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::RewardData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >*
      mutable_data();
  private:
  const ::RewardData& _internal_data(int index) const;
  ::RewardData* _internal_add_data();
  public:
  const ::RewardData& data(int index) const;
  ::RewardData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >&
      data() const;

  // bytes title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bytes desc = 4;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // bytes extra = 8;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 pid = 7;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // sint32 time = 5;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResSendMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  uint64_t id_;
  uint64_t pid_;
  int32_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RewardData

// sint32 id = 1;
inline void RewardData::clear_id() {
  id_ = 0;
}
inline int32_t RewardData::_internal_id() const {
  return id_;
}
inline int32_t RewardData::id() const {
  // @@protoc_insertion_point(field_get:RewardData.id)
  return _internal_id();
}
inline void RewardData::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void RewardData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RewardData.id)
}

// uint64 count = 2;
inline void RewardData::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t RewardData::_internal_count() const {
  return count_;
}
inline uint64_t RewardData::count() const {
  // @@protoc_insertion_point(field_get:RewardData.count)
  return _internal_count();
}
inline void RewardData::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void RewardData::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:RewardData.count)
}

// -------------------------------------------------------------------

// MailList

// uint64 id = 1;
inline void MailList::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t MailList::_internal_id() const {
  return id_;
}
inline uint64_t MailList::id() const {
  // @@protoc_insertion_point(field_get:MailList.id)
  return _internal_id();
}
inline void MailList::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void MailList::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MailList.id)
}

// bytes title = 2;
inline void MailList::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MailList::title() const {
  // @@protoc_insertion_point(field_get:MailList.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.title)
}
inline std::string* MailList::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:MailList.title)
  return _s;
}
inline const std::string& MailList::_internal_title() const {
  return title_.Get();
}
inline void MailList::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_title() {
  // @@protoc_insertion_point(field_release:MailList.title)
  return title_.Release();
}
inline void MailList::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.title)
}

// bytes content = 3;
inline void MailList::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& MailList::content() const {
  // @@protoc_insertion_point(field_get:MailList.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.content)
}
inline std::string* MailList::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MailList.content)
  return _s;
}
inline const std::string& MailList::_internal_content() const {
  return content_.Get();
}
inline void MailList::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_content() {
  // @@protoc_insertion_point(field_release:MailList.content)
  return content_.Release();
}
inline void MailList::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.content)
}

// sint32 status = 4;
inline void MailList::clear_status() {
  status_ = 0;
}
inline int32_t MailList::_internal_status() const {
  return status_;
}
inline int32_t MailList::status() const {
  // @@protoc_insertion_point(field_get:MailList.status)
  return _internal_status();
}
inline void MailList::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void MailList::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:MailList.status)
}

// sint32 time = 5;
inline void MailList::clear_time() {
  time_ = 0;
}
inline int32_t MailList::_internal_time() const {
  return time_;
}
inline int32_t MailList::time() const {
  // @@protoc_insertion_point(field_get:MailList.time)
  return _internal_time();
}
inline void MailList::_internal_set_time(int32_t value) {
  
  time_ = value;
}
inline void MailList::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:MailList.time)
}

// repeated .RewardData data = 6;
inline int MailList::_internal_data_size() const {
  return data_.size();
}
inline int MailList::data_size() const {
  return _internal_data_size();
}
inline void MailList::clear_data() {
  data_.Clear();
}
inline ::RewardData* MailList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:MailList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >*
MailList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:MailList.data)
  return &data_;
}
inline const ::RewardData& MailList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::RewardData& MailList::data(int index) const {
  // @@protoc_insertion_point(field_get:MailList.data)
  return _internal_data(index);
}
inline ::RewardData* MailList::_internal_add_data() {
  return data_.Add();
}
inline ::RewardData* MailList::add_data() {
  ::RewardData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:MailList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >&
MailList::data() const {
  // @@protoc_insertion_point(field_list:MailList.data)
  return data_;
}

// -------------------------------------------------------------------

// ReqMailList

// -------------------------------------------------------------------

// ResMailList

// repeated .MailList data = 1;
inline int ResMailList::_internal_data_size() const {
  return data_.size();
}
inline int ResMailList::data_size() const {
  return _internal_data_size();
}
inline void ResMailList::clear_data() {
  data_.Clear();
}
inline ::MailList* ResMailList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResMailList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
ResMailList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResMailList.data)
  return &data_;
}
inline const ::MailList& ResMailList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::MailList& ResMailList::data(int index) const {
  // @@protoc_insertion_point(field_get:ResMailList.data)
  return _internal_data(index);
}
inline ::MailList* ResMailList::_internal_add_data() {
  return data_.Add();
}
inline ::MailList* ResMailList::add_data() {
  ::MailList* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResMailList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
ResMailList::data() const {
  // @@protoc_insertion_point(field_list:ResMailList.data)
  return data_;
}

// -------------------------------------------------------------------

// ReqOptMail

// uint64 id = 1;
inline void ReqOptMail::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ReqOptMail::_internal_id() const {
  return id_;
}
inline uint64_t ReqOptMail::id() const {
  // @@protoc_insertion_point(field_get:ReqOptMail.id)
  return _internal_id();
}
inline void ReqOptMail::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ReqOptMail::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ReqOptMail.id)
}

// sint32 opt = 2;
inline void ReqOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ReqOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ReqOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ReqOptMail.opt)
  return _internal_opt();
}
inline void ReqOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ReqOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ReqOptMail.opt)
}

// -------------------------------------------------------------------

// ResOptMail

// uint64 id = 1;
inline void ResOptMail::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ResOptMail::_internal_id() const {
  return id_;
}
inline uint64_t ResOptMail::id() const {
  // @@protoc_insertion_point(field_get:ResOptMail.id)
  return _internal_id();
}
inline void ResOptMail::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ResOptMail::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ResOptMail.id)
}

// sint32 opt = 2;
inline void ResOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ResOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ResOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ResOptMail.opt)
  return _internal_opt();
}
inline void ResOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ResOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ResOptMail.opt)
}

// -------------------------------------------------------------------

// ReqOneKeyOptMail

// sint32 opt = 1;
inline void ReqOneKeyOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ReqOneKeyOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ReqOneKeyOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ReqOneKeyOptMail.opt)
  return _internal_opt();
}
inline void ReqOneKeyOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ReqOneKeyOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ReqOneKeyOptMail.opt)
}

// -------------------------------------------------------------------

// ResOneKeyOptMail

// sint32 opt = 1;
inline void ResOneKeyOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ResOneKeyOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ResOneKeyOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ResOneKeyOptMail.opt)
  return _internal_opt();
}
inline void ResOneKeyOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ResOneKeyOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ResOneKeyOptMail.opt)
}

// repeated sint32 data = 2;
inline int ResOneKeyOptMail::_internal_data_size() const {
  return data_.size();
}
inline int ResOneKeyOptMail::data_size() const {
  return _internal_data_size();
}
inline void ResOneKeyOptMail::clear_data() {
  data_.Clear();
}
inline int32_t ResOneKeyOptMail::_internal_data(int index) const {
  return data_.Get(index);
}
inline int32_t ResOneKeyOptMail::data(int index) const {
  // @@protoc_insertion_point(field_get:ResOneKeyOptMail.data)
  return _internal_data(index);
}
inline void ResOneKeyOptMail::set_data(int index, int32_t value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::_internal_add_data(int32_t value) {
  data_.Add(value);
}
inline void ResOneKeyOptMail::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ResOneKeyOptMail.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResOneKeyOptMail::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResOneKeyOptMail::data() const {
  // @@protoc_insertion_point(field_list:ResOneKeyOptMail.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResOneKeyOptMail::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResOneKeyOptMail::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResOneKeyOptMail.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ResSendMail

// uint64 id = 1;
inline void ResSendMail::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ResSendMail::_internal_id() const {
  return id_;
}
inline uint64_t ResSendMail::id() const {
  // @@protoc_insertion_point(field_get:ResSendMail.id)
  return _internal_id();
}
inline void ResSendMail::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ResSendMail::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ResSendMail.id)
}

// bytes title = 2;
inline void ResSendMail::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ResSendMail::title() const {
  // @@protoc_insertion_point(field_get:ResSendMail.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResSendMail::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResSendMail.title)
}
inline std::string* ResSendMail::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ResSendMail.title)
  return _s;
}
inline const std::string& ResSendMail::_internal_title() const {
  return title_.Get();
}
inline void ResSendMail::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* ResSendMail::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* ResSendMail::release_title() {
  // @@protoc_insertion_point(field_release:ResSendMail.title)
  return title_.Release();
}
inline void ResSendMail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResSendMail.title)
}

// bytes content = 3;
inline void ResSendMail::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ResSendMail::content() const {
  // @@protoc_insertion_point(field_get:ResSendMail.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResSendMail::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResSendMail.content)
}
inline std::string* ResSendMail::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ResSendMail.content)
  return _s;
}
inline const std::string& ResSendMail::_internal_content() const {
  return content_.Get();
}
inline void ResSendMail::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResSendMail::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* ResSendMail::release_content() {
  // @@protoc_insertion_point(field_release:ResSendMail.content)
  return content_.Release();
}
inline void ResSendMail::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResSendMail.content)
}

// bytes desc = 4;
inline void ResSendMail::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ResSendMail::desc() const {
  // @@protoc_insertion_point(field_get:ResSendMail.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResSendMail::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResSendMail.desc)
}
inline std::string* ResSendMail::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:ResSendMail.desc)
  return _s;
}
inline const std::string& ResSendMail::_internal_desc() const {
  return desc_.Get();
}
inline void ResSendMail::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* ResSendMail::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* ResSendMail::release_desc() {
  // @@protoc_insertion_point(field_release:ResSendMail.desc)
  return desc_.Release();
}
inline void ResSendMail::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResSendMail.desc)
}

// sint32 time = 5;
inline void ResSendMail::clear_time() {
  time_ = 0;
}
inline int32_t ResSendMail::_internal_time() const {
  return time_;
}
inline int32_t ResSendMail::time() const {
  // @@protoc_insertion_point(field_get:ResSendMail.time)
  return _internal_time();
}
inline void ResSendMail::_internal_set_time(int32_t value) {
  
  time_ = value;
}
inline void ResSendMail::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ResSendMail.time)
}

// repeated .RewardData data = 6;
inline int ResSendMail::_internal_data_size() const {
  return data_.size();
}
inline int ResSendMail::data_size() const {
  return _internal_data_size();
}
inline void ResSendMail::clear_data() {
  data_.Clear();
}
inline ::RewardData* ResSendMail::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResSendMail.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >*
ResSendMail::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResSendMail.data)
  return &data_;
}
inline const ::RewardData& ResSendMail::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::RewardData& ResSendMail::data(int index) const {
  // @@protoc_insertion_point(field_get:ResSendMail.data)
  return _internal_data(index);
}
inline ::RewardData* ResSendMail::_internal_add_data() {
  return data_.Add();
}
inline ::RewardData* ResSendMail::add_data() {
  ::RewardData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResSendMail.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardData >&
ResSendMail::data() const {
  // @@protoc_insertion_point(field_list:ResSendMail.data)
  return data_;
}

// uint64 pid = 7;
inline void ResSendMail::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResSendMail::_internal_pid() const {
  return pid_;
}
inline uint64_t ResSendMail::pid() const {
  // @@protoc_insertion_point(field_get:ResSendMail.pid)
  return _internal_pid();
}
inline void ResSendMail::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResSendMail::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResSendMail.pid)
}

// bytes extra = 8;
inline void ResSendMail::clear_extra() {
  extra_.ClearToEmpty();
}
inline const std::string& ResSendMail::extra() const {
  // @@protoc_insertion_point(field_get:ResSendMail.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResSendMail::set_extra(ArgT0&& arg0, ArgT... args) {
 
 extra_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResSendMail.extra)
}
inline std::string* ResSendMail::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:ResSendMail.extra)
  return _s;
}
inline const std::string& ResSendMail::_internal_extra() const {
  return extra_.Get();
}
inline void ResSendMail::_internal_set_extra(const std::string& value) {
  
  extra_.Set(value, GetArenaForAllocation());
}
inline std::string* ResSendMail::_internal_mutable_extra() {
  
  return extra_.Mutable(GetArenaForAllocation());
}
inline std::string* ResSendMail::release_extra() {
  // @@protoc_insertion_point(field_release:ResSendMail.extra)
  return extra_.Release();
}
inline void ResSendMail::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_.IsDefault()) {
    extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResSendMail.extra)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto
