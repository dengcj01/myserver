// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Bag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Bag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Bag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Bag_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Bag_2eproto;
class ItemData;
struct ItemDataDefaultTypeInternal;
extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
class ReqBagData;
struct ReqBagDataDefaultTypeInternal;
extern ReqBagDataDefaultTypeInternal _ReqBagData_default_instance_;
class ResBagData;
struct ResBagDataDefaultTypeInternal;
extern ResBagDataDefaultTypeInternal _ResBagData_default_instance_;
class ResBagItemCntUpdate;
struct ResBagItemCntUpdateDefaultTypeInternal;
extern ResBagItemCntUpdateDefaultTypeInternal _ResBagItemCntUpdate_default_instance_;
class ResNoticeItemReward;
struct ResNoticeItemRewardDefaultTypeInternal;
extern ResNoticeItemRewardDefaultTypeInternal _ResNoticeItemReward_default_instance_;
class ResServerOptItem;
struct ResServerOptItemDefaultTypeInternal;
extern ResServerOptItemDefaultTypeInternal _ResServerOptItem_default_instance_;
class SimpleItemData;
struct SimpleItemDataDefaultTypeInternal;
extern SimpleItemDataDefaultTypeInternal _SimpleItemData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ItemData* Arena::CreateMaybeMessage<::ItemData>(Arena*);
template<> ::ReqBagData* Arena::CreateMaybeMessage<::ReqBagData>(Arena*);
template<> ::ResBagData* Arena::CreateMaybeMessage<::ResBagData>(Arena*);
template<> ::ResBagItemCntUpdate* Arena::CreateMaybeMessage<::ResBagItemCntUpdate>(Arena*);
template<> ::ResNoticeItemReward* Arena::CreateMaybeMessage<::ResNoticeItemReward>(Arena*);
template<> ::ResServerOptItem* Arena::CreateMaybeMessage<::ResServerOptItem>(Arena*);
template<> ::SimpleItemData* Arena::CreateMaybeMessage<::SimpleItemData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ItemData) */ {
 public:
  inline ItemData() : ItemData(nullptr) {}
  ~ItemData() override;
  explicit PROTOBUF_CONSTEXPR ItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ItemData";
  }
  protected:
  explicit ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kCountFieldNumber = 3,
    kItemIdFieldNumber = 2,
    kTimeFieldNumber = 4,
    kLevelFieldNumber = 5,
    kExpFieldNumber = 6,
    kOwnerFieldNumber = 7,
    kStarFieldNumber = 8,
    kStepFieldNumber = 9,
  };
  // uint64 guid = 1;
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // uint64 count = 3;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // uint32 itemId = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // sint32 time = 4;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // sint32 level = 5;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // sint32 exp = 6;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // uint64 owner = 7;
  void clear_owner();
  uint64_t owner() const;
  void set_owner(uint64_t value);
  private:
  uint64_t _internal_owner() const;
  void _internal_set_owner(uint64_t value);
  public:

  // sint32 star = 8;
  void clear_star();
  int32_t star() const;
  void set_star(int32_t value);
  private:
  int32_t _internal_star() const;
  void _internal_set_star(int32_t value);
  public:

  // sint32 step = 9;
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t guid_;
  uint64_t count_;
  uint32_t itemid_;
  int32_t time_;
  int32_t level_;
  int32_t exp_;
  uint64_t owner_;
  int32_t star_;
  int32_t step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class ReqBagData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqBagData) */ {
 public:
  inline ReqBagData() : ReqBagData(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqBagData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBagData(const ReqBagData& from);
  ReqBagData(ReqBagData&& from) noexcept
    : ReqBagData() {
    *this = ::std::move(from);
  }

  inline ReqBagData& operator=(const ReqBagData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBagData& operator=(ReqBagData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBagData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBagData* internal_default_instance() {
    return reinterpret_cast<const ReqBagData*>(
               &_ReqBagData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqBagData& a, ReqBagData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBagData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBagData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqBagData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqBagData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqBagData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqBagData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqBagData";
  }
  protected:
  explicit ReqBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqBagData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class ResBagData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResBagData) */ {
 public:
  inline ResBagData() : ResBagData(nullptr) {}
  ~ResBagData() override;
  explicit PROTOBUF_CONSTEXPR ResBagData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResBagData(const ResBagData& from);
  ResBagData(ResBagData&& from) noexcept
    : ResBagData() {
    *this = ::std::move(from);
  }

  inline ResBagData& operator=(const ResBagData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResBagData& operator=(ResBagData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResBagData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResBagData* internal_default_instance() {
    return reinterpret_cast<const ResBagData*>(
               &_ResBagData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResBagData& a, ResBagData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResBagData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResBagData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResBagData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResBagData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResBagData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResBagData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResBagData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResBagData";
  }
  protected:
  explicit ResBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ItemData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ItemData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
      mutable_data();
  private:
  const ::ItemData& _internal_data(int index) const;
  ::ItemData* _internal_add_data();
  public:
  const ::ItemData& data(int index) const;
  ::ItemData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
      data() const;

  // @@protoc_insertion_point(class_scope:ResBagData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class ResServerOptItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResServerOptItem) */ {
 public:
  inline ResServerOptItem() : ResServerOptItem(nullptr) {}
  ~ResServerOptItem() override;
  explicit PROTOBUF_CONSTEXPR ResServerOptItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResServerOptItem(const ResServerOptItem& from);
  ResServerOptItem(ResServerOptItem&& from) noexcept
    : ResServerOptItem() {
    *this = ::std::move(from);
  }

  inline ResServerOptItem& operator=(const ResServerOptItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResServerOptItem& operator=(ResServerOptItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResServerOptItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResServerOptItem* internal_default_instance() {
    return reinterpret_cast<const ResServerOptItem*>(
               &_ResServerOptItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResServerOptItem& a, ResServerOptItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ResServerOptItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResServerOptItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResServerOptItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResServerOptItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResServerOptItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResServerOptItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResServerOptItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResServerOptItem";
  }
  protected:
  explicit ResServerOptItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOptFieldNumber = 1,
  };
  // repeated .ItemData data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ItemData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
      mutable_data();
  private:
  const ::ItemData& _internal_data(int index) const;
  ::ItemData* _internal_add_data();
  public:
  const ::ItemData& data(int index) const;
  ::ItemData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
      data() const;

  // sint32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResServerOptItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData > data_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class ResBagItemCntUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResBagItemCntUpdate) */ {
 public:
  inline ResBagItemCntUpdate() : ResBagItemCntUpdate(nullptr) {}
  ~ResBagItemCntUpdate() override;
  explicit PROTOBUF_CONSTEXPR ResBagItemCntUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResBagItemCntUpdate(const ResBagItemCntUpdate& from);
  ResBagItemCntUpdate(ResBagItemCntUpdate&& from) noexcept
    : ResBagItemCntUpdate() {
    *this = ::std::move(from);
  }

  inline ResBagItemCntUpdate& operator=(const ResBagItemCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResBagItemCntUpdate& operator=(ResBagItemCntUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResBagItemCntUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResBagItemCntUpdate* internal_default_instance() {
    return reinterpret_cast<const ResBagItemCntUpdate*>(
               &_ResBagItemCntUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResBagItemCntUpdate& a, ResBagItemCntUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ResBagItemCntUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResBagItemCntUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResBagItemCntUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResBagItemCntUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResBagItemCntUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResBagItemCntUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResBagItemCntUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResBagItemCntUpdate";
  }
  protected:
  explicit ResBagItemCntUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ItemData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ItemData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
      mutable_data();
  private:
  const ::ItemData& _internal_data(int index) const;
  ::ItemData* _internal_add_data();
  public:
  const ::ItemData& data(int index) const;
  ::ItemData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
      data() const;

  // @@protoc_insertion_point(class_scope:ResBagItemCntUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class SimpleItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimpleItemData) */ {
 public:
  inline SimpleItemData() : SimpleItemData(nullptr) {}
  ~SimpleItemData() override;
  explicit PROTOBUF_CONSTEXPR SimpleItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleItemData(const SimpleItemData& from);
  SimpleItemData(SimpleItemData&& from) noexcept
    : SimpleItemData() {
    *this = ::std::move(from);
  }

  inline SimpleItemData& operator=(const SimpleItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleItemData& operator=(SimpleItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleItemData* internal_default_instance() {
    return reinterpret_cast<const SimpleItemData*>(
               &_SimpleItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimpleItemData& a, SimpleItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimpleItemData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpleItemData";
  }
  protected:
  explicit SimpleItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // sint32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SimpleItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t count_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// -------------------------------------------------------------------

class ResNoticeItemReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResNoticeItemReward) */ {
 public:
  inline ResNoticeItemReward() : ResNoticeItemReward(nullptr) {}
  ~ResNoticeItemReward() override;
  explicit PROTOBUF_CONSTEXPR ResNoticeItemReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResNoticeItemReward(const ResNoticeItemReward& from);
  ResNoticeItemReward(ResNoticeItemReward&& from) noexcept
    : ResNoticeItemReward() {
    *this = ::std::move(from);
  }

  inline ResNoticeItemReward& operator=(const ResNoticeItemReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResNoticeItemReward& operator=(ResNoticeItemReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResNoticeItemReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResNoticeItemReward* internal_default_instance() {
    return reinterpret_cast<const ResNoticeItemReward*>(
               &_ResNoticeItemReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResNoticeItemReward& a, ResNoticeItemReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ResNoticeItemReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResNoticeItemReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResNoticeItemReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResNoticeItemReward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResNoticeItemReward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResNoticeItemReward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResNoticeItemReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResNoticeItemReward";
  }
  protected:
  explicit ResNoticeItemReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kRdTypeFieldNumber = 2,
    kParam1FieldNumber = 3,
    kParam2FieldNumber = 4,
    kParam3FieldNumber = 5,
    kParam4FieldNumber = 6,
    kParam5FieldNumber = 7,
    kParam6FieldNumber = 8,
  };
  // repeated .SimpleItemData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::SimpleItemData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleItemData >*
      mutable_data();
  private:
  const ::SimpleItemData& _internal_data(int index) const;
  ::SimpleItemData* _internal_add_data();
  public:
  const ::SimpleItemData& data(int index) const;
  ::SimpleItemData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleItemData >&
      data() const;

  // sint32 rdType = 2;
  void clear_rdtype();
  int32_t rdtype() const;
  void set_rdtype(int32_t value);
  private:
  int32_t _internal_rdtype() const;
  void _internal_set_rdtype(int32_t value);
  public:

  // sint32 param1 = 3;
  void clear_param1();
  int32_t param1() const;
  void set_param1(int32_t value);
  private:
  int32_t _internal_param1() const;
  void _internal_set_param1(int32_t value);
  public:

  // sint32 param2 = 4;
  void clear_param2();
  int32_t param2() const;
  void set_param2(int32_t value);
  private:
  int32_t _internal_param2() const;
  void _internal_set_param2(int32_t value);
  public:

  // sint32 param3 = 5;
  void clear_param3();
  int32_t param3() const;
  void set_param3(int32_t value);
  private:
  int32_t _internal_param3() const;
  void _internal_set_param3(int32_t value);
  public:

  // uint64 param4 = 6;
  void clear_param4();
  uint64_t param4() const;
  void set_param4(uint64_t value);
  private:
  uint64_t _internal_param4() const;
  void _internal_set_param4(uint64_t value);
  public:

  // uint64 param5 = 7;
  void clear_param5();
  uint64_t param5() const;
  void set_param5(uint64_t value);
  private:
  uint64_t _internal_param5() const;
  void _internal_set_param5(uint64_t value);
  public:

  // uint64 param6 = 8;
  void clear_param6();
  uint64_t param6() const;
  void set_param6(uint64_t value);
  private:
  uint64_t _internal_param6() const;
  void _internal_set_param6(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResNoticeItemReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleItemData > data_;
  int32_t rdtype_;
  int32_t param1_;
  int32_t param2_;
  int32_t param3_;
  uint64_t param4_;
  uint64_t param5_;
  uint64_t param6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Bag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ItemData

// uint64 guid = 1;
inline void ItemData::clear_guid() {
  guid_ = uint64_t{0u};
}
inline uint64_t ItemData::_internal_guid() const {
  return guid_;
}
inline uint64_t ItemData::guid() const {
  // @@protoc_insertion_point(field_get:ItemData.guid)
  return _internal_guid();
}
inline void ItemData::_internal_set_guid(uint64_t value) {
  
  guid_ = value;
}
inline void ItemData::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:ItemData.guid)
}

// uint32 itemId = 2;
inline void ItemData::clear_itemid() {
  itemid_ = 0u;
}
inline uint32_t ItemData::_internal_itemid() const {
  return itemid_;
}
inline uint32_t ItemData::itemid() const {
  // @@protoc_insertion_point(field_get:ItemData.itemId)
  return _internal_itemid();
}
inline void ItemData::_internal_set_itemid(uint32_t value) {
  
  itemid_ = value;
}
inline void ItemData::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:ItemData.itemId)
}

// uint64 count = 3;
inline void ItemData::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t ItemData::_internal_count() const {
  return count_;
}
inline uint64_t ItemData::count() const {
  // @@protoc_insertion_point(field_get:ItemData.count)
  return _internal_count();
}
inline void ItemData::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void ItemData::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ItemData.count)
}

// sint32 time = 4;
inline void ItemData::clear_time() {
  time_ = 0;
}
inline int32_t ItemData::_internal_time() const {
  return time_;
}
inline int32_t ItemData::time() const {
  // @@protoc_insertion_point(field_get:ItemData.time)
  return _internal_time();
}
inline void ItemData::_internal_set_time(int32_t value) {
  
  time_ = value;
}
inline void ItemData::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ItemData.time)
}

// sint32 level = 5;
inline void ItemData::clear_level() {
  level_ = 0;
}
inline int32_t ItemData::_internal_level() const {
  return level_;
}
inline int32_t ItemData::level() const {
  // @@protoc_insertion_point(field_get:ItemData.level)
  return _internal_level();
}
inline void ItemData::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void ItemData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ItemData.level)
}

// sint32 exp = 6;
inline void ItemData::clear_exp() {
  exp_ = 0;
}
inline int32_t ItemData::_internal_exp() const {
  return exp_;
}
inline int32_t ItemData::exp() const {
  // @@protoc_insertion_point(field_get:ItemData.exp)
  return _internal_exp();
}
inline void ItemData::_internal_set_exp(int32_t value) {
  
  exp_ = value;
}
inline void ItemData::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:ItemData.exp)
}

// uint64 owner = 7;
inline void ItemData::clear_owner() {
  owner_ = uint64_t{0u};
}
inline uint64_t ItemData::_internal_owner() const {
  return owner_;
}
inline uint64_t ItemData::owner() const {
  // @@protoc_insertion_point(field_get:ItemData.owner)
  return _internal_owner();
}
inline void ItemData::_internal_set_owner(uint64_t value) {
  
  owner_ = value;
}
inline void ItemData::set_owner(uint64_t value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:ItemData.owner)
}

// sint32 star = 8;
inline void ItemData::clear_star() {
  star_ = 0;
}
inline int32_t ItemData::_internal_star() const {
  return star_;
}
inline int32_t ItemData::star() const {
  // @@protoc_insertion_point(field_get:ItemData.star)
  return _internal_star();
}
inline void ItemData::_internal_set_star(int32_t value) {
  
  star_ = value;
}
inline void ItemData::set_star(int32_t value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:ItemData.star)
}

// sint32 step = 9;
inline void ItemData::clear_step() {
  step_ = 0;
}
inline int32_t ItemData::_internal_step() const {
  return step_;
}
inline int32_t ItemData::step() const {
  // @@protoc_insertion_point(field_get:ItemData.step)
  return _internal_step();
}
inline void ItemData::_internal_set_step(int32_t value) {
  
  step_ = value;
}
inline void ItemData::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:ItemData.step)
}

// -------------------------------------------------------------------

// ReqBagData

// -------------------------------------------------------------------

// ResBagData

// repeated .ItemData data = 1;
inline int ResBagData::_internal_data_size() const {
  return data_.size();
}
inline int ResBagData::data_size() const {
  return _internal_data_size();
}
inline void ResBagData::clear_data() {
  data_.Clear();
}
inline ::ItemData* ResBagData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResBagData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
ResBagData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResBagData.data)
  return &data_;
}
inline const ::ItemData& ResBagData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ItemData& ResBagData::data(int index) const {
  // @@protoc_insertion_point(field_get:ResBagData.data)
  return _internal_data(index);
}
inline ::ItemData* ResBagData::_internal_add_data() {
  return data_.Add();
}
inline ::ItemData* ResBagData::add_data() {
  ::ItemData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResBagData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
ResBagData::data() const {
  // @@protoc_insertion_point(field_list:ResBagData.data)
  return data_;
}

// -------------------------------------------------------------------

// ResServerOptItem

// sint32 opt = 1;
inline void ResServerOptItem::clear_opt() {
  opt_ = 0;
}
inline int32_t ResServerOptItem::_internal_opt() const {
  return opt_;
}
inline int32_t ResServerOptItem::opt() const {
  // @@protoc_insertion_point(field_get:ResServerOptItem.opt)
  return _internal_opt();
}
inline void ResServerOptItem::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ResServerOptItem::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ResServerOptItem.opt)
}

// repeated .ItemData data = 2;
inline int ResServerOptItem::_internal_data_size() const {
  return data_.size();
}
inline int ResServerOptItem::data_size() const {
  return _internal_data_size();
}
inline void ResServerOptItem::clear_data() {
  data_.Clear();
}
inline ::ItemData* ResServerOptItem::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResServerOptItem.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
ResServerOptItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResServerOptItem.data)
  return &data_;
}
inline const ::ItemData& ResServerOptItem::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ItemData& ResServerOptItem::data(int index) const {
  // @@protoc_insertion_point(field_get:ResServerOptItem.data)
  return _internal_data(index);
}
inline ::ItemData* ResServerOptItem::_internal_add_data() {
  return data_.Add();
}
inline ::ItemData* ResServerOptItem::add_data() {
  ::ItemData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResServerOptItem.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
ResServerOptItem::data() const {
  // @@protoc_insertion_point(field_list:ResServerOptItem.data)
  return data_;
}

// -------------------------------------------------------------------

// ResBagItemCntUpdate

// repeated .ItemData data = 1;
inline int ResBagItemCntUpdate::_internal_data_size() const {
  return data_.size();
}
inline int ResBagItemCntUpdate::data_size() const {
  return _internal_data_size();
}
inline void ResBagItemCntUpdate::clear_data() {
  data_.Clear();
}
inline ::ItemData* ResBagItemCntUpdate::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResBagItemCntUpdate.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >*
ResBagItemCntUpdate::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResBagItemCntUpdate.data)
  return &data_;
}
inline const ::ItemData& ResBagItemCntUpdate::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ItemData& ResBagItemCntUpdate::data(int index) const {
  // @@protoc_insertion_point(field_get:ResBagItemCntUpdate.data)
  return _internal_data(index);
}
inline ::ItemData* ResBagItemCntUpdate::_internal_add_data() {
  return data_.Add();
}
inline ::ItemData* ResBagItemCntUpdate::add_data() {
  ::ItemData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResBagItemCntUpdate.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemData >&
ResBagItemCntUpdate::data() const {
  // @@protoc_insertion_point(field_list:ResBagItemCntUpdate.data)
  return data_;
}

// -------------------------------------------------------------------

// SimpleItemData

// sint32 id = 1;
inline void SimpleItemData::clear_id() {
  id_ = 0;
}
inline int32_t SimpleItemData::_internal_id() const {
  return id_;
}
inline int32_t SimpleItemData::id() const {
  // @@protoc_insertion_point(field_get:SimpleItemData.id)
  return _internal_id();
}
inline void SimpleItemData::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void SimpleItemData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SimpleItemData.id)
}

// uint64 count = 2;
inline void SimpleItemData::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t SimpleItemData::_internal_count() const {
  return count_;
}
inline uint64_t SimpleItemData::count() const {
  // @@protoc_insertion_point(field_get:SimpleItemData.count)
  return _internal_count();
}
inline void SimpleItemData::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void SimpleItemData::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:SimpleItemData.count)
}

// -------------------------------------------------------------------

// ResNoticeItemReward

// repeated .SimpleItemData data = 1;
inline int ResNoticeItemReward::_internal_data_size() const {
  return data_.size();
}
inline int ResNoticeItemReward::data_size() const {
  return _internal_data_size();
}
inline void ResNoticeItemReward::clear_data() {
  data_.Clear();
}
inline ::SimpleItemData* ResNoticeItemReward::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResNoticeItemReward.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleItemData >*
ResNoticeItemReward::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResNoticeItemReward.data)
  return &data_;
}
inline const ::SimpleItemData& ResNoticeItemReward::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::SimpleItemData& ResNoticeItemReward::data(int index) const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.data)
  return _internal_data(index);
}
inline ::SimpleItemData* ResNoticeItemReward::_internal_add_data() {
  return data_.Add();
}
inline ::SimpleItemData* ResNoticeItemReward::add_data() {
  ::SimpleItemData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResNoticeItemReward.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimpleItemData >&
ResNoticeItemReward::data() const {
  // @@protoc_insertion_point(field_list:ResNoticeItemReward.data)
  return data_;
}

// sint32 rdType = 2;
inline void ResNoticeItemReward::clear_rdtype() {
  rdtype_ = 0;
}
inline int32_t ResNoticeItemReward::_internal_rdtype() const {
  return rdtype_;
}
inline int32_t ResNoticeItemReward::rdtype() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.rdType)
  return _internal_rdtype();
}
inline void ResNoticeItemReward::_internal_set_rdtype(int32_t value) {
  
  rdtype_ = value;
}
inline void ResNoticeItemReward::set_rdtype(int32_t value) {
  _internal_set_rdtype(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.rdType)
}

// sint32 param1 = 3;
inline void ResNoticeItemReward::clear_param1() {
  param1_ = 0;
}
inline int32_t ResNoticeItemReward::_internal_param1() const {
  return param1_;
}
inline int32_t ResNoticeItemReward::param1() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param1)
  return _internal_param1();
}
inline void ResNoticeItemReward::_internal_set_param1(int32_t value) {
  
  param1_ = value;
}
inline void ResNoticeItemReward::set_param1(int32_t value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param1)
}

// sint32 param2 = 4;
inline void ResNoticeItemReward::clear_param2() {
  param2_ = 0;
}
inline int32_t ResNoticeItemReward::_internal_param2() const {
  return param2_;
}
inline int32_t ResNoticeItemReward::param2() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param2)
  return _internal_param2();
}
inline void ResNoticeItemReward::_internal_set_param2(int32_t value) {
  
  param2_ = value;
}
inline void ResNoticeItemReward::set_param2(int32_t value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param2)
}

// sint32 param3 = 5;
inline void ResNoticeItemReward::clear_param3() {
  param3_ = 0;
}
inline int32_t ResNoticeItemReward::_internal_param3() const {
  return param3_;
}
inline int32_t ResNoticeItemReward::param3() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param3)
  return _internal_param3();
}
inline void ResNoticeItemReward::_internal_set_param3(int32_t value) {
  
  param3_ = value;
}
inline void ResNoticeItemReward::set_param3(int32_t value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param3)
}

// uint64 param4 = 6;
inline void ResNoticeItemReward::clear_param4() {
  param4_ = uint64_t{0u};
}
inline uint64_t ResNoticeItemReward::_internal_param4() const {
  return param4_;
}
inline uint64_t ResNoticeItemReward::param4() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param4)
  return _internal_param4();
}
inline void ResNoticeItemReward::_internal_set_param4(uint64_t value) {
  
  param4_ = value;
}
inline void ResNoticeItemReward::set_param4(uint64_t value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param4)
}

// uint64 param5 = 7;
inline void ResNoticeItemReward::clear_param5() {
  param5_ = uint64_t{0u};
}
inline uint64_t ResNoticeItemReward::_internal_param5() const {
  return param5_;
}
inline uint64_t ResNoticeItemReward::param5() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param5)
  return _internal_param5();
}
inline void ResNoticeItemReward::_internal_set_param5(uint64_t value) {
  
  param5_ = value;
}
inline void ResNoticeItemReward::set_param5(uint64_t value) {
  _internal_set_param5(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param5)
}

// uint64 param6 = 8;
inline void ResNoticeItemReward::clear_param6() {
  param6_ = uint64_t{0u};
}
inline uint64_t ResNoticeItemReward::_internal_param6() const {
  return param6_;
}
inline uint64_t ResNoticeItemReward::param6() const {
  // @@protoc_insertion_point(field_get:ResNoticeItemReward.param6)
  return _internal_param6();
}
inline void ResNoticeItemReward::_internal_set_param6(uint64_t value) {
  
  param6_ = value;
}
inline void ResNoticeItemReward::set_param6(uint64_t value) {
  _internal_set_param6(value);
  // @@protoc_insertion_point(field_set:ResNoticeItemReward.param6)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Bag_2eproto
