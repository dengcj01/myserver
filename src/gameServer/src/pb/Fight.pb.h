// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Fight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Fight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Fight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Fight_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Fight_2eproto;
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Entity_AttrEntry_DoNotUse;
struct Entity_AttrEntry_DoNotUseDefaultTypeInternal;
extern Entity_AttrEntry_DoNotUseDefaultTypeInternal _Entity_AttrEntry_DoNotUse_default_instance_;
class ReqFight;
struct ReqFightDefaultTypeInternal;
extern ReqFightDefaultTypeInternal _ReqFight_default_instance_;
class ResFight;
struct ResFightDefaultTypeInternal;
extern ResFightDefaultTypeInternal _ResFight_default_instance_;
class Team;
struct TeamDefaultTypeInternal;
extern TeamDefaultTypeInternal _Team_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Entity* Arena::CreateMaybeMessage<::Entity>(Arena*);
template<> ::Entity_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::Entity_AttrEntry_DoNotUse>(Arena*);
template<> ::ReqFight* Arena::CreateMaybeMessage<::ReqFight>(Arena*);
template<> ::ResFight* Arena::CreateMaybeMessage<::ResFight>(Arena*);
template<> ::Team* Arena::CreateMaybeMessage<::Team>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqFight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqFight) */ {
 public:
  inline ReqFight() : ReqFight(nullptr) {}
  ~ReqFight() override;
  explicit PROTOBUF_CONSTEXPR ReqFight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqFight(const ReqFight& from);
  ReqFight(ReqFight&& from) noexcept
    : ReqFight() {
    *this = ::std::move(from);
  }

  inline ReqFight& operator=(const ReqFight& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqFight& operator=(ReqFight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqFight& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqFight* internal_default_instance() {
    return reinterpret_cast<const ReqFight*>(
               &_ReqFight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqFight& a, ReqFight& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqFight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqFight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqFight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqFight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqFight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqFight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqFight";
  }
  protected:
  explicit ReqFight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP5FieldNumber = 6,
    kTypeFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kP3FieldNumber = 4,
    kP4FieldNumber = 5,
  };
  // bytes p5 = 6;
  void clear_p5();
  const std::string& p5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p5();
  PROTOBUF_NODISCARD std::string* release_p5();
  void set_allocated_p5(std::string* p5);
  private:
  const std::string& _internal_p5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p5(const std::string& value);
  std::string* _internal_mutable_p5();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 p1 = 2;
  void clear_p1();
  int32_t p1() const;
  void set_p1(int32_t value);
  private:
  int32_t _internal_p1() const;
  void _internal_set_p1(int32_t value);
  public:

  // int32 p2 = 3;
  void clear_p2();
  int32_t p2() const;
  void set_p2(int32_t value);
  private:
  int32_t _internal_p2() const;
  void _internal_set_p2(int32_t value);
  public:

  // int32 p3 = 4;
  void clear_p3();
  int32_t p3() const;
  void set_p3(int32_t value);
  private:
  int32_t _internal_p3() const;
  void _internal_set_p3(int32_t value);
  public:

  // int32 p4 = 5;
  void clear_p4();
  int32_t p4() const;
  void set_p4(int32_t value);
  private:
  int32_t _internal_p4() const;
  void _internal_set_p4(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqFight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p5_;
  int32_t type_;
  int32_t p1_;
  int32_t p2_;
  int32_t p3_;
  int32_t p4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Fight_2eproto;
};
// -------------------------------------------------------------------

class Entity_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Entity_AttrEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Entity_AttrEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Entity_AttrEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Entity_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Entity_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Entity_AttrEntry_DoNotUse& other);
  static const Entity_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Entity_AttrEntry_DoNotUse*>(&_Entity_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Fight_2eproto;
};

// -------------------------------------------------------------------

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Entity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 6,
    kAttrFieldNumber = 7,
    kIdFieldNumber = 1,
    kStepFieldNumber = 2,
    kStarFieldNumber = 3,
    kLevelFieldNumber = 4,
    kSkinFieldNumber = 5,
  };
  // repeated int32 skills = 6;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  private:
  int32_t _internal_skills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skills() const;
  void _internal_add_skills(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skills();
  public:
  int32_t skills(int index) const;
  void set_skills(int index, int32_t value);
  void add_skills(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skills();

  // map<int32, int32> attr = 7;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_attr();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 step = 2;
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // int32 star = 3;
  void clear_star();
  int32_t star() const;
  void set_star(int32_t value);
  private:
  int32_t _internal_star() const;
  void _internal_set_star(int32_t value);
  public:

  // int32 level = 4;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 skin = 5;
  void clear_skin();
  int32_t skin() const;
  void set_skin(int32_t value);
  private:
  int32_t _internal_skin() const;
  void _internal_set_skin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skills_;
  mutable std::atomic<int> _skills_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Entity_AttrEntry_DoNotUse,
      int32_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> attr_;
  int32_t id_;
  int32_t step_;
  int32_t star_;
  int32_t level_;
  int32_t skin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Fight_2eproto;
};
// -------------------------------------------------------------------

class Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team) */ {
 public:
  inline Team() : Team(nullptr) {}
  ~Team() override;
  explicit PROTOBUF_CONSTEXPR Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Team(const Team& from);
  Team(Team&& from) noexcept
    : Team() {
    *this = ::std::move(from);
  }

  inline Team& operator=(const Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline Team& operator=(Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const Team* internal_default_instance() {
    return reinterpret_cast<const Team*>(
               &_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Team& a, Team& b) {
    a.Swap(&b);
  }
  inline void Swap(Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Team& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team";
  }
  protected:
  explicit Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnListFieldNumber = 7,
    kNameFieldNumber = 1,
    kIconFieldNumber = 2,
    kPidFieldNumber = 4,
    kHeadIconFieldNumber = 3,
    kVipFieldNumber = 6,
    kPowerFieldNumber = 5,
  };
  // repeated .Entity enList = 7;
  int enlist_size() const;
  private:
  int _internal_enlist_size() const;
  public:
  void clear_enlist();
  ::Entity* mutable_enlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >*
      mutable_enlist();
  private:
  const ::Entity& _internal_enlist(int index) const;
  ::Entity* _internal_add_enlist();
  public:
  const ::Entity& enlist(int index) const;
  ::Entity* add_enlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >&
      enlist() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string icon = 2;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // uint64 pid = 4;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // int32 headIcon = 3;
  void clear_headicon();
  int32_t headicon() const;
  void set_headicon(int32_t value);
  private:
  int32_t _internal_headicon() const;
  void _internal_set_headicon(int32_t value);
  public:

  // int32 vip = 6;
  void clear_vip();
  int32_t vip() const;
  void set_vip(int32_t value);
  private:
  int32_t _internal_vip() const;
  void _internal_set_vip(int32_t value);
  public:

  // uint64 power = 5;
  void clear_power();
  uint64_t power() const;
  void set_power(uint64_t value);
  private:
  uint64_t _internal_power() const;
  void _internal_set_power(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity > enlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  uint64_t pid_;
  int32_t headicon_;
  int32_t vip_;
  uint64_t power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Fight_2eproto;
};
// -------------------------------------------------------------------

class ResFight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResFight) */ {
 public:
  inline ResFight() : ResFight(nullptr) {}
  ~ResFight() override;
  explicit PROTOBUF_CONSTEXPR ResFight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResFight(const ResFight& from);
  ResFight(ResFight&& from) noexcept
    : ResFight() {
    *this = ::std::move(from);
  }

  inline ResFight& operator=(const ResFight& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResFight& operator=(ResFight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResFight& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResFight* internal_default_instance() {
    return reinterpret_cast<const ResFight*>(
               &_ResFight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResFight& a, ResFight& b) {
    a.Swap(&b);
  }
  inline void Swap(ResFight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResFight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResFight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResFight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResFight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResFight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResFight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResFight";
  }
  protected:
  explicit ResFight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP5FieldNumber = 6,
    kTeam1FieldNumber = 7,
    kTeam2FieldNumber = 8,
    kTypeFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kP3FieldNumber = 4,
    kP4FieldNumber = 5,
    kSeedFieldNumber = 9,
    kRoundFieldNumber = 10,
  };
  // bytes p5 = 6;
  void clear_p5();
  const std::string& p5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p5();
  PROTOBUF_NODISCARD std::string* release_p5();
  void set_allocated_p5(std::string* p5);
  private:
  const std::string& _internal_p5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p5(const std::string& value);
  std::string* _internal_mutable_p5();
  public:

  // .Team team1 = 7;
  bool has_team1() const;
  private:
  bool _internal_has_team1() const;
  public:
  void clear_team1();
  const ::Team& team1() const;
  PROTOBUF_NODISCARD ::Team* release_team1();
  ::Team* mutable_team1();
  void set_allocated_team1(::Team* team1);
  private:
  const ::Team& _internal_team1() const;
  ::Team* _internal_mutable_team1();
  public:
  void unsafe_arena_set_allocated_team1(
      ::Team* team1);
  ::Team* unsafe_arena_release_team1();

  // .Team team2 = 8;
  bool has_team2() const;
  private:
  bool _internal_has_team2() const;
  public:
  void clear_team2();
  const ::Team& team2() const;
  PROTOBUF_NODISCARD ::Team* release_team2();
  ::Team* mutable_team2();
  void set_allocated_team2(::Team* team2);
  private:
  const ::Team& _internal_team2() const;
  ::Team* _internal_mutable_team2();
  public:
  void unsafe_arena_set_allocated_team2(
      ::Team* team2);
  ::Team* unsafe_arena_release_team2();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 p1 = 2;
  void clear_p1();
  int32_t p1() const;
  void set_p1(int32_t value);
  private:
  int32_t _internal_p1() const;
  void _internal_set_p1(int32_t value);
  public:

  // int32 p2 = 3;
  void clear_p2();
  int32_t p2() const;
  void set_p2(int32_t value);
  private:
  int32_t _internal_p2() const;
  void _internal_set_p2(int32_t value);
  public:

  // int32 p3 = 4;
  void clear_p3();
  int32_t p3() const;
  void set_p3(int32_t value);
  private:
  int32_t _internal_p3() const;
  void _internal_set_p3(int32_t value);
  public:

  // int32 p4 = 5;
  void clear_p4();
  int32_t p4() const;
  void set_p4(int32_t value);
  private:
  int32_t _internal_p4() const;
  void _internal_set_p4(int32_t value);
  public:

  // int32 seed = 9;
  void clear_seed();
  int32_t seed() const;
  void set_seed(int32_t value);
  private:
  int32_t _internal_seed() const;
  void _internal_set_seed(int32_t value);
  public:

  // int32 round = 10;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResFight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p5_;
  ::Team* team1_;
  ::Team* team2_;
  int32_t type_;
  int32_t p1_;
  int32_t p2_;
  int32_t p3_;
  int32_t p4_;
  int32_t seed_;
  int32_t round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Fight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqFight

// int32 type = 1;
inline void ReqFight::clear_type() {
  type_ = 0;
}
inline int32_t ReqFight::_internal_type() const {
  return type_;
}
inline int32_t ReqFight::type() const {
  // @@protoc_insertion_point(field_get:ReqFight.type)
  return _internal_type();
}
inline void ReqFight::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ReqFight::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ReqFight.type)
}

// int32 p1 = 2;
inline void ReqFight::clear_p1() {
  p1_ = 0;
}
inline int32_t ReqFight::_internal_p1() const {
  return p1_;
}
inline int32_t ReqFight::p1() const {
  // @@protoc_insertion_point(field_get:ReqFight.p1)
  return _internal_p1();
}
inline void ReqFight::_internal_set_p1(int32_t value) {
  
  p1_ = value;
}
inline void ReqFight::set_p1(int32_t value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:ReqFight.p1)
}

// int32 p2 = 3;
inline void ReqFight::clear_p2() {
  p2_ = 0;
}
inline int32_t ReqFight::_internal_p2() const {
  return p2_;
}
inline int32_t ReqFight::p2() const {
  // @@protoc_insertion_point(field_get:ReqFight.p2)
  return _internal_p2();
}
inline void ReqFight::_internal_set_p2(int32_t value) {
  
  p2_ = value;
}
inline void ReqFight::set_p2(int32_t value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:ReqFight.p2)
}

// int32 p3 = 4;
inline void ReqFight::clear_p3() {
  p3_ = 0;
}
inline int32_t ReqFight::_internal_p3() const {
  return p3_;
}
inline int32_t ReqFight::p3() const {
  // @@protoc_insertion_point(field_get:ReqFight.p3)
  return _internal_p3();
}
inline void ReqFight::_internal_set_p3(int32_t value) {
  
  p3_ = value;
}
inline void ReqFight::set_p3(int32_t value) {
  _internal_set_p3(value);
  // @@protoc_insertion_point(field_set:ReqFight.p3)
}

// int32 p4 = 5;
inline void ReqFight::clear_p4() {
  p4_ = 0;
}
inline int32_t ReqFight::_internal_p4() const {
  return p4_;
}
inline int32_t ReqFight::p4() const {
  // @@protoc_insertion_point(field_get:ReqFight.p4)
  return _internal_p4();
}
inline void ReqFight::_internal_set_p4(int32_t value) {
  
  p4_ = value;
}
inline void ReqFight::set_p4(int32_t value) {
  _internal_set_p4(value);
  // @@protoc_insertion_point(field_set:ReqFight.p4)
}

// bytes p5 = 6;
inline void ReqFight::clear_p5() {
  p5_.ClearToEmpty();
}
inline const std::string& ReqFight::p5() const {
  // @@protoc_insertion_point(field_get:ReqFight.p5)
  return _internal_p5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqFight::set_p5(ArgT0&& arg0, ArgT... args) {
 
 p5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqFight.p5)
}
inline std::string* ReqFight::mutable_p5() {
  std::string* _s = _internal_mutable_p5();
  // @@protoc_insertion_point(field_mutable:ReqFight.p5)
  return _s;
}
inline const std::string& ReqFight::_internal_p5() const {
  return p5_.Get();
}
inline void ReqFight::_internal_set_p5(const std::string& value) {
  
  p5_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqFight::_internal_mutable_p5() {
  
  return p5_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqFight::release_p5() {
  // @@protoc_insertion_point(field_release:ReqFight.p5)
  return p5_.Release();
}
inline void ReqFight::set_allocated_p5(std::string* p5) {
  if (p5 != nullptr) {
    
  } else {
    
  }
  p5_.SetAllocated(p5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (p5_.IsDefault()) {
    p5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqFight.p5)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Entity

// int32 id = 1;
inline void Entity::clear_id() {
  id_ = 0;
}
inline int32_t Entity::_internal_id() const {
  return id_;
}
inline int32_t Entity::id() const {
  // @@protoc_insertion_point(field_get:Entity.id)
  return _internal_id();
}
inline void Entity::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Entity::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Entity.id)
}

// int32 step = 2;
inline void Entity::clear_step() {
  step_ = 0;
}
inline int32_t Entity::_internal_step() const {
  return step_;
}
inline int32_t Entity::step() const {
  // @@protoc_insertion_point(field_get:Entity.step)
  return _internal_step();
}
inline void Entity::_internal_set_step(int32_t value) {
  
  step_ = value;
}
inline void Entity::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:Entity.step)
}

// int32 star = 3;
inline void Entity::clear_star() {
  star_ = 0;
}
inline int32_t Entity::_internal_star() const {
  return star_;
}
inline int32_t Entity::star() const {
  // @@protoc_insertion_point(field_get:Entity.star)
  return _internal_star();
}
inline void Entity::_internal_set_star(int32_t value) {
  
  star_ = value;
}
inline void Entity::set_star(int32_t value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:Entity.star)
}

// int32 level = 4;
inline void Entity::clear_level() {
  level_ = 0;
}
inline int32_t Entity::_internal_level() const {
  return level_;
}
inline int32_t Entity::level() const {
  // @@protoc_insertion_point(field_get:Entity.level)
  return _internal_level();
}
inline void Entity::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void Entity::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Entity.level)
}

// int32 skin = 5;
inline void Entity::clear_skin() {
  skin_ = 0;
}
inline int32_t Entity::_internal_skin() const {
  return skin_;
}
inline int32_t Entity::skin() const {
  // @@protoc_insertion_point(field_get:Entity.skin)
  return _internal_skin();
}
inline void Entity::_internal_set_skin(int32_t value) {
  
  skin_ = value;
}
inline void Entity::set_skin(int32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:Entity.skin)
}

// repeated int32 skills = 6;
inline int Entity::_internal_skills_size() const {
  return skills_.size();
}
inline int Entity::skills_size() const {
  return _internal_skills_size();
}
inline void Entity::clear_skills() {
  skills_.Clear();
}
inline int32_t Entity::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline int32_t Entity::skills(int index) const {
  // @@protoc_insertion_point(field_get:Entity.skills)
  return _internal_skills(index);
}
inline void Entity::set_skills(int index, int32_t value) {
  skills_.Set(index, value);
  // @@protoc_insertion_point(field_set:Entity.skills)
}
inline void Entity::_internal_add_skills(int32_t value) {
  skills_.Add(value);
}
inline void Entity::add_skills(int32_t value) {
  _internal_add_skills(value);
  // @@protoc_insertion_point(field_add:Entity.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Entity::_internal_skills() const {
  return skills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Entity::skills() const {
  // @@protoc_insertion_point(field_list:Entity.skills)
  return _internal_skills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Entity::_internal_mutable_skills() {
  return &skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Entity::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:Entity.skills)
  return _internal_mutable_skills();
}

// map<int32, int32> attr = 7;
inline int Entity::_internal_attr_size() const {
  return attr_.size();
}
inline int Entity::attr_size() const {
  return _internal_attr_size();
}
inline void Entity::clear_attr() {
  attr_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Entity::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
Entity::attr() const {
  // @@protoc_insertion_point(field_map:Entity.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Entity::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
Entity::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:Entity.attr)
  return _internal_mutable_attr();
}

// -------------------------------------------------------------------

// Team

// bytes name = 1;
inline void Team::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Team::name() const {
  // @@protoc_insertion_point(field_get:Team.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Team.name)
}
inline std::string* Team::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Team.name)
  return _s;
}
inline const std::string& Team::_internal_name() const {
  return name_.Get();
}
inline void Team::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_name() {
  // @@protoc_insertion_point(field_release:Team.name)
  return name_.Release();
}
inline void Team::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Team.name)
}

// string icon = 2;
inline void Team::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& Team::icon() const {
  // @@protoc_insertion_point(field_get:Team.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Team.icon)
}
inline std::string* Team::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:Team.icon)
  return _s;
}
inline const std::string& Team::_internal_icon() const {
  return icon_.Get();
}
inline void Team::_internal_set_icon(const std::string& value) {
  
  icon_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_icon() {
  
  return icon_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_icon() {
  // @@protoc_insertion_point(field_release:Team.icon)
  return icon_.Release();
}
inline void Team::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Team.icon)
}

// int32 headIcon = 3;
inline void Team::clear_headicon() {
  headicon_ = 0;
}
inline int32_t Team::_internal_headicon() const {
  return headicon_;
}
inline int32_t Team::headicon() const {
  // @@protoc_insertion_point(field_get:Team.headIcon)
  return _internal_headicon();
}
inline void Team::_internal_set_headicon(int32_t value) {
  
  headicon_ = value;
}
inline void Team::set_headicon(int32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:Team.headIcon)
}

// uint64 pid = 4;
inline void Team::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t Team::_internal_pid() const {
  return pid_;
}
inline uint64_t Team::pid() const {
  // @@protoc_insertion_point(field_get:Team.pid)
  return _internal_pid();
}
inline void Team::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void Team::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Team.pid)
}

// uint64 power = 5;
inline void Team::clear_power() {
  power_ = uint64_t{0u};
}
inline uint64_t Team::_internal_power() const {
  return power_;
}
inline uint64_t Team::power() const {
  // @@protoc_insertion_point(field_get:Team.power)
  return _internal_power();
}
inline void Team::_internal_set_power(uint64_t value) {
  
  power_ = value;
}
inline void Team::set_power(uint64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:Team.power)
}

// int32 vip = 6;
inline void Team::clear_vip() {
  vip_ = 0;
}
inline int32_t Team::_internal_vip() const {
  return vip_;
}
inline int32_t Team::vip() const {
  // @@protoc_insertion_point(field_get:Team.vip)
  return _internal_vip();
}
inline void Team::_internal_set_vip(int32_t value) {
  
  vip_ = value;
}
inline void Team::set_vip(int32_t value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:Team.vip)
}

// repeated .Entity enList = 7;
inline int Team::_internal_enlist_size() const {
  return enlist_.size();
}
inline int Team::enlist_size() const {
  return _internal_enlist_size();
}
inline void Team::clear_enlist() {
  enlist_.Clear();
}
inline ::Entity* Team::mutable_enlist(int index) {
  // @@protoc_insertion_point(field_mutable:Team.enList)
  return enlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >*
Team::mutable_enlist() {
  // @@protoc_insertion_point(field_mutable_list:Team.enList)
  return &enlist_;
}
inline const ::Entity& Team::_internal_enlist(int index) const {
  return enlist_.Get(index);
}
inline const ::Entity& Team::enlist(int index) const {
  // @@protoc_insertion_point(field_get:Team.enList)
  return _internal_enlist(index);
}
inline ::Entity* Team::_internal_add_enlist() {
  return enlist_.Add();
}
inline ::Entity* Team::add_enlist() {
  ::Entity* _add = _internal_add_enlist();
  // @@protoc_insertion_point(field_add:Team.enList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >&
Team::enlist() const {
  // @@protoc_insertion_point(field_list:Team.enList)
  return enlist_;
}

// -------------------------------------------------------------------

// ResFight

// int32 type = 1;
inline void ResFight::clear_type() {
  type_ = 0;
}
inline int32_t ResFight::_internal_type() const {
  return type_;
}
inline int32_t ResFight::type() const {
  // @@protoc_insertion_point(field_get:ResFight.type)
  return _internal_type();
}
inline void ResFight::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ResFight::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ResFight.type)
}

// int32 p1 = 2;
inline void ResFight::clear_p1() {
  p1_ = 0;
}
inline int32_t ResFight::_internal_p1() const {
  return p1_;
}
inline int32_t ResFight::p1() const {
  // @@protoc_insertion_point(field_get:ResFight.p1)
  return _internal_p1();
}
inline void ResFight::_internal_set_p1(int32_t value) {
  
  p1_ = value;
}
inline void ResFight::set_p1(int32_t value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:ResFight.p1)
}

// int32 p2 = 3;
inline void ResFight::clear_p2() {
  p2_ = 0;
}
inline int32_t ResFight::_internal_p2() const {
  return p2_;
}
inline int32_t ResFight::p2() const {
  // @@protoc_insertion_point(field_get:ResFight.p2)
  return _internal_p2();
}
inline void ResFight::_internal_set_p2(int32_t value) {
  
  p2_ = value;
}
inline void ResFight::set_p2(int32_t value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:ResFight.p2)
}

// int32 p3 = 4;
inline void ResFight::clear_p3() {
  p3_ = 0;
}
inline int32_t ResFight::_internal_p3() const {
  return p3_;
}
inline int32_t ResFight::p3() const {
  // @@protoc_insertion_point(field_get:ResFight.p3)
  return _internal_p3();
}
inline void ResFight::_internal_set_p3(int32_t value) {
  
  p3_ = value;
}
inline void ResFight::set_p3(int32_t value) {
  _internal_set_p3(value);
  // @@protoc_insertion_point(field_set:ResFight.p3)
}

// int32 p4 = 5;
inline void ResFight::clear_p4() {
  p4_ = 0;
}
inline int32_t ResFight::_internal_p4() const {
  return p4_;
}
inline int32_t ResFight::p4() const {
  // @@protoc_insertion_point(field_get:ResFight.p4)
  return _internal_p4();
}
inline void ResFight::_internal_set_p4(int32_t value) {
  
  p4_ = value;
}
inline void ResFight::set_p4(int32_t value) {
  _internal_set_p4(value);
  // @@protoc_insertion_point(field_set:ResFight.p4)
}

// bytes p5 = 6;
inline void ResFight::clear_p5() {
  p5_.ClearToEmpty();
}
inline const std::string& ResFight::p5() const {
  // @@protoc_insertion_point(field_get:ResFight.p5)
  return _internal_p5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResFight::set_p5(ArgT0&& arg0, ArgT... args) {
 
 p5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResFight.p5)
}
inline std::string* ResFight::mutable_p5() {
  std::string* _s = _internal_mutable_p5();
  // @@protoc_insertion_point(field_mutable:ResFight.p5)
  return _s;
}
inline const std::string& ResFight::_internal_p5() const {
  return p5_.Get();
}
inline void ResFight::_internal_set_p5(const std::string& value) {
  
  p5_.Set(value, GetArenaForAllocation());
}
inline std::string* ResFight::_internal_mutable_p5() {
  
  return p5_.Mutable(GetArenaForAllocation());
}
inline std::string* ResFight::release_p5() {
  // @@protoc_insertion_point(field_release:ResFight.p5)
  return p5_.Release();
}
inline void ResFight::set_allocated_p5(std::string* p5) {
  if (p5 != nullptr) {
    
  } else {
    
  }
  p5_.SetAllocated(p5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (p5_.IsDefault()) {
    p5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResFight.p5)
}

// .Team team1 = 7;
inline bool ResFight::_internal_has_team1() const {
  return this != internal_default_instance() && team1_ != nullptr;
}
inline bool ResFight::has_team1() const {
  return _internal_has_team1();
}
inline void ResFight::clear_team1() {
  if (GetArenaForAllocation() == nullptr && team1_ != nullptr) {
    delete team1_;
  }
  team1_ = nullptr;
}
inline const ::Team& ResFight::_internal_team1() const {
  const ::Team* p = team1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Team&>(
      ::_Team_default_instance_);
}
inline const ::Team& ResFight::team1() const {
  // @@protoc_insertion_point(field_get:ResFight.team1)
  return _internal_team1();
}
inline void ResFight::unsafe_arena_set_allocated_team1(
    ::Team* team1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team1_);
  }
  team1_ = team1;
  if (team1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResFight.team1)
}
inline ::Team* ResFight::release_team1() {
  
  ::Team* temp = team1_;
  team1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Team* ResFight::unsafe_arena_release_team1() {
  // @@protoc_insertion_point(field_release:ResFight.team1)
  
  ::Team* temp = team1_;
  team1_ = nullptr;
  return temp;
}
inline ::Team* ResFight::_internal_mutable_team1() {
  
  if (team1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team>(GetArenaForAllocation());
    team1_ = p;
  }
  return team1_;
}
inline ::Team* ResFight::mutable_team1() {
  ::Team* _msg = _internal_mutable_team1();
  // @@protoc_insertion_point(field_mutable:ResFight.team1)
  return _msg;
}
inline void ResFight::set_allocated_team1(::Team* team1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete team1_;
  }
  if (team1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team1);
    if (message_arena != submessage_arena) {
      team1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team1, submessage_arena);
    }
    
  } else {
    
  }
  team1_ = team1;
  // @@protoc_insertion_point(field_set_allocated:ResFight.team1)
}

// .Team team2 = 8;
inline bool ResFight::_internal_has_team2() const {
  return this != internal_default_instance() && team2_ != nullptr;
}
inline bool ResFight::has_team2() const {
  return _internal_has_team2();
}
inline void ResFight::clear_team2() {
  if (GetArenaForAllocation() == nullptr && team2_ != nullptr) {
    delete team2_;
  }
  team2_ = nullptr;
}
inline const ::Team& ResFight::_internal_team2() const {
  const ::Team* p = team2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Team&>(
      ::_Team_default_instance_);
}
inline const ::Team& ResFight::team2() const {
  // @@protoc_insertion_point(field_get:ResFight.team2)
  return _internal_team2();
}
inline void ResFight::unsafe_arena_set_allocated_team2(
    ::Team* team2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team2_);
  }
  team2_ = team2;
  if (team2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResFight.team2)
}
inline ::Team* ResFight::release_team2() {
  
  ::Team* temp = team2_;
  team2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Team* ResFight::unsafe_arena_release_team2() {
  // @@protoc_insertion_point(field_release:ResFight.team2)
  
  ::Team* temp = team2_;
  team2_ = nullptr;
  return temp;
}
inline ::Team* ResFight::_internal_mutable_team2() {
  
  if (team2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team>(GetArenaForAllocation());
    team2_ = p;
  }
  return team2_;
}
inline ::Team* ResFight::mutable_team2() {
  ::Team* _msg = _internal_mutable_team2();
  // @@protoc_insertion_point(field_mutable:ResFight.team2)
  return _msg;
}
inline void ResFight::set_allocated_team2(::Team* team2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete team2_;
  }
  if (team2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team2);
    if (message_arena != submessage_arena) {
      team2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team2, submessage_arena);
    }
    
  } else {
    
  }
  team2_ = team2;
  // @@protoc_insertion_point(field_set_allocated:ResFight.team2)
}

// int32 seed = 9;
inline void ResFight::clear_seed() {
  seed_ = 0;
}
inline int32_t ResFight::_internal_seed() const {
  return seed_;
}
inline int32_t ResFight::seed() const {
  // @@protoc_insertion_point(field_get:ResFight.seed)
  return _internal_seed();
}
inline void ResFight::_internal_set_seed(int32_t value) {
  
  seed_ = value;
}
inline void ResFight::set_seed(int32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:ResFight.seed)
}

// int32 round = 10;
inline void ResFight::clear_round() {
  round_ = 0;
}
inline int32_t ResFight::_internal_round() const {
  return round_;
}
inline int32_t ResFight::round() const {
  // @@protoc_insertion_point(field_get:ResFight.round)
  return _internal_round();
}
inline void ResFight::_internal_set_round(int32_t value) {
  
  round_ = value;
}
inline void ResFight::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:ResFight.round)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Fight_2eproto
