// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fight.proto

#include "Fight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ReqFight::ReqFight(
    ::_pbi::ConstantInitialized)
  : p5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
  , p1_(0)
  , p2_(0)
  , p3_(0)
  , p4_(0){}
struct ReqFightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqFightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqFightDefaultTypeInternal() {}
  union {
    ReqFight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqFightDefaultTypeInternal _ReqFight_default_instance_;
PROTOBUF_CONSTEXPR Entity_AttrEntry_DoNotUse::Entity_AttrEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Entity_AttrEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_AttrEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_AttrEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Entity_AttrEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_AttrEntry_DoNotUseDefaultTypeInternal _Entity_AttrEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Entity::Entity(
    ::_pbi::ConstantInitialized)
  : skills_()
  , _skills_cached_byte_size_(0)
  , attr_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(0)
  , step_(0)
  , star_(0)
  , level_(0)
  , skin_(0){}
struct EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDefaultTypeInternal _Entity_default_instance_;
PROTOBUF_CONSTEXPR Team::Team(
    ::_pbi::ConstantInitialized)
  : enlist_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , headicon_(0)
  , vip_(0)
  , power_(uint64_t{0u}){}
struct TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamDefaultTypeInternal() {}
  union {
    Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamDefaultTypeInternal _Team_default_instance_;
PROTOBUF_CONSTEXPR ResFight::ResFight(
    ::_pbi::ConstantInitialized)
  : p5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , team1_(nullptr)
  , team2_(nullptr)
  , type_(0)
  , p1_(0)
  , p2_(0)
  , p3_(0)
  , p4_(0)
  , seed_(0)
  , round_(0){}
struct ResFightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResFightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResFightDefaultTypeInternal() {}
  union {
    ResFight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResFightDefaultTypeInternal _ResFight_default_instance_;
static ::_pb::Metadata file_level_metadata_Fight_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Fight_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Fight_2eproto = nullptr;

const uint32_t TableStruct_Fight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqFight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqFight, type_),
  PROTOBUF_FIELD_OFFSET(::ReqFight, p1_),
  PROTOBUF_FIELD_OFFSET(::ReqFight, p2_),
  PROTOBUF_FIELD_OFFSET(::ReqFight, p3_),
  PROTOBUF_FIELD_OFFSET(::ReqFight, p4_),
  PROTOBUF_FIELD_OFFSET(::ReqFight, p5_),
  PROTOBUF_FIELD_OFFSET(::Entity_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Entity_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Entity_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Entity_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Entity, id_),
  PROTOBUF_FIELD_OFFSET(::Entity, step_),
  PROTOBUF_FIELD_OFFSET(::Entity, star_),
  PROTOBUF_FIELD_OFFSET(::Entity, level_),
  PROTOBUF_FIELD_OFFSET(::Entity, skin_),
  PROTOBUF_FIELD_OFFSET(::Entity, skills_),
  PROTOBUF_FIELD_OFFSET(::Entity, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Team, name_),
  PROTOBUF_FIELD_OFFSET(::Team, icon_),
  PROTOBUF_FIELD_OFFSET(::Team, headicon_),
  PROTOBUF_FIELD_OFFSET(::Team, pid_),
  PROTOBUF_FIELD_OFFSET(::Team, power_),
  PROTOBUF_FIELD_OFFSET(::Team, vip_),
  PROTOBUF_FIELD_OFFSET(::Team, enlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResFight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResFight, type_),
  PROTOBUF_FIELD_OFFSET(::ResFight, p1_),
  PROTOBUF_FIELD_OFFSET(::ResFight, p2_),
  PROTOBUF_FIELD_OFFSET(::ResFight, p3_),
  PROTOBUF_FIELD_OFFSET(::ResFight, p4_),
  PROTOBUF_FIELD_OFFSET(::ResFight, p5_),
  PROTOBUF_FIELD_OFFSET(::ResFight, team1_),
  PROTOBUF_FIELD_OFFSET(::ResFight, team2_),
  PROTOBUF_FIELD_OFFSET(::ResFight, seed_),
  PROTOBUF_FIELD_OFFSET(::ResFight, round_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ReqFight)},
  { 12, 20, -1, sizeof(::Entity_AttrEntry_DoNotUse)},
  { 22, -1, -1, sizeof(::Entity)},
  { 35, -1, -1, sizeof(::Team)},
  { 48, -1, -1, sizeof(::ResFight)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ReqFight_default_instance_._instance,
  &::_Entity_AttrEntry_DoNotUse_default_instance_._instance,
  &::_Entity_default_instance_._instance,
  &::_Team_default_instance_._instance,
  &::_ResFight_default_instance_._instance,
};

const char descriptor_table_protodef_Fight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Fight.proto\"T\n\010ReqFight\022\014\n\004type\030\001 \001(\005\022"
  "\n\n\002p1\030\002 \001(\005\022\n\n\002p2\030\003 \001(\005\022\n\n\002p3\030\004 \001(\005\022\n\n\002p"
  "4\030\005 \001(\005\022\n\n\002p5\030\006 \001(\014\"\253\001\n\006Entity\022\n\n\002id\030\001 \001"
  "(\005\022\014\n\004step\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\022\r\n\005level\030"
  "\004 \001(\005\022\014\n\004skin\030\005 \001(\005\022\016\n\006skills\030\006 \003(\005\022\037\n\004a"
  "ttr\030\007 \003(\0132\021.Entity.AttrEntry\032+\n\tAttrEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"v\n\004Tea"
  "m\022\014\n\004name\030\001 \001(\014\022\014\n\004icon\030\002 \001(\t\022\020\n\010headIco"
  "n\030\003 \001(\005\022\013\n\003pid\030\004 \001(\004\022\r\n\005power\030\005 \001(\004\022\013\n\003v"
  "ip\030\006 \001(\005\022\027\n\006enList\030\007 \003(\0132\007.Entity\"\235\001\n\010Re"
  "sFight\022\014\n\004type\030\001 \001(\005\022\n\n\002p1\030\002 \001(\005\022\n\n\002p2\030\003"
  " \001(\005\022\n\n\002p3\030\004 \001(\005\022\n\n\002p4\030\005 \001(\005\022\n\n\002p5\030\006 \001(\014"
  "\022\024\n\005team1\030\007 \001(\0132\005.Team\022\024\n\005team2\030\010 \001(\0132\005."
  "Team\022\014\n\004seed\030\t \001(\005\022\r\n\005round\030\n \001(\005b\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_Fight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Fight_2eproto = {
    false, false, 561, descriptor_table_protodef_Fight_2eproto,
    "Fight.proto",
    &descriptor_table_Fight_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_Fight_2eproto::offsets,
    file_level_metadata_Fight_2eproto, file_level_enum_descriptors_Fight_2eproto,
    file_level_service_descriptors_Fight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Fight_2eproto_getter() {
  return &descriptor_table_Fight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Fight_2eproto(&descriptor_table_Fight_2eproto);

// ===================================================================

class ReqFight::_Internal {
 public:
};

ReqFight::ReqFight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqFight)
}
ReqFight::ReqFight(const ReqFight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    p5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p5().empty()) {
    p5_.Set(from._internal_p5(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&p4_) -
    reinterpret_cast<char*>(&type_)) + sizeof(p4_));
  // @@protoc_insertion_point(copy_constructor:ReqFight)
}

inline void ReqFight::SharedCtor() {
p5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  p5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p4_) -
    reinterpret_cast<char*>(&type_)) + sizeof(p4_));
}

ReqFight::~ReqFight() {
  // @@protoc_insertion_point(destructor:ReqFight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqFight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  p5_.Destroy();
}

void ReqFight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqFight::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqFight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p5_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p4_) -
      reinterpret_cast<char*>(&type_)) + sizeof(p4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqFight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          p3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          p4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes p5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_p5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqFight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqFight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 p1 = 2;
  if (this->_internal_p1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_p1(), target);
  }

  // int32 p2 = 3;
  if (this->_internal_p2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_p2(), target);
  }

  // int32 p3 = 4;
  if (this->_internal_p3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_p3(), target);
  }

  // int32 p4 = 5;
  if (this->_internal_p4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_p4(), target);
  }

  // bytes p5 = 6;
  if (!this->_internal_p5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_p5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqFight)
  return target;
}

size_t ReqFight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqFight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes p5 = 6;
  if (!this->_internal_p5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p5());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 p1 = 2;
  if (this->_internal_p1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p1());
  }

  // int32 p2 = 3;
  if (this->_internal_p2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p2());
  }

  // int32 p3 = 4;
  if (this->_internal_p3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p3());
  }

  // int32 p4 = 5;
  if (this->_internal_p4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqFight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqFight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqFight::GetClassData() const { return &_class_data_; }

void ReqFight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqFight *>(to)->MergeFrom(
      static_cast<const ReqFight &>(from));
}


void ReqFight::MergeFrom(const ReqFight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqFight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p5().empty()) {
    _internal_set_p5(from._internal_p5());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_p1() != 0) {
    _internal_set_p1(from._internal_p1());
  }
  if (from._internal_p2() != 0) {
    _internal_set_p2(from._internal_p2());
  }
  if (from._internal_p3() != 0) {
    _internal_set_p3(from._internal_p3());
  }
  if (from._internal_p4() != 0) {
    _internal_set_p4(from._internal_p4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqFight::CopyFrom(const ReqFight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqFight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFight::IsInitialized() const {
  return true;
}

void ReqFight::InternalSwap(ReqFight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &p5_, lhs_arena,
      &other->p5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqFight, p4_)
      + sizeof(ReqFight::p4_)
      - PROTOBUF_FIELD_OFFSET(ReqFight, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqFight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Fight_2eproto_getter, &descriptor_table_Fight_2eproto_once,
      file_level_metadata_Fight_2eproto[0]);
}

// ===================================================================

Entity_AttrEntry_DoNotUse::Entity_AttrEntry_DoNotUse() {}
Entity_AttrEntry_DoNotUse::Entity_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Entity_AttrEntry_DoNotUse::MergeFrom(const Entity_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Entity_AttrEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Fight_2eproto_getter, &descriptor_table_Fight_2eproto_once,
      file_level_metadata_Fight_2eproto[1]);
}

// ===================================================================

class Entity::_Internal {
 public:
};

Entity::Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  skills_(arena),
  attr_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Entity::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skin_));
  // @@protoc_insertion_point(copy_constructor:Entity)
}

inline void Entity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skin_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:Entity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Entity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attr_.Destruct();
}

void Entity::ArenaDtor(void* object) {
  Entity* _this = reinterpret_cast< Entity* >(object);
  _this->attr_.Destruct();
}
void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:Entity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skills_.Clear();
  attr_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skin_) -
      reinterpret_cast<char*>(&id_)) + sizeof(skin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 skills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_skills(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_skills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> attr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_step(), target);
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_star(), target);
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 skin = 5;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_skin(), target);
  }

  // repeated int32 skills = 6;
  {
    int byte_size = _skills_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_skills(), byte_size, target);
    }
  }

  // map<int32, int32> attr = 7;
  if (!this->_internal_attr().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = Entity_AttrEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attr();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Entity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 skills = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->skills_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _skills_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> attr = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += Entity_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star());
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 skin = 5;
  if (this->_internal_skin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Entity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity::GetClassData() const { return &_class_data_; }

void Entity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Entity *>(to)->MergeFrom(
      static_cast<const Entity &>(from));
}


void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Entity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  skills_.MergeFrom(from.skills_);
  attr_.MergeFrom(from.attr_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from._internal_star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_skin() != 0) {
    _internal_set_skin(from._internal_skin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  skills_.InternalSwap(&other->skills_);
  attr_.InternalSwap(&other->attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, skin_)
      + sizeof(Entity::skin_)
      - PROTOBUF_FIELD_OFFSET(Entity, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Fight_2eproto_getter, &descriptor_table_Fight_2eproto_once,
      file_level_metadata_Fight_2eproto[2]);
}

// ===================================================================

class Team::_Internal {
 public:
};

Team::Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enlist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Team)
}
Team::Team(const Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enlist_(from.enlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(power_));
  // @@protoc_insertion_point(copy_constructor:Team)
}

inline void Team::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(power_));
}

Team::~Team() {
  // @@protoc_insertion_point(destructor:Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_.Destroy();
}

void Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Team::Clear() {
// @@protoc_insertion_point(message_clear_start:Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enlist_.Clear();
  name_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Team.icon"));
        } else
          goto handle_unusual;
        continue;
      // int32 headIcon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Entity enList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string icon = 2;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Team.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // int32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_headicon(), target);
  }

  // uint64 pid = 4;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pid(), target);
  }

  // uint64 power = 5;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_power(), target);
  }

  // int32 vip = 6;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_vip(), target);
  }

  // repeated .Entity enList = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_enlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team)
  return target;
}

size_t Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Entity enList = 7;
  total_size += 1UL * this->_internal_enlist_size();
  for (const auto& msg : this->enlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string icon = 2;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // uint64 pid = 4;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // int32 headIcon = 3;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_headicon());
  }

  // int32 vip = 6;
  if (this->_internal_vip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vip());
  }

  // uint64 power = 5;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Team::GetClassData() const { return &_class_data_; }

void Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Team *>(to)->MergeFrom(
      static_cast<const Team &>(from));
}


void Team::MergeFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  enlist_.MergeFrom(from.enlist_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Team::CopyFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  return true;
}

void Team::InternalSwap(Team* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enlist_.InternalSwap(&other->enlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Team, power_)
      + sizeof(Team::power_)
      - PROTOBUF_FIELD_OFFSET(Team, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Fight_2eproto_getter, &descriptor_table_Fight_2eproto_once,
      file_level_metadata_Fight_2eproto[3]);
}

// ===================================================================

class ResFight::_Internal {
 public:
  static const ::Team& team1(const ResFight* msg);
  static const ::Team& team2(const ResFight* msg);
};

const ::Team&
ResFight::_Internal::team1(const ResFight* msg) {
  return *msg->team1_;
}
const ::Team&
ResFight::_Internal::team2(const ResFight* msg) {
  return *msg->team2_;
}
ResFight::ResFight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResFight)
}
ResFight::ResFight(const ResFight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    p5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p5().empty()) {
    p5_.Set(from._internal_p5(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_team1()) {
    team1_ = new ::Team(*from.team1_);
  } else {
    team1_ = nullptr;
  }
  if (from._internal_has_team2()) {
    team2_ = new ::Team(*from.team2_);
  } else {
    team2_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&type_)) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:ResFight)
}

inline void ResFight::SharedCtor() {
p5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  p5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&team1_)) + sizeof(round_));
}

ResFight::~ResFight() {
  // @@protoc_insertion_point(destructor:ResFight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResFight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  p5_.Destroy();
  if (this != internal_default_instance()) delete team1_;
  if (this != internal_default_instance()) delete team2_;
}

void ResFight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResFight::Clear() {
// @@protoc_insertion_point(message_clear_start:ResFight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p5_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && team1_ != nullptr) {
    delete team1_;
  }
  team1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && team2_ != nullptr) {
    delete team2_;
  }
  team2_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&type_)) + sizeof(round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResFight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          p3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 p4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          p4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes p5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_p5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Team team1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_team1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Team team2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_team2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResFight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResFight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 p1 = 2;
  if (this->_internal_p1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_p1(), target);
  }

  // int32 p2 = 3;
  if (this->_internal_p2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_p2(), target);
  }

  // int32 p3 = 4;
  if (this->_internal_p3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_p3(), target);
  }

  // int32 p4 = 5;
  if (this->_internal_p4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_p4(), target);
  }

  // bytes p5 = 6;
  if (!this->_internal_p5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_p5(), target);
  }

  // .Team team1 = 7;
  if (this->_internal_has_team1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::team1(this),
        _Internal::team1(this).GetCachedSize(), target, stream);
  }

  // .Team team2 = 8;
  if (this->_internal_has_team2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::team2(this),
        _Internal::team2(this).GetCachedSize(), target, stream);
  }

  // int32 seed = 9;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_seed(), target);
  }

  // int32 round = 10;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResFight)
  return target;
}

size_t ResFight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResFight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes p5 = 6;
  if (!this->_internal_p5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p5());
  }

  // .Team team1 = 7;
  if (this->_internal_has_team1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team1_);
  }

  // .Team team2 = 8;
  if (this->_internal_has_team2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team2_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 p1 = 2;
  if (this->_internal_p1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p1());
  }

  // int32 p2 = 3;
  if (this->_internal_p2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p2());
  }

  // int32 p3 = 4;
  if (this->_internal_p3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p3());
  }

  // int32 p4 = 5;
  if (this->_internal_p4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_p4());
  }

  // int32 seed = 9;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seed());
  }

  // int32 round = 10;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResFight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResFight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResFight::GetClassData() const { return &_class_data_; }

void ResFight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResFight *>(to)->MergeFrom(
      static_cast<const ResFight &>(from));
}


void ResFight::MergeFrom(const ResFight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResFight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_p5().empty()) {
    _internal_set_p5(from._internal_p5());
  }
  if (from._internal_has_team1()) {
    _internal_mutable_team1()->::Team::MergeFrom(from._internal_team1());
  }
  if (from._internal_has_team2()) {
    _internal_mutable_team2()->::Team::MergeFrom(from._internal_team2());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_p1() != 0) {
    _internal_set_p1(from._internal_p1());
  }
  if (from._internal_p2() != 0) {
    _internal_set_p2(from._internal_p2());
  }
  if (from._internal_p3() != 0) {
    _internal_set_p3(from._internal_p3());
  }
  if (from._internal_p4() != 0) {
    _internal_set_p4(from._internal_p4());
  }
  if (from._internal_seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from._internal_round() != 0) {
    _internal_set_round(from._internal_round());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResFight::CopyFrom(const ResFight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResFight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResFight::IsInitialized() const {
  return true;
}

void ResFight::InternalSwap(ResFight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &p5_, lhs_arena,
      &other->p5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResFight, round_)
      + sizeof(ResFight::round_)
      - PROTOBUF_FIELD_OFFSET(ResFight, team1_)>(
          reinterpret_cast<char*>(&team1_),
          reinterpret_cast<char*>(&other->team1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResFight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Fight_2eproto_getter, &descriptor_table_Fight_2eproto_once,
      file_level_metadata_Fight_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReqFight*
Arena::CreateMaybeMessage< ::ReqFight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqFight >(arena);
}
template<> PROTOBUF_NOINLINE ::Entity_AttrEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Entity_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Entity_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Entity*
Arena::CreateMaybeMessage< ::Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::Team*
Arena::CreateMaybeMessage< ::Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Team >(arena);
}
template<> PROTOBUF_NOINLINE ::ResFight*
Arena::CreateMaybeMessage< ::ResFight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResFight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
