// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommon.proto

#include "ServerCommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ReqDbLoginAuth::ReqDbLoginAuth(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , fromserverid_(0){}
struct ReqDbLoginAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbLoginAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbLoginAuthDefaultTypeInternal() {}
  union {
    ReqDbLoginAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbLoginAuthDefaultTypeInternal _ReqDbLoginAuth_default_instance_;
PROTOBUF_CONSTEXPR ResDbLoginAuth::ResDbLoginAuth(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , gmlv_(0)
  , fcmtime_(0)
  , code_(0)
  , fromserverid_(0)
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResDbLoginAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbLoginAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbLoginAuthDefaultTypeInternal() {}
  union {
    ResDbLoginAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbLoginAuthDefaultTypeInternal _ResDbLoginAuth_default_instance_;
PROTOBUF_CONSTEXPR ReqDbSelectPlayer::ReqDbSelectPlayer(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , fromserverid_(0){}
struct ReqDbSelectPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbSelectPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbSelectPlayerDefaultTypeInternal() {}
  union {
    ReqDbSelectPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbSelectPlayerDefaultTypeInternal _ReqDbSelectPlayer_default_instance_;
PROTOBUF_CONSTEXPR ResDbSelectPlayer::ResDbSelectPlayer(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , code_(0){}
struct ResDbSelectPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbSelectPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbSelectPlayerDefaultTypeInternal() {}
  union {
    ResDbSelectPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbSelectPlayerDefaultTypeInternal _ResDbSelectPlayer_default_instance_;
PROTOBUF_CONSTEXPR ReqDbCreatePlayer::ReqDbCreatePlayer(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sex_(0)
  , fromserverid_(0)
  , sessionid_(uint64_t{0u})
  , serverid_(0){}
struct ReqDbCreatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbCreatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbCreatePlayerDefaultTypeInternal() {}
  union {
    ReqDbCreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbCreatePlayerDefaultTypeInternal _ReqDbCreatePlayer_default_instance_;
PROTOBUF_CONSTEXPR ResDbCreatePlayer::ResDbCreatePlayer(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sex_(0)
  , code_(0)
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResDbCreatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbCreatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbCreatePlayerDefaultTypeInternal() {}
  union {
    ResDbCreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbCreatePlayerDefaultTypeInternal _ResDbCreatePlayer_default_instance_;
PROTOBUF_CONSTEXPR ReqDbEnterGame::ReqDbEnterGame(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ReqDbEnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbEnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbEnterGameDefaultTypeInternal() {}
  union {
    ReqDbEnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbEnterGameDefaultTypeInternal _ReqDbEnterGame_default_instance_;
PROTOBUF_CONSTEXPR ResDbEnterGame::ResDbEnterGame(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , code_(0){}
struct ResDbEnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbEnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbEnterGameDefaultTypeInternal() {}
  union {
    ResDbEnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbEnterGameDefaultTypeInternal _ResDbEnterGame_default_instance_;
PROTOBUF_CONSTEXPR PlayerBaseData::PlayerBaseData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , power_(uint64_t{0u})
  , createtime_(0)
  , level_(0)
  , vip_(0)
  , exp_(0)
  , sessionid_(uint64_t{0u})
  , guildid_(uint64_t{0u})
  , logintime_(0)
  , chargeval_(0)
  , headicon_(0)
  , title_(0)
  , skin_(0)
  , fromserverid_(0)
  , logouttime_(0){}
struct PlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerBaseDataDefaultTypeInternal() {}
  union {
    PlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerBaseDataDefaultTypeInternal _PlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR BagData::BagData(
    ::_pbi::ConstantInitialized)
  : guid_(uint64_t{0u})
  , count_(uint64_t{0u})
  , itemid_(0u)
  , time_(0)
  , level_(0)
  , exp_(0)
  , owner_(uint64_t{0u})
  , star_(0)
  , step_(0){}
struct BagDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BagDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BagDataDefaultTypeInternal() {}
  union {
    BagData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BagDataDefaultTypeInternal _BagData_default_instance_;
PROTOBUF_CONSTEXPR ResReturnPlayerBaseData::ResReturnPlayerBaseData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResReturnPlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnPlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnPlayerBaseDataDefaultTypeInternal() {}
  union {
    ResReturnPlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnPlayerBaseDataDefaultTypeInternal _ResReturnPlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR ResReturnPlayerBagData::ResReturnPlayerBagData(
    ::_pbi::ConstantInitialized)
  : data_()
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResReturnPlayerBagDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnPlayerBagDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnPlayerBagDataDefaultTypeInternal() {}
  union {
    ResReturnPlayerBagData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnPlayerBagDataDefaultTypeInternal _ResReturnPlayerBagData_default_instance_;
PROTOBUF_CONSTEXPR ResReturnPlayerModuleData::ResReturnPlayerModuleData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , moduleid_(0){}
struct ResReturnPlayerModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnPlayerModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnPlayerModuleDataDefaultTypeInternal() {}
  union {
    ResReturnPlayerModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnPlayerModuleDataDefaultTypeInternal _ResReturnPlayerModuleData_default_instance_;
PROTOBUF_CONSTEXPR ReqSavePlayerBaseData::ReqSavePlayerBaseData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , pid_(uint64_t{0u}){}
struct ReqSavePlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSavePlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSavePlayerBaseDataDefaultTypeInternal() {}
  union {
    ReqSavePlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSavePlayerBaseDataDefaultTypeInternal _ReqSavePlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR ReqSavePlayerBagData::ReqSavePlayerBagData(
    ::_pbi::ConstantInitialized)
  : data_()
  , pid_(uint64_t{0u}){}
struct ReqSavePlayerBagDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSavePlayerBagDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSavePlayerBagDataDefaultTypeInternal() {}
  union {
    ReqSavePlayerBagData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSavePlayerBagDataDefaultTypeInternal _ReqSavePlayerBagData_default_instance_;
PROTOBUF_CONSTEXPR ReqSavePlayerModuleData::ReqSavePlayerModuleData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , moduleid_(0)
  , serverid_(0){}
struct ReqSavePlayerModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSavePlayerModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSavePlayerModuleDataDefaultTypeInternal() {}
  union {
    ReqSavePlayerModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSavePlayerModuleDataDefaultTypeInternal _ReqSavePlayerModuleData_default_instance_;
PROTOBUF_CONSTEXPR ReqSendGmToGame::ReqSendGmToGame(
    ::_pbi::ConstantInitialized)
  : cmd_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ReqSendGmToGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSendGmToGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSendGmToGameDefaultTypeInternal() {}
  union {
    ReqSendGmToGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSendGmToGameDefaultTypeInternal _ReqSendGmToGame_default_instance_;
PROTOBUF_CONSTEXPR ReqGameReport::ReqGameReport(
    ::_pbi::ConstantInitialized)
  : serverid_(0){}
struct ReqGameReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqGameReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqGameReportDefaultTypeInternal() {}
  union {
    ReqGameReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqGameReportDefaultTypeInternal _ReqGameReport_default_instance_;
PROTOBUF_CONSTEXPR ReqGameQuit::ReqGameQuit(
    ::_pbi::ConstantInitialized){}
struct ReqGameQuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqGameQuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqGameQuitDefaultTypeInternal() {}
  union {
    ReqGameQuit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqGameQuitDefaultTypeInternal _ReqGameQuit_default_instance_;
PROTOBUF_CONSTEXPR LogItems::LogItems(
    ::_pbi::ConstantInitialized)
  : cnt_(uint64_t{0u})
  , oldcnt_(uint64_t{0u})
  , id_(0){}
struct LogItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogItemsDefaultTypeInternal() {}
  union {
    LogItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogItemsDefaultTypeInternal _LogItems_default_instance_;
PROTOBUF_CONSTEXPR WriteLogData::WriteLogData(
    ::_pbi::ConstantInitialized)
  : data_()
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , serverid_(0){}
struct WriteLogDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteLogDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteLogDataDefaultTypeInternal() {}
  union {
    WriteLogData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteLogDataDefaultTypeInternal _WriteLogData_default_instance_;
PROTOBUF_CONSTEXPR LogMails::LogMails(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reward_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mailid_(uint64_t{0u})
  , expiretime_(0){}
struct LogMailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMailsDefaultTypeInternal() {}
  union {
    LogMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMailsDefaultTypeInternal _LogMails_default_instance_;
PROTOBUF_CONSTEXPR WriteMailData::WriteMailData(
    ::_pbi::ConstantInitialized)
  : data_()
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , serverid_(0){}
struct WriteMailDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteMailDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteMailDataDefaultTypeInternal() {}
  union {
    WriteMailData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteMailDataDefaultTypeInternal _WriteMailData_default_instance_;
PROTOBUF_CONSTEXPR ReqSelectRepeatedName::ReqSelectRepeatedName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u}){}
struct ReqSelectRepeatedNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSelectRepeatedNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSelectRepeatedNameDefaultTypeInternal() {}
  union {
    ReqSelectRepeatedName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSelectRepeatedNameDefaultTypeInternal _ReqSelectRepeatedName_default_instance_;
PROTOBUF_CONSTEXPR ResSelectRepeatedName::ResSelectRepeatedName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , res_(0){}
struct ResSelectRepeatedNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResSelectRepeatedNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResSelectRepeatedNameDefaultTypeInternal() {}
  union {
    ResSelectRepeatedName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResSelectRepeatedNameDefaultTypeInternal _ResSelectRepeatedName_default_instance_;
PROTOBUF_CONSTEXPR ReqReturnNewName::ReqReturnNewName(
    ::_pbi::ConstantInitialized){}
struct ReqReturnNewNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqReturnNewNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqReturnNewNameDefaultTypeInternal() {}
  union {
    ReqReturnNewName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqReturnNewNameDefaultTypeInternal _ReqReturnNewName_default_instance_;
PROTOBUF_CONSTEXPR ResReturnNewName::ResReturnNewName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ResReturnNewNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnNewNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnNewNameDefaultTypeInternal() {}
  union {
    ResReturnNewName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnNewNameDefaultTypeInternal _ResReturnNewName_default_instance_;
static ::_pb::Metadata file_level_metadata_ServerCommon_2eproto[27];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ServerCommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ServerCommon_2eproto = nullptr;

const uint32_t TableStruct_ServerCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, account_),
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, password_),
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, pf_),
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbLoginAuth, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, account_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, gmlv_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, pf_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, fcmtime_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbLoginAuth, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, account_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, pf_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, sex_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, name_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, account_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, pf_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, serverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, sex_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, name_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, name_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, icon_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, account_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, pf_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, createtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, power_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, level_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, vip_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, exp_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, sessionid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, logintime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, guildid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, chargeval_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, headicon_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, title_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, skin_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, extra_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, logouttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BagData, guid_),
  PROTOBUF_FIELD_OFFSET(::BagData, itemid_),
  PROTOBUF_FIELD_OFFSET(::BagData, count_),
  PROTOBUF_FIELD_OFFSET(::BagData, time_),
  PROTOBUF_FIELD_OFFSET(::BagData, level_),
  PROTOBUF_FIELD_OFFSET(::BagData, exp_),
  PROTOBUF_FIELD_OFFSET(::BagData, owner_),
  PROTOBUF_FIELD_OFFSET(::BagData, star_),
  PROTOBUF_FIELD_OFFSET(::BagData, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, data_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBagData, pid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBagData, data_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBagData, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBagData, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, moduleid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, data_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBagData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBagData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, moduleid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, data_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSendGmToGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSendGmToGame, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqGameReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqGameReport, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqGameQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogItems, id_),
  PROTOBUF_FIELD_OFFSET(::LogItems, cnt_),
  PROTOBUF_FIELD_OFFSET(::LogItems, oldcnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteLogData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WriteLogData, pid_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, account_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, pf_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, desc_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, serverid_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, extra_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, name_),
  PROTOBUF_FIELD_OFFSET(::WriteLogData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LogMails, mailid_),
  PROTOBUF_FIELD_OFFSET(::LogMails, title_),
  PROTOBUF_FIELD_OFFSET(::LogMails, content_),
  PROTOBUF_FIELD_OFFSET(::LogMails, reward_),
  PROTOBUF_FIELD_OFFSET(::LogMails, desc_),
  PROTOBUF_FIELD_OFFSET(::LogMails, expiretime_),
  PROTOBUF_FIELD_OFFSET(::LogMails, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WriteMailData, pid_),
  PROTOBUF_FIELD_OFFSET(::WriteMailData, account_),
  PROTOBUF_FIELD_OFFSET(::WriteMailData, pf_),
  PROTOBUF_FIELD_OFFSET(::WriteMailData, serverid_),
  PROTOBUF_FIELD_OFFSET(::WriteMailData, name_),
  PROTOBUF_FIELD_OFFSET(::WriteMailData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSelectRepeatedName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSelectRepeatedName, name_),
  PROTOBUF_FIELD_OFFSET(::ReqSelectRepeatedName, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResSelectRepeatedName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResSelectRepeatedName, name_),
  PROTOBUF_FIELD_OFFSET(::ResSelectRepeatedName, res_),
  PROTOBUF_FIELD_OFFSET(::ResSelectRepeatedName, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqReturnNewName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnNewName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnNewName, name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ReqDbLoginAuth)},
  { 12, -1, -1, sizeof(::ResDbLoginAuth)},
  { 26, -1, -1, sizeof(::ReqDbSelectPlayer)},
  { 37, -1, -1, sizeof(::ResDbSelectPlayer)},
  { 47, -1, -1, sizeof(::ReqDbCreatePlayer)},
  { 62, -1, -1, sizeof(::ResDbCreatePlayer)},
  { 74, -1, -1, sizeof(::ReqDbEnterGame)},
  { 83, -1, -1, sizeof(::ResDbEnterGame)},
  { 93, -1, -1, sizeof(::PlayerBaseData)},
  { 119, -1, -1, sizeof(::BagData)},
  { 134, -1, -1, sizeof(::ResReturnPlayerBaseData)},
  { 144, -1, -1, sizeof(::ResReturnPlayerBagData)},
  { 154, -1, -1, sizeof(::ResReturnPlayerModuleData)},
  { 164, -1, -1, sizeof(::ReqSavePlayerBaseData)},
  { 172, -1, -1, sizeof(::ReqSavePlayerBagData)},
  { 180, -1, -1, sizeof(::ReqSavePlayerModuleData)},
  { 190, -1, -1, sizeof(::ReqSendGmToGame)},
  { 197, -1, -1, sizeof(::ReqGameReport)},
  { 204, -1, -1, sizeof(::ReqGameQuit)},
  { 210, -1, -1, sizeof(::LogItems)},
  { 219, -1, -1, sizeof(::WriteLogData)},
  { 233, -1, -1, sizeof(::LogMails)},
  { 246, -1, -1, sizeof(::WriteMailData)},
  { 258, -1, -1, sizeof(::ReqSelectRepeatedName)},
  { 266, -1, -1, sizeof(::ResSelectRepeatedName)},
  { 275, -1, -1, sizeof(::ReqReturnNewName)},
  { 281, -1, -1, sizeof(::ResReturnNewName)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ReqDbLoginAuth_default_instance_._instance,
  &::_ResDbLoginAuth_default_instance_._instance,
  &::_ReqDbSelectPlayer_default_instance_._instance,
  &::_ResDbSelectPlayer_default_instance_._instance,
  &::_ReqDbCreatePlayer_default_instance_._instance,
  &::_ResDbCreatePlayer_default_instance_._instance,
  &::_ReqDbEnterGame_default_instance_._instance,
  &::_ResDbEnterGame_default_instance_._instance,
  &::_PlayerBaseData_default_instance_._instance,
  &::_BagData_default_instance_._instance,
  &::_ResReturnPlayerBaseData_default_instance_._instance,
  &::_ResReturnPlayerBagData_default_instance_._instance,
  &::_ResReturnPlayerModuleData_default_instance_._instance,
  &::_ReqSavePlayerBaseData_default_instance_._instance,
  &::_ReqSavePlayerBagData_default_instance_._instance,
  &::_ReqSavePlayerModuleData_default_instance_._instance,
  &::_ReqSendGmToGame_default_instance_._instance,
  &::_ReqGameReport_default_instance_._instance,
  &::_ReqGameQuit_default_instance_._instance,
  &::_LogItems_default_instance_._instance,
  &::_WriteLogData_default_instance_._instance,
  &::_LogMails_default_instance_._instance,
  &::_WriteMailData_default_instance_._instance,
  &::_ReqSelectRepeatedName_default_instance_._instance,
  &::_ResSelectRepeatedName_default_instance_._instance,
  &::_ReqReturnNewName_default_instance_._instance,
  &::_ResReturnNewName_default_instance_._instance,
};

const char descriptor_table_protodef_ServerCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ServerCommon.proto\"|\n\016ReqDbLoginAuth\022\017"
  "\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\n\n\002pf\030"
  "\003 \001(\t\022\024\n\014fromServerId\030\004 \001(\021\022\022\n\ncsessionI"
  "d\030\005 \001(\004\022\021\n\tsessionId\030\006 \001(\004\"\227\001\n\016ResDbLogi"
  "nAuth\022\017\n\007account\030\001 \001(\t\022\014\n\004gmlv\030\002 \001(\021\022\n\n\002"
  "pf\030\003 \001(\t\022\017\n\007fcmTime\030\004 \001(\021\022\014\n\004code\030\005 \001(\021\022"
  "\024\n\014fromServerId\030\006 \001(\021\022\022\n\ncsessionId\030\007 \001("
  "\004\022\021\n\tsessionId\030\010 \001(\004\"m\n\021ReqDbSelectPlaye"
  "r\022\022\n\ncsessionId\030\001 \001(\004\022\024\n\014fromServerId\030\002 "
  "\001(\021\022\017\n\007account\030\003 \001(\t\022\n\n\002pf\030\004 \001(\t\022\021\n\tsess"
  "ionId\030\005 \001(\004\"U\n\021ResDbSelectPlayer\022\013\n\003pid\030"
  "\001 \001(\004\022\022\n\ncsessionId\030\002 \001(\004\022\014\n\004code\030\003 \001(\021\022"
  "\021\n\tsessionId\030\004 \001(\004\"\247\001\n\021ReqDbCreatePlayer"
  "\022\013\n\003sex\030\001 \001(\021\022\014\n\004name\030\002 \001(\014\022\013\n\003pid\030\003 \001(\004"
  "\022\022\n\ncsessionId\030\004 \001(\004\022\017\n\007account\030\005 \001(\t\022\n\n"
  "\002pf\030\006 \001(\t\022\024\n\014fromServerId\030\007 \001(\021\022\020\n\010serve"
  "rId\030\010 \001(\021\022\021\n\tsessionId\030\t \001(\004\"p\n\021ResDbCre"
  "atePlayer\022\013\n\003sex\030\001 \001(\021\022\014\n\004name\030\002 \001(\014\022\013\n\003"
  "pid\030\003 \001(\004\022\014\n\004code\030\004 \001(\021\022\022\n\ncsessionId\030\005 "
  "\001(\004\022\021\n\tsessionId\030\007 \001(\004\"D\n\016ReqDbEnterGame"
  "\022\013\n\003pid\030\001 \001(\004\022\022\n\ncsessionId\030\002 \001(\004\022\021\n\tses"
  "sionId\030\003 \001(\004\"R\n\016ResDbEnterGame\022\013\n\003pid\030\001 "
  "\001(\004\022\014\n\004code\030\002 \001(\021\022\022\n\ncsessionId\030\003 \001(\004\022\021\n"
  "\tsessionId\030\004 \001(\004\"\324\002\n\016PlayerBaseData\022\013\n\003p"
  "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\014\n\004icon\030\003 \001(\t\022\017\n\007"
  "account\030\004 \001(\t\022\n\n\002pf\030\005 \001(\t\022\022\n\ncreateTime\030"
  "\006 \001(\021\022\r\n\005power\030\007 \001(\004\022\r\n\005level\030\010 \001(\021\022\013\n\003v"
  "ip\030\t \001(\021\022\013\n\003exp\030\n \001(\021\022\021\n\tsessionId\030\013 \001(\004"
  "\022\021\n\tloginTime\030\014 \001(\021\022\017\n\007guildId\030\r \001(\004\022\021\n\t"
  "chargeVal\030\016 \001(\021\022\020\n\010headIcon\030\017 \001(\021\022\r\n\005tit"
  "le\030\020 \001(\021\022\014\n\004skin\030\021 \001(\021\022\r\n\005extra\030\022 \001(\014\022\024\n"
  "\014fromServerId\030\023 \001(\021\022\022\n\nlogoutTime\030\024 \001(\021\""
  "\213\001\n\007BagData\022\014\n\004guid\030\001 \001(\004\022\016\n\006itemId\030\002 \001("
  "\r\022\r\n\005count\030\003 \001(\004\022\014\n\004time\030\004 \001(\021\022\r\n\005level\030"
  "\005 \001(\021\022\013\n\003exp\030\006 \001(\021\022\r\n\005owner\030\007 \001(\004\022\014\n\004sta"
  "r\030\010 \001(\021\022\014\n\004step\030\t \001(\021\"l\n\027ResReturnPlayer"
  "BaseData\022\013\n\003pid\030\001 \001(\004\022\035\n\004data\030\002 \001(\0132\017.Pl"
  "ayerBaseData\022\022\n\ncsessionId\030\003 \001(\004\022\021\n\tsess"
  "ionId\030\004 \001(\004\"d\n\026ResReturnPlayerBagData\022\013\n"
  "\003pid\030\001 \001(\004\022\026\n\004data\030\002 \003(\0132\010.BagData\022\022\n\ncs"
  "essionId\030\003 \001(\004\022\021\n\tsessionId\030\004 \001(\004\"b\n\031Res"
  "ReturnPlayerModuleData\022\020\n\010moduleId\030\001 \001(\021"
  "\022\014\n\004data\030\002 \001(\014\022\022\n\ncsessionId\030\003 \001(\004\022\021\n\tse"
  "ssionId\030\004 \001(\004\"C\n\025ReqSavePlayerBaseData\022\013"
  "\n\003pid\030\001 \001(\004\022\035\n\004data\030\002 \001(\0132\017.PlayerBaseDa"
  "ta\";\n\024ReqSavePlayerBagData\022\013\n\003pid\030\001 \001(\004\022"
  "\026\n\004data\030\002 \003(\0132\010.BagData\"X\n\027ReqSavePlayer"
  "ModuleData\022\013\n\003pid\030\001 \001(\004\022\020\n\010moduleId\030\002 \001("
  "\021\022\014\n\004data\030\003 \001(\014\022\020\n\010serverId\030\004 \001(\021\"\036\n\017Req"
  "SendGmToGame\022\013\n\003cmd\030\001 \001(\t\"!\n\rReqGameRepo"
  "rt\022\020\n\010serverId\030\001 \001(\021\"\r\n\013ReqGameQuit\"3\n\010L"
  "ogItems\022\n\n\002id\030\001 \001(\021\022\013\n\003cnt\030\002 \001(\004\022\016\n\006oldC"
  "nt\030\003 \001(\004\"\216\001\n\014WriteLogData\022\013\n\003pid\030\001 \001(\004\022\017"
  "\n\007account\030\002 \001(\t\022\n\n\002pf\030\003 \001(\t\022\014\n\004desc\030\004 \001("
  "\014\022\020\n\010serverId\030\005 \001(\021\022\r\n\005extra\030\006 \001(\014\022\014\n\004na"
  "me\030\007 \001(\014\022\027\n\004data\030\010 \003(\0132\t.LogItems\"{\n\010Log"
  "Mails\022\016\n\006mailId\030\001 \001(\004\022\r\n\005title\030\002 \001(\014\022\017\n\007"
  "content\030\003 \001(\014\022\016\n\006reward\030\004 \001(\t\022\014\n\004desc\030\005 "
  "\001(\014\022\022\n\nexpireTime\030\006 \001(\021\022\r\n\005extra\030\007 \001(\014\"r"
  "\n\rWriteMailData\022\013\n\003pid\030\001 \001(\004\022\017\n\007account\030"
  "\002 \001(\t\022\n\n\002pf\030\003 \001(\t\022\020\n\010serverId\030\004 \001(\021\022\014\n\004n"
  "ame\030\005 \001(\014\022\027\n\004data\030\006 \003(\0132\t.LogMails\"2\n\025Re"
  "qSelectRepeatedName\022\014\n\004name\030\001 \001(\t\022\013\n\003pid"
  "\030\002 \001(\004\"\?\n\025ResSelectRepeatedName\022\014\n\004name\030"
  "\001 \001(\t\022\013\n\003res\030\002 \001(\005\022\013\n\003pid\030\003 \001(\004\"\022\n\020ReqRe"
  "turnNewName\" \n\020ResReturnNewName\022\014\n\004name\030"
  "\001 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ServerCommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ServerCommon_2eproto = {
    false, false, 2653, descriptor_table_protodef_ServerCommon_2eproto,
    "ServerCommon.proto",
    &descriptor_table_ServerCommon_2eproto_once, nullptr, 0, 27,
    schemas, file_default_instances, TableStruct_ServerCommon_2eproto::offsets,
    file_level_metadata_ServerCommon_2eproto, file_level_enum_descriptors_ServerCommon_2eproto,
    file_level_service_descriptors_ServerCommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ServerCommon_2eproto_getter() {
  return &descriptor_table_ServerCommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ServerCommon_2eproto(&descriptor_table_ServerCommon_2eproto);

// ===================================================================

class ReqDbLoginAuth::_Internal {
 public:
};

ReqDbLoginAuth::ReqDbLoginAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbLoginAuth)
}
ReqDbLoginAuth::ReqDbLoginAuth(const ReqDbLoginAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(from._internal_password(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&csessionid_, &from.csessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbLoginAuth)
}

inline void ReqDbLoginAuth::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&csessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
}

ReqDbLoginAuth::~ReqDbLoginAuth() {
  // @@protoc_insertion_point(destructor:ReqDbLoginAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbLoginAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  password_.Destroy();
  pf_.Destroy();
}

void ReqDbLoginAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbLoginAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbLoginAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&csessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserverid_) -
      reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbLoginAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbLoginAuth.account"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbLoginAuth.password"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbLoginAuth.pf"));
        } else
          goto handle_unusual;
        continue;
      // sint32 fromServerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbLoginAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbLoginAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbLoginAuth.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbLoginAuth.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbLoginAuth.pf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pf(), target);
  }

  // sint32 fromServerId = 4;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_fromserverid(), target);
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 6;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbLoginAuth)
  return target;
}

size_t ReqDbLoginAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbLoginAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 6;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 fromServerId = 4;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fromserverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbLoginAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbLoginAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbLoginAuth::GetClassData() const { return &_class_data_; }

void ReqDbLoginAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbLoginAuth *>(to)->MergeFrom(
      static_cast<const ReqDbLoginAuth &>(from));
}


void ReqDbLoginAuth::MergeFrom(const ReqDbLoginAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbLoginAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbLoginAuth::CopyFrom(const ReqDbLoginAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbLoginAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbLoginAuth::IsInitialized() const {
  return true;
}

void ReqDbLoginAuth::InternalSwap(ReqDbLoginAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbLoginAuth, fromserverid_)
      + sizeof(ReqDbLoginAuth::fromserverid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbLoginAuth, csessionid_)>(
          reinterpret_cast<char*>(&csessionid_),
          reinterpret_cast<char*>(&other->csessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbLoginAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[0]);
}

// ===================================================================

class ResDbLoginAuth::_Internal {
 public:
};

ResDbLoginAuth::ResDbLoginAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbLoginAuth)
}
ResDbLoginAuth::ResDbLoginAuth(const ResDbLoginAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gmlv_, &from.gmlv_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&gmlv_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResDbLoginAuth)
}

inline void ResDbLoginAuth::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gmlv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&gmlv_)) + sizeof(sessionid_));
}

ResDbLoginAuth::~ResDbLoginAuth() {
  // @@protoc_insertion_point(destructor:ResDbLoginAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbLoginAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  pf_.Destroy();
}

void ResDbLoginAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbLoginAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbLoginAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&gmlv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&gmlv_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbLoginAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResDbLoginAuth.account"));
        } else
          goto handle_unusual;
        continue;
      // sint32 gmlv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gmlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResDbLoginAuth.pf"));
        } else
          goto handle_unusual;
        continue;
      // sint32 fcmTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          fcmtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fromServerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbLoginAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbLoginAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResDbLoginAuth.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // sint32 gmlv = 2;
  if (this->_internal_gmlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_gmlv(), target);
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResDbLoginAuth.pf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pf(), target);
  }

  // sint32 fcmTime = 4;
  if (this->_internal_fcmtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_fcmtime(), target);
  }

  // sint32 code = 5;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_code(), target);
  }

  // sint32 fromServerId = 6;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_fromserverid(), target);
  }

  // uint64 csessionId = 7;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 8;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbLoginAuth)
  return target;
}

size_t ResDbLoginAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbLoginAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // sint32 gmlv = 2;
  if (this->_internal_gmlv() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_gmlv());
  }

  // sint32 fcmTime = 4;
  if (this->_internal_fcmtime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fcmtime());
  }

  // sint32 code = 5;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }

  // sint32 fromServerId = 6;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fromserverid());
  }

  // uint64 csessionId = 7;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 8;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbLoginAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbLoginAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbLoginAuth::GetClassData() const { return &_class_data_; }

void ResDbLoginAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbLoginAuth *>(to)->MergeFrom(
      static_cast<const ResDbLoginAuth &>(from));
}


void ResDbLoginAuth::MergeFrom(const ResDbLoginAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbLoginAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_gmlv() != 0) {
    _internal_set_gmlv(from._internal_gmlv());
  }
  if (from._internal_fcmtime() != 0) {
    _internal_set_fcmtime(from._internal_fcmtime());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbLoginAuth::CopyFrom(const ResDbLoginAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbLoginAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbLoginAuth::IsInitialized() const {
  return true;
}

void ResDbLoginAuth::InternalSwap(ResDbLoginAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbLoginAuth, sessionid_)
      + sizeof(ResDbLoginAuth::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResDbLoginAuth, gmlv_)>(
          reinterpret_cast<char*>(&gmlv_),
          reinterpret_cast<char*>(&other->gmlv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbLoginAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[1]);
}

// ===================================================================

class ReqDbSelectPlayer::_Internal {
 public:
};

ReqDbSelectPlayer::ReqDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbSelectPlayer)
}
ReqDbSelectPlayer::ReqDbSelectPlayer(const ReqDbSelectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&csessionid_, &from.csessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbSelectPlayer)
}

inline void ReqDbSelectPlayer::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&csessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
}

ReqDbSelectPlayer::~ReqDbSelectPlayer() {
  // @@protoc_insertion_point(destructor:ReqDbSelectPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbSelectPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  pf_.Destroy();
}

void ReqDbSelectPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbSelectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&csessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserverid_) -
      reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbSelectPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 csessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fromServerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbSelectPlayer.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbSelectPlayer.pf"));
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbSelectPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 csessionId = 1;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_csessionid(), target);
  }

  // sint32 fromServerId = 2;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_fromserverid(), target);
  }

  // string account = 3;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbSelectPlayer.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  // string pf = 4;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbSelectPlayer.pf");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pf(), target);
  }

  // uint64 sessionId = 5;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbSelectPlayer)
  return target;
}

size_t ReqDbSelectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbSelectPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 4;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // uint64 csessionId = 1;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 5;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 fromServerId = 2;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fromserverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbSelectPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbSelectPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbSelectPlayer::GetClassData() const { return &_class_data_; }

void ReqDbSelectPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbSelectPlayer *>(to)->MergeFrom(
      static_cast<const ReqDbSelectPlayer &>(from));
}


void ReqDbSelectPlayer::MergeFrom(const ReqDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbSelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbSelectPlayer::CopyFrom(const ReqDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbSelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbSelectPlayer::IsInitialized() const {
  return true;
}

void ReqDbSelectPlayer::InternalSwap(ReqDbSelectPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbSelectPlayer, fromserverid_)
      + sizeof(ReqDbSelectPlayer::fromserverid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbSelectPlayer, csessionid_)>(
          reinterpret_cast<char*>(&csessionid_),
          reinterpret_cast<char*>(&other->csessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbSelectPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[2]);
}

// ===================================================================

class ResDbSelectPlayer::_Internal {
 public:
};

ResDbSelectPlayer::ResDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbSelectPlayer)
}
ResDbSelectPlayer::ResDbSelectPlayer(const ResDbSelectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:ResDbSelectPlayer)
}

inline void ResDbSelectPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
}

ResDbSelectPlayer::~ResDbSelectPlayer() {
  // @@protoc_insertion_point(destructor:ResDbSelectPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbSelectPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResDbSelectPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbSelectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbSelectPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbSelectPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_csessionid(), target);
  }

  // sint32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_code(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbSelectPlayer)
  return target;
}

size_t ResDbSelectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbSelectPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbSelectPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbSelectPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbSelectPlayer::GetClassData() const { return &_class_data_; }

void ResDbSelectPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbSelectPlayer *>(to)->MergeFrom(
      static_cast<const ResDbSelectPlayer &>(from));
}


void ResDbSelectPlayer::MergeFrom(const ResDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbSelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbSelectPlayer::CopyFrom(const ResDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbSelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbSelectPlayer::IsInitialized() const {
  return true;
}

void ResDbSelectPlayer::InternalSwap(ResDbSelectPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbSelectPlayer, code_)
      + sizeof(ResDbSelectPlayer::code_)
      - PROTOBUF_FIELD_OFFSET(ResDbSelectPlayer, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbSelectPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[3]);
}

// ===================================================================

class ReqDbCreatePlayer::_Internal {
 public:
};

ReqDbCreatePlayer::ReqDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbCreatePlayer)
}
ReqDbCreatePlayer::ReqDbCreatePlayer(const ReqDbCreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbCreatePlayer)
}

inline void ReqDbCreatePlayer::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

ReqDbCreatePlayer::~ReqDbCreatePlayer() {
  // @@protoc_insertion_point(destructor:ReqDbCreatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbCreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  account_.Destroy();
  pf_.Destroy();
}

void ReqDbCreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbCreatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbCreatePlayer.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbCreatePlayer.pf"));
        } else
          goto handle_unusual;
        continue;
      // sint32 fromServerId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serverId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbCreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 sex = 1;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_sex(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pid(), target);
  }

  // uint64 csessionId = 4;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_csessionid(), target);
  }

  // string account = 5;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbCreatePlayer.account");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_account(), target);
  }

  // string pf = 6;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbCreatePlayer.pf");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pf(), target);
  }

  // sint32 fromServerId = 7;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_fromserverid(), target);
  }

  // sint32 serverId = 8;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_serverid(), target);
  }

  // uint64 sessionId = 9;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbCreatePlayer)
  return target;
}

size_t ReqDbCreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbCreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string account = 5;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 6;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 4;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // sint32 sex = 1;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sex());
  }

  // sint32 fromServerId = 7;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_fromserverid());
  }

  // uint64 sessionId = 9;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 serverId = 8;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbCreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbCreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbCreatePlayer::GetClassData() const { return &_class_data_; }

void ReqDbCreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbCreatePlayer *>(to)->MergeFrom(
      static_cast<const ReqDbCreatePlayer &>(from));
}


void ReqDbCreatePlayer::MergeFrom(const ReqDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbCreatePlayer::CopyFrom(const ReqDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbCreatePlayer::IsInitialized() const {
  return true;
}

void ReqDbCreatePlayer::InternalSwap(ReqDbCreatePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbCreatePlayer, serverid_)
      + sizeof(ReqDbCreatePlayer::serverid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbCreatePlayer, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbCreatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[4]);
}

// ===================================================================

class ResDbCreatePlayer::_Internal {
 public:
};

ResDbCreatePlayer::ResDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbCreatePlayer)
}
ResDbCreatePlayer::ResDbCreatePlayer(const ResDbCreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sex_, &from.sex_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResDbCreatePlayer)
}

inline void ResDbCreatePlayer::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
}

ResDbCreatePlayer::~ResDbCreatePlayer() {
  // @@protoc_insertion_point(destructor:ResDbCreatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbCreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResDbCreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&sex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbCreatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbCreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 sex = 1;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_sex(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pid(), target);
  }

  // sint32 code = 4;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_code(), target);
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 7;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbCreatePlayer)
  return target;
}

size_t ResDbCreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbCreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // sint32 sex = 1;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sex());
  }

  // sint32 code = 4;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 7;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbCreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbCreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbCreatePlayer::GetClassData() const { return &_class_data_; }

void ResDbCreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbCreatePlayer *>(to)->MergeFrom(
      static_cast<const ResDbCreatePlayer &>(from));
}


void ResDbCreatePlayer::MergeFrom(const ResDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbCreatePlayer::CopyFrom(const ResDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbCreatePlayer::IsInitialized() const {
  return true;
}

void ResDbCreatePlayer::InternalSwap(ResDbCreatePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbCreatePlayer, sessionid_)
      + sizeof(ResDbCreatePlayer::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResDbCreatePlayer, sex_)>(
          reinterpret_cast<char*>(&sex_),
          reinterpret_cast<char*>(&other->sex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbCreatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[5]);
}

// ===================================================================

class ReqDbEnterGame::_Internal {
 public:
};

ReqDbEnterGame::ReqDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbEnterGame)
}
ReqDbEnterGame::ReqDbEnterGame(const ReqDbEnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbEnterGame)
}

inline void ReqDbEnterGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
}

ReqDbEnterGame::~ReqDbEnterGame() {
  // @@protoc_insertion_point(destructor:ReqDbEnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbEnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqDbEnterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbEnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbEnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbEnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbEnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbEnterGame)
  return target;
}

size_t ReqDbEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbEnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbEnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbEnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbEnterGame::GetClassData() const { return &_class_data_; }

void ReqDbEnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbEnterGame *>(to)->MergeFrom(
      static_cast<const ReqDbEnterGame &>(from));
}


void ReqDbEnterGame::MergeFrom(const ReqDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbEnterGame::CopyFrom(const ReqDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbEnterGame::IsInitialized() const {
  return true;
}

void ReqDbEnterGame::InternalSwap(ReqDbEnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbEnterGame, sessionid_)
      + sizeof(ReqDbEnterGame::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbEnterGame, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbEnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[6]);
}

// ===================================================================

class ResDbEnterGame::_Internal {
 public:
};

ResDbEnterGame::ResDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbEnterGame)
}
ResDbEnterGame::ResDbEnterGame(const ResDbEnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:ResDbEnterGame)
}

inline void ResDbEnterGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
}

ResDbEnterGame::~ResDbEnterGame() {
  // @@protoc_insertion_point(destructor:ResDbEnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbEnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResDbEnterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbEnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbEnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbEnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbEnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // sint32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_code(), target);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbEnterGame)
  return target;
}

size_t ResDbEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbEnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbEnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbEnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbEnterGame::GetClassData() const { return &_class_data_; }

void ResDbEnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbEnterGame *>(to)->MergeFrom(
      static_cast<const ResDbEnterGame &>(from));
}


void ResDbEnterGame::MergeFrom(const ResDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbEnterGame::CopyFrom(const ResDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbEnterGame::IsInitialized() const {
  return true;
}

void ResDbEnterGame::InternalSwap(ResDbEnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbEnterGame, code_)
      + sizeof(ResDbEnterGame::code_)
      - PROTOBUF_FIELD_OFFSET(ResDbEnterGame, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbEnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[7]);
}

// ===================================================================

class PlayerBaseData::_Internal {
 public:
};

PlayerBaseData::PlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerBaseData)
}
PlayerBaseData::PlayerBaseData(const PlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logouttime_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(logouttime_));
  // @@protoc_insertion_point(copy_constructor:PlayerBaseData)
}

inline void PlayerBaseData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logouttime_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(logouttime_));
}

PlayerBaseData::~PlayerBaseData() {
  // @@protoc_insertion_point(destructor:PlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_.Destroy();
  account_.Destroy();
  pf_.Destroy();
  extra_.Destroy();
}

void PlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  icon_.ClearToEmpty();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  extra_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logouttime_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(logouttime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.icon"));
        } else
          goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.pf"));
        } else
          goto handle_unusual;
        continue;
      // sint32 createTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 vip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 exp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 loginTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guildId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 chargeVal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          chargeval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 headIcon = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 title = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 skin = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 fromServerId = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 logoutTime = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string pf = 5;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.pf");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pf(), target);
  }

  // sint32 createTime = 6;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_createtime(), target);
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_power(), target);
  }

  // sint32 level = 8;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_level(), target);
  }

  // sint32 vip = 9;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_vip(), target);
  }

  // sint32 exp = 10;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(10, this->_internal_exp(), target);
  }

  // uint64 sessionId = 11;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_sessionid(), target);
  }

  // sint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_logintime(), target);
  }

  // uint64 guildId = 13;
  if (this->_internal_guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_guildid(), target);
  }

  // sint32 chargeVal = 14;
  if (this->_internal_chargeval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(14, this->_internal_chargeval(), target);
  }

  // sint32 headIcon = 15;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(15, this->_internal_headicon(), target);
  }

  // sint32 title = 16;
  if (this->_internal_title() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(16, this->_internal_title(), target);
  }

  // sint32 skin = 17;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(17, this->_internal_skin(), target);
  }

  // bytes extra = 18;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_extra(), target);
  }

  // sint32 fromServerId = 19;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(19, this->_internal_fromserverid(), target);
  }

  // sint32 logoutTime = 20;
  if (this->_internal_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(20, this->_internal_logouttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerBaseData)
  return target;
}

size_t PlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 5;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // bytes extra = 18;
  if (!this->_internal_extra().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_power());
  }

  // sint32 createTime = 6;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_createtime());
  }

  // sint32 level = 8;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_level());
  }

  // sint32 vip = 9;
  if (this->_internal_vip() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_vip());
  }

  // sint32 exp = 10;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_exp());
  }

  // uint64 sessionId = 11;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint64 guildId = 13;
  if (this->_internal_guildid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guildid());
  }

  // sint32 loginTime = 12;
  if (this->_internal_logintime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_logintime());
  }

  // sint32 chargeVal = 14;
  if (this->_internal_chargeval() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_chargeval());
  }

  // sint32 headIcon = 15;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_headicon());
  }

  // sint32 title = 16;
  if (this->_internal_title() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_title());
  }

  // sint32 skin = 17;
  if (this->_internal_skin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_skin());
  }

  // sint32 fromServerId = 19;
  if (this->_internal_fromserverid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_fromserverid());
  }

  // sint32 logoutTime = 20;
  if (this->_internal_logouttime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_logouttime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerBaseData::GetClassData() const { return &_class_data_; }

void PlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerBaseData *>(to)->MergeFrom(
      static_cast<const PlayerBaseData &>(from));
}


void PlayerBaseData::MergeFrom(const PlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from._internal_createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from._internal_logintime() != 0) {
    _internal_set_logintime(from._internal_logintime());
  }
  if (from._internal_chargeval() != 0) {
    _internal_set_chargeval(from._internal_chargeval());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_title() != 0) {
    _internal_set_title(from._internal_title());
  }
  if (from._internal_skin() != 0) {
    _internal_set_skin(from._internal_skin());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  if (from._internal_logouttime() != 0) {
    _internal_set_logouttime(from._internal_logouttime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerBaseData::CopyFrom(const PlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseData::IsInitialized() const {
  return true;
}

void PlayerBaseData::InternalSwap(PlayerBaseData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerBaseData, logouttime_)
      + sizeof(PlayerBaseData::logouttime_)
      - PROTOBUF_FIELD_OFFSET(PlayerBaseData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[8]);
}

// ===================================================================

class BagData::_Internal {
 public:
};

BagData::BagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:BagData)
}
BagData::BagData(const BagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:BagData)
}

inline void BagData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(step_));
}

BagData::~BagData() {
  // @@protoc_insertion_point(destructor:BagData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BagData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BagData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BagData::Clear() {
// @@protoc_insertion_point(message_clear_start:BagData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BagData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 exp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 star = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BagData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BagData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guid(), target);
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemid(), target);
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  // sint32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_time(), target);
  }

  // sint32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_level(), target);
  }

  // sint32 exp = 6;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_exp(), target);
  }

  // uint64 owner = 7;
  if (this->_internal_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_owner(), target);
  }

  // sint32 star = 8;
  if (this->_internal_star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_star(), target);
  }

  // sint32 step = 9;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BagData)
  return target;
}

size_t BagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BagData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->_internal_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
  }

  // uint64 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  // sint32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_time());
  }

  // sint32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_level());
  }

  // sint32 exp = 6;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_exp());
  }

  // uint64 owner = 7;
  if (this->_internal_owner() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_owner());
  }

  // sint32 star = 8;
  if (this->_internal_star() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_star());
  }

  // sint32 step = 9;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BagData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BagData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BagData::GetClassData() const { return &_class_data_; }

void BagData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BagData *>(to)->MergeFrom(
      static_cast<const BagData &>(from));
}


void BagData::MergeFrom(const BagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BagData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_itemid() != 0) {
    _internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BagData::CopyFrom(const BagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagData::IsInitialized() const {
  return true;
}

void BagData::InternalSwap(BagData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BagData, step_)
      + sizeof(BagData::step_)
      - PROTOBUF_FIELD_OFFSET(BagData, guid_)>(
          reinterpret_cast<char*>(&guid_),
          reinterpret_cast<char*>(&other->guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BagData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[9]);
}

// ===================================================================

class ResReturnPlayerBaseData::_Internal {
 public:
  static const ::PlayerBaseData& data(const ResReturnPlayerBaseData* msg);
};

const ::PlayerBaseData&
ResReturnPlayerBaseData::_Internal::data(const ResReturnPlayerBaseData* msg) {
  return *msg->data_;
}
ResReturnPlayerBaseData::ResReturnPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnPlayerBaseData)
}
ResReturnPlayerBaseData::ResReturnPlayerBaseData(const ResReturnPlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerBaseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResReturnPlayerBaseData)
}

inline void ResReturnPlayerBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&data_)) + sizeof(sessionid_));
}

ResReturnPlayerBaseData::~ResReturnPlayerBaseData() {
  // @@protoc_insertion_point(destructor:ResReturnPlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnPlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ResReturnPlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnPlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnPlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnPlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlayerBaseData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnPlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnPlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnPlayerBaseData)
  return target;
}

size_t ResReturnPlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnPlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnPlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnPlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnPlayerBaseData::GetClassData() const { return &_class_data_; }

void ResReturnPlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnPlayerBaseData *>(to)->MergeFrom(
      static_cast<const ResReturnPlayerBaseData &>(from));
}


void ResReturnPlayerBaseData::MergeFrom(const ResReturnPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnPlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerBaseData::MergeFrom(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnPlayerBaseData::CopyFrom(const ResReturnPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnPlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnPlayerBaseData::IsInitialized() const {
  return true;
}

void ResReturnPlayerBaseData::InternalSwap(ResReturnPlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResReturnPlayerBaseData, sessionid_)
      + sizeof(ResReturnPlayerBaseData::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResReturnPlayerBaseData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnPlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[10]);
}

// ===================================================================

class ResReturnPlayerBagData::_Internal {
 public:
};

ResReturnPlayerBagData::ResReturnPlayerBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnPlayerBagData)
}
ResReturnPlayerBagData::ResReturnPlayerBagData(const ResReturnPlayerBagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResReturnPlayerBagData)
}

inline void ResReturnPlayerBagData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
}

ResReturnPlayerBagData::~ResReturnPlayerBagData() {
  // @@protoc_insertion_point(destructor:ResReturnPlayerBagData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnPlayerBagData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResReturnPlayerBagData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnPlayerBagData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnPlayerBagData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnPlayerBagData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .BagData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnPlayerBagData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnPlayerBagData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // repeated .BagData data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnPlayerBagData)
  return target;
}

size_t ResReturnPlayerBagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnPlayerBagData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BagData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnPlayerBagData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnPlayerBagData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnPlayerBagData::GetClassData() const { return &_class_data_; }

void ResReturnPlayerBagData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnPlayerBagData *>(to)->MergeFrom(
      static_cast<const ResReturnPlayerBagData &>(from));
}


void ResReturnPlayerBagData::MergeFrom(const ResReturnPlayerBagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnPlayerBagData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnPlayerBagData::CopyFrom(const ResReturnPlayerBagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnPlayerBagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnPlayerBagData::IsInitialized() const {
  return true;
}

void ResReturnPlayerBagData::InternalSwap(ResReturnPlayerBagData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResReturnPlayerBagData, sessionid_)
      + sizeof(ResReturnPlayerBagData::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResReturnPlayerBagData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnPlayerBagData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[11]);
}

// ===================================================================

class ResReturnPlayerModuleData::_Internal {
 public:
};

ResReturnPlayerModuleData::ResReturnPlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnPlayerModuleData)
}
ResReturnPlayerModuleData::ResReturnPlayerModuleData(const ResReturnPlayerModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&csessionid_, &from.csessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
  // @@protoc_insertion_point(copy_constructor:ResReturnPlayerModuleData)
}

inline void ResReturnPlayerModuleData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&csessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
}

ResReturnPlayerModuleData::~ResReturnPlayerModuleData() {
  // @@protoc_insertion_point(destructor:ResReturnPlayerModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnPlayerModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ResReturnPlayerModuleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnPlayerModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnPlayerModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&csessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moduleid_) -
      reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnPlayerModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 moduleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnPlayerModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnPlayerModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_moduleid(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnPlayerModuleData)
  return target;
}

size_t ResReturnPlayerModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnPlayerModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // sint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_moduleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnPlayerModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnPlayerModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnPlayerModuleData::GetClassData() const { return &_class_data_; }

void ResReturnPlayerModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnPlayerModuleData *>(to)->MergeFrom(
      static_cast<const ResReturnPlayerModuleData &>(from));
}


void ResReturnPlayerModuleData::MergeFrom(const ResReturnPlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnPlayerModuleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnPlayerModuleData::CopyFrom(const ResReturnPlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnPlayerModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnPlayerModuleData::IsInitialized() const {
  return true;
}

void ResReturnPlayerModuleData::InternalSwap(ResReturnPlayerModuleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResReturnPlayerModuleData, moduleid_)
      + sizeof(ResReturnPlayerModuleData::moduleid_)
      - PROTOBUF_FIELD_OFFSET(ResReturnPlayerModuleData, csessionid_)>(
          reinterpret_cast<char*>(&csessionid_),
          reinterpret_cast<char*>(&other->csessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnPlayerModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[12]);
}

// ===================================================================

class ReqSavePlayerBaseData::_Internal {
 public:
  static const ::PlayerBaseData& data(const ReqSavePlayerBaseData* msg);
};

const ::PlayerBaseData&
ReqSavePlayerBaseData::_Internal::data(const ReqSavePlayerBaseData* msg) {
  return *msg->data_;
}
ReqSavePlayerBaseData::ReqSavePlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSavePlayerBaseData)
}
ReqSavePlayerBaseData::ReqSavePlayerBaseData(const ReqSavePlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerBaseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ReqSavePlayerBaseData)
}

inline void ReqSavePlayerBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&data_)) + sizeof(pid_));
}

ReqSavePlayerBaseData::~ReqSavePlayerBaseData() {
  // @@protoc_insertion_point(destructor:ReqSavePlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSavePlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ReqSavePlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSavePlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSavePlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSavePlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlayerBaseData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSavePlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSavePlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSavePlayerBaseData)
  return target;
}

size_t ReqSavePlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSavePlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSavePlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSavePlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSavePlayerBaseData::GetClassData() const { return &_class_data_; }

void ReqSavePlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSavePlayerBaseData *>(to)->MergeFrom(
      static_cast<const ReqSavePlayerBaseData &>(from));
}


void ReqSavePlayerBaseData::MergeFrom(const ReqSavePlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSavePlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerBaseData::MergeFrom(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSavePlayerBaseData::CopyFrom(const ReqSavePlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSavePlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSavePlayerBaseData::IsInitialized() const {
  return true;
}

void ReqSavePlayerBaseData::InternalSwap(ReqSavePlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSavePlayerBaseData, pid_)
      + sizeof(ReqSavePlayerBaseData::pid_)
      - PROTOBUF_FIELD_OFFSET(ReqSavePlayerBaseData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSavePlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[13]);
}

// ===================================================================

class ReqSavePlayerBagData::_Internal {
 public:
};

ReqSavePlayerBagData::ReqSavePlayerBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSavePlayerBagData)
}
ReqSavePlayerBagData::ReqSavePlayerBagData(const ReqSavePlayerBagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ReqSavePlayerBagData)
}

inline void ReqSavePlayerBagData::SharedCtor() {
pid_ = uint64_t{0u};
}

ReqSavePlayerBagData::~ReqSavePlayerBagData() {
  // @@protoc_insertion_point(destructor:ReqSavePlayerBagData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSavePlayerBagData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqSavePlayerBagData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSavePlayerBagData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSavePlayerBagData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSavePlayerBagData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .BagData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSavePlayerBagData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSavePlayerBagData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // repeated .BagData data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSavePlayerBagData)
  return target;
}

size_t ReqSavePlayerBagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSavePlayerBagData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BagData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSavePlayerBagData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSavePlayerBagData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSavePlayerBagData::GetClassData() const { return &_class_data_; }

void ReqSavePlayerBagData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSavePlayerBagData *>(to)->MergeFrom(
      static_cast<const ReqSavePlayerBagData &>(from));
}


void ReqSavePlayerBagData::MergeFrom(const ReqSavePlayerBagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSavePlayerBagData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSavePlayerBagData::CopyFrom(const ReqSavePlayerBagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSavePlayerBagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSavePlayerBagData::IsInitialized() const {
  return true;
}

void ReqSavePlayerBagData::InternalSwap(ReqSavePlayerBagData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSavePlayerBagData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[14]);
}

// ===================================================================

class ReqSavePlayerModuleData::_Internal {
 public:
};

ReqSavePlayerModuleData::ReqSavePlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSavePlayerModuleData)
}
ReqSavePlayerModuleData::ReqSavePlayerModuleData(const ReqSavePlayerModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ReqSavePlayerModuleData)
}

inline void ReqSavePlayerModuleData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

ReqSavePlayerModuleData::~ReqSavePlayerModuleData() {
  // @@protoc_insertion_point(destructor:ReqSavePlayerModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSavePlayerModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ReqSavePlayerModuleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSavePlayerModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSavePlayerModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSavePlayerModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 moduleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSavePlayerModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSavePlayerModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // sint32 moduleId = 2;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_moduleid(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // sint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSavePlayerModuleData)
  return target;
}

size_t ReqSavePlayerModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSavePlayerModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // sint32 moduleId = 2;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_moduleid());
  }

  // sint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSavePlayerModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSavePlayerModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSavePlayerModuleData::GetClassData() const { return &_class_data_; }

void ReqSavePlayerModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSavePlayerModuleData *>(to)->MergeFrom(
      static_cast<const ReqSavePlayerModuleData &>(from));
}


void ReqSavePlayerModuleData::MergeFrom(const ReqSavePlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSavePlayerModuleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSavePlayerModuleData::CopyFrom(const ReqSavePlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSavePlayerModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSavePlayerModuleData::IsInitialized() const {
  return true;
}

void ReqSavePlayerModuleData::InternalSwap(ReqSavePlayerModuleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSavePlayerModuleData, serverid_)
      + sizeof(ReqSavePlayerModuleData::serverid_)
      - PROTOBUF_FIELD_OFFSET(ReqSavePlayerModuleData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSavePlayerModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[15]);
}

// ===================================================================

class ReqSendGmToGame::_Internal {
 public:
};

ReqSendGmToGame::ReqSendGmToGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSendGmToGame)
}
ReqSendGmToGame::ReqSendGmToGame(const ReqSendGmToGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd().empty()) {
    cmd_.Set(from._internal_cmd(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ReqSendGmToGame)
}

inline void ReqSendGmToGame::SharedCtor() {
cmd_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cmd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqSendGmToGame::~ReqSendGmToGame() {
  // @@protoc_insertion_point(destructor:ReqSendGmToGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSendGmToGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cmd_.Destroy();
}

void ReqSendGmToGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSendGmToGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSendGmToGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSendGmToGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSendGmToGame.cmd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSendGmToGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSendGmToGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (!this->_internal_cmd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSendGmToGame.cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSendGmToGame)
  return target;
}

size_t ReqSendGmToGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSendGmToGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSendGmToGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSendGmToGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSendGmToGame::GetClassData() const { return &_class_data_; }

void ReqSendGmToGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSendGmToGame *>(to)->MergeFrom(
      static_cast<const ReqSendGmToGame &>(from));
}


void ReqSendGmToGame::MergeFrom(const ReqSendGmToGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSendGmToGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd().empty()) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSendGmToGame::CopyFrom(const ReqSendGmToGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSendGmToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendGmToGame::IsInitialized() const {
  return true;
}

void ReqSendGmToGame::InternalSwap(ReqSendGmToGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cmd_, lhs_arena,
      &other->cmd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSendGmToGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[16]);
}

// ===================================================================

class ReqGameReport::_Internal {
 public:
};

ReqGameReport::ReqGameReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqGameReport)
}
ReqGameReport::ReqGameReport(const ReqGameReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:ReqGameReport)
}

inline void ReqGameReport::SharedCtor() {
serverid_ = 0;
}

ReqGameReport::~ReqGameReport() {
  // @@protoc_insertion_point(destructor:ReqGameReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqGameReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGameReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGameReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqGameReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGameReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGameReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqGameReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqGameReport)
  return target;
}

size_t ReqGameReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqGameReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGameReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGameReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGameReport::GetClassData() const { return &_class_data_; }

void ReqGameReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGameReport *>(to)->MergeFrom(
      static_cast<const ReqGameReport &>(from));
}


void ReqGameReport::MergeFrom(const ReqGameReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqGameReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGameReport::CopyFrom(const ReqGameReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqGameReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameReport::IsInitialized() const {
  return true;
}

void ReqGameReport::InternalSwap(ReqGameReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGameReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[17]);
}

// ===================================================================

class ReqGameQuit::_Internal {
 public:
};

ReqGameQuit::ReqGameQuit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqGameQuit)
}
ReqGameQuit::ReqGameQuit(const ReqGameQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqGameQuit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGameQuit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGameQuit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqGameQuit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[18]);
}

// ===================================================================

class LogItems::_Internal {
 public:
};

LogItems::LogItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:LogItems)
}
LogItems::LogItems(const LogItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cnt_, &from.cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&cnt_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LogItems)
}

inline void LogItems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cnt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&cnt_)) + sizeof(id_));
}

LogItems::~LogItems() {
  // @@protoc_insertion_point(destructor:LogItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogItems::Clear() {
// @@protoc_insertion_point(message_clear_start:LogItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&cnt_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 oldCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          oldcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_id(), target);
  }

  // uint64 cnt = 2;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cnt(), target);
  }

  // uint64 oldCnt = 3;
  if (this->_internal_oldcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_oldcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogItems)
  return target;
}

size_t LogItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cnt = 2;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cnt());
  }

  // uint64 oldCnt = 3;
  if (this->_internal_oldcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_oldcnt());
  }

  // sint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogItems::GetClassData() const { return &_class_data_; }

void LogItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogItems *>(to)->MergeFrom(
      static_cast<const LogItems &>(from));
}


void LogItems::MergeFrom(const LogItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  if (from._internal_oldcnt() != 0) {
    _internal_set_oldcnt(from._internal_oldcnt());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogItems::CopyFrom(const LogItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogItems::IsInitialized() const {
  return true;
}

void LogItems::InternalSwap(LogItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogItems, id_)
      + sizeof(LogItems::id_)
      - PROTOBUF_FIELD_OFFSET(LogItems, cnt_)>(
          reinterpret_cast<char*>(&cnt_),
          reinterpret_cast<char*>(&other->cnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[19]);
}

// ===================================================================

class WriteLogData::_Internal {
 public:
};

WriteLogData::WriteLogData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:WriteLogData)
}
WriteLogData::WriteLogData(const WriteLogData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:WriteLogData)
}

inline void WriteLogData::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

WriteLogData::~WriteLogData() {
  // @@protoc_insertion_point(destructor:WriteLogData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteLogData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  pf_.Destroy();
  desc_.Destroy();
  extra_.Destroy();
  name_.Destroy();
}

void WriteLogData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteLogData::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteLogData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  desc_.ClearToEmpty();
  extra_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteLogData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WriteLogData.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WriteLogData.pf"));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serverId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LogItems data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteLogData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteLogData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteLogData.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteLogData.pf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pf(), target);
  }

  // bytes desc = 4;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // sint32 serverId = 5;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_serverid(), target);
  }

  // bytes extra = 6;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_extra(), target);
  }

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_name(), target);
  }

  // repeated .LogItems data = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteLogData)
  return target;
}

size_t WriteLogData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteLogData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogItems data = 8;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // bytes desc = 4;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes extra = 6;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // sint32 serverId = 5;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteLogData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteLogData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteLogData::GetClassData() const { return &_class_data_; }

void WriteLogData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteLogData *>(to)->MergeFrom(
      static_cast<const WriteLogData &>(from));
}


void WriteLogData::MergeFrom(const WriteLogData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteLogData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteLogData::CopyFrom(const WriteLogData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteLogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLogData::IsInitialized() const {
  return true;
}

void WriteLogData::InternalSwap(WriteLogData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteLogData, serverid_)
      + sizeof(WriteLogData::serverid_)
      - PROTOBUF_FIELD_OFFSET(WriteLogData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteLogData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[20]);
}

// ===================================================================

class LogMails::_Internal {
 public:
};

LogMails::LogMails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:LogMails)
}
LogMails::LogMails(const LogMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  reward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reward_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward().empty()) {
    reward_.Set(from._internal_reward(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mailid_, &from.mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&mailid_)) + sizeof(expiretime_));
  // @@protoc_insertion_point(copy_constructor:LogMails)
}

inline void LogMails::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reward_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reward_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mailid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&mailid_)) + sizeof(expiretime_));
}

LogMails::~LogMails() {
  // @@protoc_insertion_point(destructor:LogMails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  content_.Destroy();
  reward_.Destroy();
  desc_.Destroy();
  extra_.Destroy();
}

void LogMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogMails::Clear() {
// @@protoc_insertion_point(message_clear_start:LogMails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  content_.ClearToEmpty();
  reward_.ClearToEmpty();
  desc_.ClearToEmpty();
  extra_.ClearToEmpty();
  ::memset(&mailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&mailid_)) + sizeof(expiretime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 mailId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reward();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LogMails.reward"));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 expireTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogMails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mailId = 1;
  if (this->_internal_mailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mailid(), target);
  }

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_title(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string reward = 4;
  if (!this->_internal_reward().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward().data(), static_cast<int>(this->_internal_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogMails.reward");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reward(), target);
  }

  // bytes desc = 5;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // sint32 expireTime = 6;
  if (this->_internal_expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_expiretime(), target);
  }

  // bytes extra = 7;
  if (!this->_internal_extra().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogMails)
  return target;
}

size_t LogMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogMails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string reward = 4;
  if (!this->_internal_reward().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward());
  }

  // bytes desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes extra = 7;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // uint64 mailId = 1;
  if (this->_internal_mailid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mailid());
  }

  // sint32 expireTime = 6;
  if (this->_internal_expiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_expiretime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogMails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogMails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogMails::GetClassData() const { return &_class_data_; }

void LogMails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogMails *>(to)->MergeFrom(
      static_cast<const LogMails &>(from));
}


void LogMails::MergeFrom(const LogMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogMails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_reward().empty()) {
    _internal_set_reward(from._internal_reward());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (from._internal_mailid() != 0) {
    _internal_set_mailid(from._internal_mailid());
  }
  if (from._internal_expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogMails::CopyFrom(const LogMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMails::IsInitialized() const {
  return true;
}

void LogMails::InternalSwap(LogMails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reward_, lhs_arena,
      &other->reward_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogMails, expiretime_)
      + sizeof(LogMails::expiretime_)
      - PROTOBUF_FIELD_OFFSET(LogMails, mailid_)>(
          reinterpret_cast<char*>(&mailid_),
          reinterpret_cast<char*>(&other->mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[21]);
}

// ===================================================================

class WriteMailData::_Internal {
 public:
};

WriteMailData::WriteMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:WriteMailData)
}
WriteMailData::WriteMailData(const WriteMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:WriteMailData)
}

inline void WriteMailData::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

WriteMailData::~WriteMailData() {
  // @@protoc_insertion_point(destructor:WriteMailData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  pf_.Destroy();
  name_.Destroy();
}

void WriteMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteMailData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteMailData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WriteMailData.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WriteMailData.pf"));
        } else
          goto handle_unusual;
        continue;
      // sint32 serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LogMails data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteMailData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteMailData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteMailData.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteMailData.pf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pf(), target);
  }

  // sint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_serverid(), target);
  }

  // bytes name = 5;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_name(), target);
  }

  // repeated .LogMails data = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteMailData)
  return target;
}

size_t WriteMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteMailData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogMails data = 6;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account = 2;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 3;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // bytes name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // sint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteMailData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteMailData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteMailData::GetClassData() const { return &_class_data_; }

void WriteMailData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteMailData *>(to)->MergeFrom(
      static_cast<const WriteMailData &>(from));
}


void WriteMailData::MergeFrom(const WriteMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteMailData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteMailData::CopyFrom(const WriteMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteMailData::IsInitialized() const {
  return true;
}

void WriteMailData::InternalSwap(WriteMailData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteMailData, serverid_)
      + sizeof(WriteMailData::serverid_)
      - PROTOBUF_FIELD_OFFSET(WriteMailData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteMailData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[22]);
}

// ===================================================================

class ReqSelectRepeatedName::_Internal {
 public:
};

ReqSelectRepeatedName::ReqSelectRepeatedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSelectRepeatedName)
}
ReqSelectRepeatedName::ReqSelectRepeatedName(const ReqSelectRepeatedName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ReqSelectRepeatedName)
}

inline void ReqSelectRepeatedName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = uint64_t{0u};
}

ReqSelectRepeatedName::~ReqSelectRepeatedName() {
  // @@protoc_insertion_point(destructor:ReqSelectRepeatedName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSelectRepeatedName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ReqSelectRepeatedName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSelectRepeatedName::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSelectRepeatedName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSelectRepeatedName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSelectRepeatedName.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSelectRepeatedName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSelectRepeatedName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSelectRepeatedName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSelectRepeatedName)
  return target;
}

size_t ReqSelectRepeatedName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSelectRepeatedName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSelectRepeatedName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSelectRepeatedName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSelectRepeatedName::GetClassData() const { return &_class_data_; }

void ReqSelectRepeatedName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSelectRepeatedName *>(to)->MergeFrom(
      static_cast<const ReqSelectRepeatedName &>(from));
}


void ReqSelectRepeatedName::MergeFrom(const ReqSelectRepeatedName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSelectRepeatedName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSelectRepeatedName::CopyFrom(const ReqSelectRepeatedName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSelectRepeatedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSelectRepeatedName::IsInitialized() const {
  return true;
}

void ReqSelectRepeatedName::InternalSwap(ReqSelectRepeatedName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSelectRepeatedName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[23]);
}

// ===================================================================

class ResSelectRepeatedName::_Internal {
 public:
};

ResSelectRepeatedName::ResSelectRepeatedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResSelectRepeatedName)
}
ResSelectRepeatedName::ResSelectRepeatedName(const ResSelectRepeatedName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:ResSelectRepeatedName)
}

inline void ResSelectRepeatedName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(res_));
}

ResSelectRepeatedName::~ResSelectRepeatedName() {
  // @@protoc_insertion_point(destructor:ResSelectRepeatedName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResSelectRepeatedName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResSelectRepeatedName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResSelectRepeatedName::Clear() {
// @@protoc_insertion_point(message_clear_start:ResSelectRepeatedName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(res_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResSelectRepeatedName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResSelectRepeatedName.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResSelectRepeatedName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResSelectRepeatedName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResSelectRepeatedName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 res = 2;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_res(), target);
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResSelectRepeatedName)
  return target;
}

size_t ResSelectRepeatedName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResSelectRepeatedName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // int32 res = 2;
  if (this->_internal_res() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResSelectRepeatedName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResSelectRepeatedName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResSelectRepeatedName::GetClassData() const { return &_class_data_; }

void ResSelectRepeatedName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResSelectRepeatedName *>(to)->MergeFrom(
      static_cast<const ResSelectRepeatedName &>(from));
}


void ResSelectRepeatedName::MergeFrom(const ResSelectRepeatedName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResSelectRepeatedName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResSelectRepeatedName::CopyFrom(const ResSelectRepeatedName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResSelectRepeatedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSelectRepeatedName::IsInitialized() const {
  return true;
}

void ResSelectRepeatedName::InternalSwap(ResSelectRepeatedName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResSelectRepeatedName, res_)
      + sizeof(ResSelectRepeatedName::res_)
      - PROTOBUF_FIELD_OFFSET(ResSelectRepeatedName, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResSelectRepeatedName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[24]);
}

// ===================================================================

class ReqReturnNewName::_Internal {
 public:
};

ReqReturnNewName::ReqReturnNewName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqReturnNewName)
}
ReqReturnNewName::ReqReturnNewName(const ReqReturnNewName& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqReturnNewName)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqReturnNewName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqReturnNewName::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqReturnNewName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[25]);
}

// ===================================================================

class ResReturnNewName::_Internal {
 public:
};

ResReturnNewName::ResReturnNewName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnNewName)
}
ResReturnNewName::ResReturnNewName(const ResReturnNewName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ResReturnNewName)
}

inline void ResReturnNewName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResReturnNewName::~ResReturnNewName() {
  // @@protoc_insertion_point(destructor:ResReturnNewName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnNewName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResReturnNewName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnNewName::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnNewName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnNewName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResReturnNewName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnNewName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnNewName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResReturnNewName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnNewName)
  return target;
}

size_t ResReturnNewName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnNewName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnNewName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnNewName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnNewName::GetClassData() const { return &_class_data_; }

void ResReturnNewName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnNewName *>(to)->MergeFrom(
      static_cast<const ResReturnNewName &>(from));
}


void ResReturnNewName::MergeFrom(const ResReturnNewName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnNewName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnNewName::CopyFrom(const ResReturnNewName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnNewName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnNewName::IsInitialized() const {
  return true;
}

void ResReturnNewName::InternalSwap(ResReturnNewName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnNewName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerCommon_2eproto_getter, &descriptor_table_ServerCommon_2eproto_once,
      file_level_metadata_ServerCommon_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReqDbLoginAuth*
Arena::CreateMaybeMessage< ::ReqDbLoginAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbLoginAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbLoginAuth*
Arena::CreateMaybeMessage< ::ResDbLoginAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbLoginAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbSelectPlayer*
Arena::CreateMaybeMessage< ::ReqDbSelectPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbSelectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbSelectPlayer*
Arena::CreateMaybeMessage< ::ResDbSelectPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbSelectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbCreatePlayer*
Arena::CreateMaybeMessage< ::ReqDbCreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbCreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbCreatePlayer*
Arena::CreateMaybeMessage< ::ResDbCreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbCreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbEnterGame*
Arena::CreateMaybeMessage< ::ReqDbEnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbEnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbEnterGame*
Arena::CreateMaybeMessage< ::ResDbEnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbEnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerBaseData*
Arena::CreateMaybeMessage< ::PlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::BagData*
Arena::CreateMaybeMessage< ::BagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BagData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnPlayerBaseData*
Arena::CreateMaybeMessage< ::ResReturnPlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnPlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnPlayerBagData*
Arena::CreateMaybeMessage< ::ResReturnPlayerBagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnPlayerBagData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnPlayerModuleData*
Arena::CreateMaybeMessage< ::ResReturnPlayerModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnPlayerModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSavePlayerBaseData*
Arena::CreateMaybeMessage< ::ReqSavePlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSavePlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSavePlayerBagData*
Arena::CreateMaybeMessage< ::ReqSavePlayerBagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSavePlayerBagData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSavePlayerModuleData*
Arena::CreateMaybeMessage< ::ReqSavePlayerModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSavePlayerModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSendGmToGame*
Arena::CreateMaybeMessage< ::ReqSendGmToGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSendGmToGame >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqGameReport*
Arena::CreateMaybeMessage< ::ReqGameReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqGameReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqGameQuit*
Arena::CreateMaybeMessage< ::ReqGameQuit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqGameQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::LogItems*
Arena::CreateMaybeMessage< ::LogItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogItems >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteLogData*
Arena::CreateMaybeMessage< ::WriteLogData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteLogData >(arena);
}
template<> PROTOBUF_NOINLINE ::LogMails*
Arena::CreateMaybeMessage< ::LogMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogMails >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteMailData*
Arena::CreateMaybeMessage< ::WriteMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSelectRepeatedName*
Arena::CreateMaybeMessage< ::ReqSelectRepeatedName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSelectRepeatedName >(arena);
}
template<> PROTOBUF_NOINLINE ::ResSelectRepeatedName*
Arena::CreateMaybeMessage< ::ResSelectRepeatedName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResSelectRepeatedName >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqReturnNewName*
Arena::CreateMaybeMessage< ::ReqReturnNewName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqReturnNewName >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnNewName*
Arena::CreateMaybeMessage< ::ResReturnNewName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnNewName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
