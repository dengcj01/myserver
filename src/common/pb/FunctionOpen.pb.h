// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FunctionOpen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FunctionOpen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FunctionOpen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FunctionOpen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FunctionOpen_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FunctionOpen_2eproto;
class NotifyFunctionOpenUpdate;
struct NotifyFunctionOpenUpdateDefaultTypeInternal;
extern NotifyFunctionOpenUpdateDefaultTypeInternal _NotifyFunctionOpenUpdate_default_instance_;
class ReqFunctionOpenInfo;
struct ReqFunctionOpenInfoDefaultTypeInternal;
extern ReqFunctionOpenInfoDefaultTypeInternal _ReqFunctionOpenInfo_default_instance_;
class ResFunctionOpenInfo;
struct ResFunctionOpenInfoDefaultTypeInternal;
extern ResFunctionOpenInfoDefaultTypeInternal _ResFunctionOpenInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NotifyFunctionOpenUpdate* Arena::CreateMaybeMessage<::NotifyFunctionOpenUpdate>(Arena*);
template<> ::ReqFunctionOpenInfo* Arena::CreateMaybeMessage<::ReqFunctionOpenInfo>(Arena*);
template<> ::ResFunctionOpenInfo* Arena::CreateMaybeMessage<::ResFunctionOpenInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqFunctionOpenInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqFunctionOpenInfo) */ {
 public:
  inline ReqFunctionOpenInfo() : ReqFunctionOpenInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqFunctionOpenInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqFunctionOpenInfo(const ReqFunctionOpenInfo& from);
  ReqFunctionOpenInfo(ReqFunctionOpenInfo&& from) noexcept
    : ReqFunctionOpenInfo() {
    *this = ::std::move(from);
  }

  inline ReqFunctionOpenInfo& operator=(const ReqFunctionOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqFunctionOpenInfo& operator=(ReqFunctionOpenInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqFunctionOpenInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqFunctionOpenInfo* internal_default_instance() {
    return reinterpret_cast<const ReqFunctionOpenInfo*>(
               &_ReqFunctionOpenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqFunctionOpenInfo& a, ReqFunctionOpenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqFunctionOpenInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqFunctionOpenInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqFunctionOpenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqFunctionOpenInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqFunctionOpenInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqFunctionOpenInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqFunctionOpenInfo";
  }
  protected:
  explicit ReqFunctionOpenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqFunctionOpenInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_FunctionOpen_2eproto;
};
// -------------------------------------------------------------------

class ResFunctionOpenInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResFunctionOpenInfo) */ {
 public:
  inline ResFunctionOpenInfo() : ResFunctionOpenInfo(nullptr) {}
  ~ResFunctionOpenInfo() override;
  explicit PROTOBUF_CONSTEXPR ResFunctionOpenInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResFunctionOpenInfo(const ResFunctionOpenInfo& from);
  ResFunctionOpenInfo(ResFunctionOpenInfo&& from) noexcept
    : ResFunctionOpenInfo() {
    *this = ::std::move(from);
  }

  inline ResFunctionOpenInfo& operator=(const ResFunctionOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResFunctionOpenInfo& operator=(ResFunctionOpenInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResFunctionOpenInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResFunctionOpenInfo* internal_default_instance() {
    return reinterpret_cast<const ResFunctionOpenInfo*>(
               &_ResFunctionOpenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResFunctionOpenInfo& a, ResFunctionOpenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResFunctionOpenInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResFunctionOpenInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResFunctionOpenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResFunctionOpenInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResFunctionOpenInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResFunctionOpenInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResFunctionOpenInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResFunctionOpenInfo";
  }
  protected:
  explicit ResFunctionOpenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated int32 list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  int32_t _internal_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_list() const;
  void _internal_add_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_list();
  public:
  int32_t list(int index) const;
  void set_list(int index, int32_t value);
  void add_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:ResFunctionOpenInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > list_;
  mutable std::atomic<int> _list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FunctionOpen_2eproto;
};
// -------------------------------------------------------------------

class NotifyFunctionOpenUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyFunctionOpenUpdate) */ {
 public:
  inline NotifyFunctionOpenUpdate() : NotifyFunctionOpenUpdate(nullptr) {}
  ~NotifyFunctionOpenUpdate() override;
  explicit PROTOBUF_CONSTEXPR NotifyFunctionOpenUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFunctionOpenUpdate(const NotifyFunctionOpenUpdate& from);
  NotifyFunctionOpenUpdate(NotifyFunctionOpenUpdate&& from) noexcept
    : NotifyFunctionOpenUpdate() {
    *this = ::std::move(from);
  }

  inline NotifyFunctionOpenUpdate& operator=(const NotifyFunctionOpenUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFunctionOpenUpdate& operator=(NotifyFunctionOpenUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFunctionOpenUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFunctionOpenUpdate* internal_default_instance() {
    return reinterpret_cast<const NotifyFunctionOpenUpdate*>(
               &_NotifyFunctionOpenUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotifyFunctionOpenUpdate& a, NotifyFunctionOpenUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFunctionOpenUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFunctionOpenUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFunctionOpenUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFunctionOpenUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyFunctionOpenUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyFunctionOpenUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFunctionOpenUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyFunctionOpenUpdate";
  }
  protected:
  explicit NotifyFunctionOpenUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated int32 list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  int32_t _internal_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_list() const;
  void _internal_add_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_list();
  public:
  int32_t list(int index) const;
  void set_list(int index, int32_t value);
  void add_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:NotifyFunctionOpenUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > list_;
  mutable std::atomic<int> _list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FunctionOpen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqFunctionOpenInfo

// -------------------------------------------------------------------

// ResFunctionOpenInfo

// repeated int32 list = 1;
inline int ResFunctionOpenInfo::_internal_list_size() const {
  return list_.size();
}
inline int ResFunctionOpenInfo::list_size() const {
  return _internal_list_size();
}
inline void ResFunctionOpenInfo::clear_list() {
  list_.Clear();
}
inline int32_t ResFunctionOpenInfo::_internal_list(int index) const {
  return list_.Get(index);
}
inline int32_t ResFunctionOpenInfo::list(int index) const {
  // @@protoc_insertion_point(field_get:ResFunctionOpenInfo.list)
  return _internal_list(index);
}
inline void ResFunctionOpenInfo::set_list(int index, int32_t value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:ResFunctionOpenInfo.list)
}
inline void ResFunctionOpenInfo::_internal_add_list(int32_t value) {
  list_.Add(value);
}
inline void ResFunctionOpenInfo::add_list(int32_t value) {
  _internal_add_list(value);
  // @@protoc_insertion_point(field_add:ResFunctionOpenInfo.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResFunctionOpenInfo::_internal_list() const {
  return list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResFunctionOpenInfo::list() const {
  // @@protoc_insertion_point(field_list:ResFunctionOpenInfo.list)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResFunctionOpenInfo::_internal_mutable_list() {
  return &list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResFunctionOpenInfo::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:ResFunctionOpenInfo.list)
  return _internal_mutable_list();
}

// -------------------------------------------------------------------

// NotifyFunctionOpenUpdate

// repeated int32 list = 1;
inline int NotifyFunctionOpenUpdate::_internal_list_size() const {
  return list_.size();
}
inline int NotifyFunctionOpenUpdate::list_size() const {
  return _internal_list_size();
}
inline void NotifyFunctionOpenUpdate::clear_list() {
  list_.Clear();
}
inline int32_t NotifyFunctionOpenUpdate::_internal_list(int index) const {
  return list_.Get(index);
}
inline int32_t NotifyFunctionOpenUpdate::list(int index) const {
  // @@protoc_insertion_point(field_get:NotifyFunctionOpenUpdate.list)
  return _internal_list(index);
}
inline void NotifyFunctionOpenUpdate::set_list(int index, int32_t value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:NotifyFunctionOpenUpdate.list)
}
inline void NotifyFunctionOpenUpdate::_internal_add_list(int32_t value) {
  list_.Add(value);
}
inline void NotifyFunctionOpenUpdate::add_list(int32_t value) {
  _internal_add_list(value);
  // @@protoc_insertion_point(field_add:NotifyFunctionOpenUpdate.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NotifyFunctionOpenUpdate::_internal_list() const {
  return list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NotifyFunctionOpenUpdate::list() const {
  // @@protoc_insertion_point(field_list:NotifyFunctionOpenUpdate.list)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NotifyFunctionOpenUpdate::_internal_mutable_list() {
  return &list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NotifyFunctionOpenUpdate::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:NotifyFunctionOpenUpdate.list)
  return _internal_mutable_list();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FunctionOpen_2eproto
