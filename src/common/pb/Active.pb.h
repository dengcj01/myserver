// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Active.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Active_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Active_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Active_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Active_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Active_2eproto;
class ActiveData;
struct ActiveDataDefaultTypeInternal;
extern ActiveDataDefaultTypeInternal _ActiveData_default_instance_;
class NotifyOptActive;
struct NotifyOptActiveDefaultTypeInternal;
extern NotifyOptActiveDefaultTypeInternal _NotifyOptActive_default_instance_;
class ReqActiveData;
struct ReqActiveDataDefaultTypeInternal;
extern ReqActiveDataDefaultTypeInternal _ReqActiveData_default_instance_;
class ResActiveData;
struct ResActiveDataDefaultTypeInternal;
extern ResActiveDataDefaultTypeInternal _ResActiveData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActiveData* Arena::CreateMaybeMessage<::ActiveData>(Arena*);
template<> ::NotifyOptActive* Arena::CreateMaybeMessage<::NotifyOptActive>(Arena*);
template<> ::ReqActiveData* Arena::CreateMaybeMessage<::ReqActiveData>(Arena*);
template<> ::ResActiveData* Arena::CreateMaybeMessage<::ResActiveData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqActiveData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqActiveData) */ {
 public:
  inline ReqActiveData() : ReqActiveData(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqActiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqActiveData(const ReqActiveData& from);
  ReqActiveData(ReqActiveData&& from) noexcept
    : ReqActiveData() {
    *this = ::std::move(from);
  }

  inline ReqActiveData& operator=(const ReqActiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqActiveData& operator=(ReqActiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqActiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqActiveData* internal_default_instance() {
    return reinterpret_cast<const ReqActiveData*>(
               &_ReqActiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqActiveData& a, ReqActiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqActiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqActiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqActiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqActiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqActiveData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqActiveData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqActiveData";
  }
  protected:
  explicit ReqActiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqActiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Active_2eproto;
};
// -------------------------------------------------------------------

class ActiveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActiveData) */ {
 public:
  inline ActiveData() : ActiveData(nullptr) {}
  ~ActiveData() override;
  explicit PROTOBUF_CONSTEXPR ActiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveData(const ActiveData& from);
  ActiveData(ActiveData&& from) noexcept
    : ActiveData() {
    *this = ::std::move(from);
  }

  inline ActiveData& operator=(const ActiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveData& operator=(ActiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveData* internal_default_instance() {
    return reinterpret_cast<const ActiveData*>(
               &_ActiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActiveData& a, ActiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActiveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActiveData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActiveData";
  }
  protected:
  explicit ActiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // uint32 startTime = 3;
  void clear_starttime();
  uint32_t starttime() const;
  void set_starttime(uint32_t value);
  private:
  uint32_t _internal_starttime() const;
  void _internal_set_starttime(uint32_t value);
  public:

  // uint32 endTime = 4;
  void clear_endtime();
  uint32_t endtime() const;
  void set_endtime(uint32_t value);
  private:
  uint32_t _internal_endtime() const;
  void _internal_set_endtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ActiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t type_;
  uint32_t starttime_;
  uint32_t endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Active_2eproto;
};
// -------------------------------------------------------------------

class ResActiveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResActiveData) */ {
 public:
  inline ResActiveData() : ResActiveData(nullptr) {}
  ~ResActiveData() override;
  explicit PROTOBUF_CONSTEXPR ResActiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResActiveData(const ResActiveData& from);
  ResActiveData(ResActiveData&& from) noexcept
    : ResActiveData() {
    *this = ::std::move(from);
  }

  inline ResActiveData& operator=(const ResActiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResActiveData& operator=(ResActiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResActiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResActiveData* internal_default_instance() {
    return reinterpret_cast<const ResActiveData*>(
               &_ResActiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResActiveData& a, ResActiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResActiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResActiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResActiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResActiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResActiveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResActiveData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResActiveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResActiveData";
  }
  protected:
  explicit ResActiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ActiveData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ActiveData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >*
      mutable_data();
  private:
  const ::ActiveData& _internal_data(int index) const;
  ::ActiveData* _internal_add_data();
  public:
  const ::ActiveData& data(int index) const;
  ::ActiveData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >&
      data() const;

  // @@protoc_insertion_point(class_scope:ResActiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Active_2eproto;
};
// -------------------------------------------------------------------

class NotifyOptActive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyOptActive) */ {
 public:
  inline NotifyOptActive() : NotifyOptActive(nullptr) {}
  ~NotifyOptActive() override;
  explicit PROTOBUF_CONSTEXPR NotifyOptActive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyOptActive(const NotifyOptActive& from);
  NotifyOptActive(NotifyOptActive&& from) noexcept
    : NotifyOptActive() {
    *this = ::std::move(from);
  }

  inline NotifyOptActive& operator=(const NotifyOptActive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyOptActive& operator=(NotifyOptActive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyOptActive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyOptActive* internal_default_instance() {
    return reinterpret_cast<const NotifyOptActive*>(
               &_NotifyOptActive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotifyOptActive& a, NotifyOptActive& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyOptActive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyOptActive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyOptActive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyOptActive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyOptActive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyOptActive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyOptActive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyOptActive";
  }
  protected:
  explicit NotifyOptActive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOptFieldNumber = 1,
  };
  // repeated .ActiveData data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ActiveData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >*
      mutable_data();
  private:
  const ::ActiveData& _internal_data(int index) const;
  ::ActiveData* _internal_add_data();
  public:
  const ::ActiveData& data(int index) const;
  ::ActiveData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >&
      data() const;

  // int32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NotifyOptActive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData > data_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Active_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqActiveData

// -------------------------------------------------------------------

// ActiveData

// int32 id = 1;
inline void ActiveData::clear_id() {
  id_ = 0;
}
inline int32_t ActiveData::_internal_id() const {
  return id_;
}
inline int32_t ActiveData::id() const {
  // @@protoc_insertion_point(field_get:ActiveData.id)
  return _internal_id();
}
inline void ActiveData::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ActiveData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ActiveData.id)
}

// int32 type = 2;
inline void ActiveData::clear_type() {
  type_ = 0;
}
inline int32_t ActiveData::_internal_type() const {
  return type_;
}
inline int32_t ActiveData::type() const {
  // @@protoc_insertion_point(field_get:ActiveData.type)
  return _internal_type();
}
inline void ActiveData::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ActiveData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ActiveData.type)
}

// uint32 startTime = 3;
inline void ActiveData::clear_starttime() {
  starttime_ = 0u;
}
inline uint32_t ActiveData::_internal_starttime() const {
  return starttime_;
}
inline uint32_t ActiveData::starttime() const {
  // @@protoc_insertion_point(field_get:ActiveData.startTime)
  return _internal_starttime();
}
inline void ActiveData::_internal_set_starttime(uint32_t value) {
  
  starttime_ = value;
}
inline void ActiveData::set_starttime(uint32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:ActiveData.startTime)
}

// uint32 endTime = 4;
inline void ActiveData::clear_endtime() {
  endtime_ = 0u;
}
inline uint32_t ActiveData::_internal_endtime() const {
  return endtime_;
}
inline uint32_t ActiveData::endtime() const {
  // @@protoc_insertion_point(field_get:ActiveData.endTime)
  return _internal_endtime();
}
inline void ActiveData::_internal_set_endtime(uint32_t value) {
  
  endtime_ = value;
}
inline void ActiveData::set_endtime(uint32_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:ActiveData.endTime)
}

// -------------------------------------------------------------------

// ResActiveData

// repeated .ActiveData data = 1;
inline int ResActiveData::_internal_data_size() const {
  return data_.size();
}
inline int ResActiveData::data_size() const {
  return _internal_data_size();
}
inline void ResActiveData::clear_data() {
  data_.Clear();
}
inline ::ActiveData* ResActiveData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResActiveData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >*
ResActiveData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResActiveData.data)
  return &data_;
}
inline const ::ActiveData& ResActiveData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ActiveData& ResActiveData::data(int index) const {
  // @@protoc_insertion_point(field_get:ResActiveData.data)
  return _internal_data(index);
}
inline ::ActiveData* ResActiveData::_internal_add_data() {
  return data_.Add();
}
inline ::ActiveData* ResActiveData::add_data() {
  ::ActiveData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResActiveData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >&
ResActiveData::data() const {
  // @@protoc_insertion_point(field_list:ResActiveData.data)
  return data_;
}

// -------------------------------------------------------------------

// NotifyOptActive

// int32 opt = 1;
inline void NotifyOptActive::clear_opt() {
  opt_ = 0;
}
inline int32_t NotifyOptActive::_internal_opt() const {
  return opt_;
}
inline int32_t NotifyOptActive::opt() const {
  // @@protoc_insertion_point(field_get:NotifyOptActive.opt)
  return _internal_opt();
}
inline void NotifyOptActive::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void NotifyOptActive::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:NotifyOptActive.opt)
}

// repeated .ActiveData data = 2;
inline int NotifyOptActive::_internal_data_size() const {
  return data_.size();
}
inline int NotifyOptActive::data_size() const {
  return _internal_data_size();
}
inline void NotifyOptActive::clear_data() {
  data_.Clear();
}
inline ::ActiveData* NotifyOptActive::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:NotifyOptActive.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >*
NotifyOptActive::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:NotifyOptActive.data)
  return &data_;
}
inline const ::ActiveData& NotifyOptActive::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ActiveData& NotifyOptActive::data(int index) const {
  // @@protoc_insertion_point(field_get:NotifyOptActive.data)
  return _internal_data(index);
}
inline ::ActiveData* NotifyOptActive::_internal_add_data() {
  return data_.Add();
}
inline ::ActiveData* NotifyOptActive::add_data() {
  ::ActiveData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:NotifyOptActive.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActiveData >&
NotifyOptActive::data() const {
  // @@protoc_insertion_point(field_list:NotifyOptActive.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Active_2eproto
