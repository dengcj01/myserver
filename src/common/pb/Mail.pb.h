// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Bag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Mail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Mail_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Mail_2eproto;
class MailList;
struct MailListDefaultTypeInternal;
extern MailListDefaultTypeInternal _MailList_default_instance_;
class NotifyAddNewMail;
struct NotifyAddNewMailDefaultTypeInternal;
extern NotifyAddNewMailDefaultTypeInternal _NotifyAddNewMail_default_instance_;
class ReqMailList;
struct ReqMailListDefaultTypeInternal;
extern ReqMailListDefaultTypeInternal _ReqMailList_default_instance_;
class ReqMasterSendMail;
struct ReqMasterSendMailDefaultTypeInternal;
extern ReqMasterSendMailDefaultTypeInternal _ReqMasterSendMail_default_instance_;
class ReqOneKeyOptMail;
struct ReqOneKeyOptMailDefaultTypeInternal;
extern ReqOneKeyOptMailDefaultTypeInternal _ReqOneKeyOptMail_default_instance_;
class ReqOptMail;
struct ReqOptMailDefaultTypeInternal;
extern ReqOptMailDefaultTypeInternal _ReqOptMail_default_instance_;
class ResMailList;
struct ResMailListDefaultTypeInternal;
extern ResMailListDefaultTypeInternal _ResMailList_default_instance_;
class ResOneKeyOptMail;
struct ResOneKeyOptMailDefaultTypeInternal;
extern ResOneKeyOptMailDefaultTypeInternal _ResOneKeyOptMail_default_instance_;
class ResOptMail;
struct ResOptMailDefaultTypeInternal;
extern ResOptMailDefaultTypeInternal _ResOptMail_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MailList* Arena::CreateMaybeMessage<::MailList>(Arena*);
template<> ::NotifyAddNewMail* Arena::CreateMaybeMessage<::NotifyAddNewMail>(Arena*);
template<> ::ReqMailList* Arena::CreateMaybeMessage<::ReqMailList>(Arena*);
template<> ::ReqMasterSendMail* Arena::CreateMaybeMessage<::ReqMasterSendMail>(Arena*);
template<> ::ReqOneKeyOptMail* Arena::CreateMaybeMessage<::ReqOneKeyOptMail>(Arena*);
template<> ::ReqOptMail* Arena::CreateMaybeMessage<::ReqOptMail>(Arena*);
template<> ::ResMailList* Arena::CreateMaybeMessage<::ResMailList>(Arena*);
template<> ::ResOneKeyOptMail* Arena::CreateMaybeMessage<::ResOneKeyOptMail>(Arena*);
template<> ::ResOptMail* Arena::CreateMaybeMessage<::ResOptMail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MailList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MailList) */ {
 public:
  inline MailList() : MailList(nullptr) {}
  ~MailList() override;
  explicit PROTOBUF_CONSTEXPR MailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailList(const MailList& from);
  MailList(MailList&& from) noexcept
    : MailList() {
    *this = ::std::move(from);
  }

  inline MailList& operator=(const MailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailList& operator=(MailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailList* internal_default_instance() {
    return reinterpret_cast<const MailList*>(
               &_MailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MailList& a, MailList& b) {
    a.Swap(&b);
  }
  inline void Swap(MailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MailList";
  }
  protected:
  explicit MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 6,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kSendNameFieldNumber = 7,
    kStatusFieldNumber = 4,
    kExpireTimeFieldNumber = 5,
    kSendTimeFieldNumber = 8,
  };
  // repeated .ItemInfo rd = 6;
  int rd_size() const;
  private:
  int _internal_rd_size() const;
  public:
  void clear_rd();
  ::ItemInfo* mutable_rd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >*
      mutable_rd();
  private:
  const ::ItemInfo& _internal_rd(int index) const;
  ::ItemInfo* _internal_add_rd();
  public:
  const ::ItemInfo& rd(int index) const;
  ::ItemInfo* add_rd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >&
      rd() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string sendName = 7;
  void clear_sendname();
  const std::string& sendname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sendname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sendname();
  PROTOBUF_NODISCARD std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // uint32 status = 4;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // uint32 expireTime = 5;
  void clear_expiretime();
  uint32_t expiretime() const;
  void set_expiretime(uint32_t value);
  private:
  uint32_t _internal_expiretime() const;
  void _internal_set_expiretime(uint32_t value);
  public:

  // uint32 sendTime = 8;
  void clear_sendtime();
  uint32_t sendtime() const;
  void set_sendtime(uint32_t value);
  private:
  uint32_t _internal_sendtime() const;
  void _internal_set_sendtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo > rd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  uint32_t status_;
  uint32_t expiretime_;
  uint32_t sendtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqMailList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqMailList) */ {
 public:
  inline ReqMailList() : ReqMailList(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqMailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqMailList(const ReqMailList& from);
  ReqMailList(ReqMailList&& from) noexcept
    : ReqMailList() {
    *this = ::std::move(from);
  }

  inline ReqMailList& operator=(const ReqMailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqMailList& operator=(ReqMailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqMailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqMailList* internal_default_instance() {
    return reinterpret_cast<const ReqMailList*>(
               &_ReqMailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqMailList& a, ReqMailList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqMailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqMailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqMailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqMailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqMailList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqMailList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqMailList";
  }
  protected:
  explicit ReqMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqMailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResMailList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResMailList) */ {
 public:
  inline ResMailList() : ResMailList(nullptr) {}
  ~ResMailList() override;
  explicit PROTOBUF_CONSTEXPR ResMailList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResMailList(const ResMailList& from);
  ResMailList(ResMailList&& from) noexcept
    : ResMailList() {
    *this = ::std::move(from);
  }

  inline ResMailList& operator=(const ResMailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResMailList& operator=(ResMailList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResMailList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResMailList* internal_default_instance() {
    return reinterpret_cast<const ResMailList*>(
               &_ResMailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResMailList& a, ResMailList& b) {
    a.Swap(&b);
  }
  inline void Swap(ResMailList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResMailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResMailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResMailList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResMailList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResMailList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResMailList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResMailList";
  }
  protected:
  explicit ResMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .MailList data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::MailList* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
      mutable_data();
  private:
  const ::MailList& _internal_data(int index) const;
  ::MailList* _internal_add_data();
  public:
  const ::MailList& data(int index) const;
  ::MailList* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
      data() const;

  // @@protoc_insertion_point(class_scope:ResMailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqOptMail) */ {
 public:
  inline ReqOptMail() : ReqOptMail(nullptr) {}
  ~ReqOptMail() override;
  explicit PROTOBUF_CONSTEXPR ReqOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqOptMail(const ReqOptMail& from);
  ReqOptMail(ReqOptMail&& from) noexcept
    : ReqOptMail() {
    *this = ::std::move(from);
  }

  inline ReqOptMail& operator=(const ReqOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqOptMail& operator=(ReqOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqOptMail* internal_default_instance() {
    return reinterpret_cast<const ReqOptMail*>(
               &_ReqOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqOptMail& a, ReqOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqOptMail";
  }
  protected:
  explicit ReqOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOptFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 opt = 2;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResOptMail) */ {
 public:
  inline ResOptMail() : ResOptMail(nullptr) {}
  ~ResOptMail() override;
  explicit PROTOBUF_CONSTEXPR ResOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResOptMail(const ResOptMail& from);
  ResOptMail(ResOptMail&& from) noexcept
    : ResOptMail() {
    *this = ::std::move(from);
  }

  inline ResOptMail& operator=(const ResOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResOptMail& operator=(ResOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResOptMail* internal_default_instance() {
    return reinterpret_cast<const ResOptMail*>(
               &_ResOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResOptMail& a, ResOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ResOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResOptMail";
  }
  protected:
  explicit ResOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOptFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 opt = 2;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqOneKeyOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqOneKeyOptMail) */ {
 public:
  inline ReqOneKeyOptMail() : ReqOneKeyOptMail(nullptr) {}
  ~ReqOneKeyOptMail() override;
  explicit PROTOBUF_CONSTEXPR ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqOneKeyOptMail(const ReqOneKeyOptMail& from);
  ReqOneKeyOptMail(ReqOneKeyOptMail&& from) noexcept
    : ReqOneKeyOptMail() {
    *this = ::std::move(from);
  }

  inline ReqOneKeyOptMail& operator=(const ReqOneKeyOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqOneKeyOptMail& operator=(ReqOneKeyOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqOneKeyOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqOneKeyOptMail* internal_default_instance() {
    return reinterpret_cast<const ReqOneKeyOptMail*>(
               &_ReqOneKeyOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqOneKeyOptMail& a, ReqOneKeyOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqOneKeyOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqOneKeyOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqOneKeyOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqOneKeyOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqOneKeyOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqOneKeyOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqOneKeyOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqOneKeyOptMail";
  }
  protected:
  explicit ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptFieldNumber = 1,
  };
  // int32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqOneKeyOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ResOneKeyOptMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResOneKeyOptMail) */ {
 public:
  inline ResOneKeyOptMail() : ResOneKeyOptMail(nullptr) {}
  ~ResOneKeyOptMail() override;
  explicit PROTOBUF_CONSTEXPR ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResOneKeyOptMail(const ResOneKeyOptMail& from);
  ResOneKeyOptMail(ResOneKeyOptMail&& from) noexcept
    : ResOneKeyOptMail() {
    *this = ::std::move(from);
  }

  inline ResOneKeyOptMail& operator=(const ResOneKeyOptMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResOneKeyOptMail& operator=(ResOneKeyOptMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResOneKeyOptMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResOneKeyOptMail* internal_default_instance() {
    return reinterpret_cast<const ResOneKeyOptMail*>(
               &_ResOneKeyOptMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResOneKeyOptMail& a, ResOneKeyOptMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ResOneKeyOptMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResOneKeyOptMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResOneKeyOptMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResOneKeyOptMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResOneKeyOptMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResOneKeyOptMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResOneKeyOptMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResOneKeyOptMail";
  }
  protected:
  explicit ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOptFieldNumber = 1,
  };
  // repeated string data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // int32 opt = 1;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResOneKeyOptMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class NotifyAddNewMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyAddNewMail) */ {
 public:
  inline NotifyAddNewMail() : NotifyAddNewMail(nullptr) {}
  ~NotifyAddNewMail() override;
  explicit PROTOBUF_CONSTEXPR NotifyAddNewMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyAddNewMail(const NotifyAddNewMail& from);
  NotifyAddNewMail(NotifyAddNewMail&& from) noexcept
    : NotifyAddNewMail() {
    *this = ::std::move(from);
  }

  inline NotifyAddNewMail& operator=(const NotifyAddNewMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyAddNewMail& operator=(NotifyAddNewMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyAddNewMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyAddNewMail* internal_default_instance() {
    return reinterpret_cast<const NotifyAddNewMail*>(
               &_NotifyAddNewMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NotifyAddNewMail& a, NotifyAddNewMail& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyAddNewMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyAddNewMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyAddNewMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyAddNewMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyAddNewMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyAddNewMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyAddNewMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyAddNewMail";
  }
  protected:
  explicit NotifyAddNewMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .MailList data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::MailList* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
      mutable_data();
  private:
  const ::MailList& _internal_data(int index) const;
  ::MailList* _internal_add_data();
  public:
  const ::MailList& data(int index) const;
  ::MailList* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
      data() const;

  // @@protoc_insertion_point(class_scope:NotifyAddNewMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// -------------------------------------------------------------------

class ReqMasterSendMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqMasterSendMail) */ {
 public:
  inline ReqMasterSendMail() : ReqMasterSendMail(nullptr) {}
  ~ReqMasterSendMail() override;
  explicit PROTOBUF_CONSTEXPR ReqMasterSendMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqMasterSendMail(const ReqMasterSendMail& from);
  ReqMasterSendMail(ReqMasterSendMail&& from) noexcept
    : ReqMasterSendMail() {
    *this = ::std::move(from);
  }

  inline ReqMasterSendMail& operator=(const ReqMasterSendMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqMasterSendMail& operator=(ReqMasterSendMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqMasterSendMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqMasterSendMail* internal_default_instance() {
    return reinterpret_cast<const ReqMasterSendMail*>(
               &_ReqMasterSendMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqMasterSendMail& a, ReqMasterSendMail& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqMasterSendMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqMasterSendMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqMasterSendMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqMasterSendMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqMasterSendMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqMasterSendMail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqMasterSendMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqMasterSendMail";
  }
  protected:
  explicit ReqMasterSendMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 4,
    kTitleFieldNumber = 1,
    kContentFieldNumber = 2,
    kSendNameFieldNumber = 5,
    kDescFieldNumber = 7,
    kExtraFieldNumber = 8,
    kExpireTimeFieldNumber = 3,
    kSendTimeFieldNumber = 6,
    kPidFieldNumber = 9,
  };
  // repeated .ItemInfo rd = 4;
  int rd_size() const;
  private:
  int _internal_rd_size() const;
  public:
  void clear_rd();
  ::ItemInfo* mutable_rd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >*
      mutable_rd();
  private:
  const ::ItemInfo& _internal_rd(int index) const;
  ::ItemInfo* _internal_add_rd();
  public:
  const ::ItemInfo& rd(int index) const;
  ::ItemInfo* add_rd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >&
      rd() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string sendName = 5;
  void clear_sendname();
  const std::string& sendname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sendname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sendname();
  PROTOBUF_NODISCARD std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // string desc = 7;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string extra = 8;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // uint32 expireTime = 3;
  void clear_expiretime();
  uint32_t expiretime() const;
  void set_expiretime(uint32_t value);
  private:
  uint32_t _internal_expiretime() const;
  void _internal_set_expiretime(uint32_t value);
  public:

  // uint32 sendTime = 6;
  void clear_sendtime();
  uint32_t sendtime() const;
  void set_sendtime(uint32_t value);
  private:
  uint32_t _internal_sendtime() const;
  void _internal_set_sendtime(uint32_t value);
  public:

  // uint64 pid = 9;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqMasterSendMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo > rd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  uint32_t expiretime_;
  uint32_t sendtime_;
  uint64_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Mail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MailList

// string id = 1;
inline void MailList::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MailList::id() const {
  // @@protoc_insertion_point(field_get:MailList.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.id)
}
inline std::string* MailList::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:MailList.id)
  return _s;
}
inline const std::string& MailList::_internal_id() const {
  return id_.Get();
}
inline void MailList::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_id() {
  // @@protoc_insertion_point(field_release:MailList.id)
  return id_.Release();
}
inline void MailList::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.id)
}

// string title = 2;
inline void MailList::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MailList::title() const {
  // @@protoc_insertion_point(field_get:MailList.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.title)
}
inline std::string* MailList::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:MailList.title)
  return _s;
}
inline const std::string& MailList::_internal_title() const {
  return title_.Get();
}
inline void MailList::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_title() {
  // @@protoc_insertion_point(field_release:MailList.title)
  return title_.Release();
}
inline void MailList::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.title)
}

// string content = 3;
inline void MailList::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& MailList::content() const {
  // @@protoc_insertion_point(field_get:MailList.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.content)
}
inline std::string* MailList::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MailList.content)
  return _s;
}
inline const std::string& MailList::_internal_content() const {
  return content_.Get();
}
inline void MailList::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_content() {
  // @@protoc_insertion_point(field_release:MailList.content)
  return content_.Release();
}
inline void MailList::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.content)
}

// uint32 status = 4;
inline void MailList::clear_status() {
  status_ = 0u;
}
inline uint32_t MailList::_internal_status() const {
  return status_;
}
inline uint32_t MailList::status() const {
  // @@protoc_insertion_point(field_get:MailList.status)
  return _internal_status();
}
inline void MailList::_internal_set_status(uint32_t value) {
  
  status_ = value;
}
inline void MailList::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:MailList.status)
}

// uint32 expireTime = 5;
inline void MailList::clear_expiretime() {
  expiretime_ = 0u;
}
inline uint32_t MailList::_internal_expiretime() const {
  return expiretime_;
}
inline uint32_t MailList::expiretime() const {
  // @@protoc_insertion_point(field_get:MailList.expireTime)
  return _internal_expiretime();
}
inline void MailList::_internal_set_expiretime(uint32_t value) {
  
  expiretime_ = value;
}
inline void MailList::set_expiretime(uint32_t value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:MailList.expireTime)
}

// repeated .ItemInfo rd = 6;
inline int MailList::_internal_rd_size() const {
  return rd_.size();
}
inline int MailList::rd_size() const {
  return _internal_rd_size();
}
inline ::ItemInfo* MailList::mutable_rd(int index) {
  // @@protoc_insertion_point(field_mutable:MailList.rd)
  return rd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >*
MailList::mutable_rd() {
  // @@protoc_insertion_point(field_mutable_list:MailList.rd)
  return &rd_;
}
inline const ::ItemInfo& MailList::_internal_rd(int index) const {
  return rd_.Get(index);
}
inline const ::ItemInfo& MailList::rd(int index) const {
  // @@protoc_insertion_point(field_get:MailList.rd)
  return _internal_rd(index);
}
inline ::ItemInfo* MailList::_internal_add_rd() {
  return rd_.Add();
}
inline ::ItemInfo* MailList::add_rd() {
  ::ItemInfo* _add = _internal_add_rd();
  // @@protoc_insertion_point(field_add:MailList.rd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >&
MailList::rd() const {
  // @@protoc_insertion_point(field_list:MailList.rd)
  return rd_;
}

// string sendName = 7;
inline void MailList::clear_sendname() {
  sendname_.ClearToEmpty();
}
inline const std::string& MailList::sendname() const {
  // @@protoc_insertion_point(field_get:MailList.sendName)
  return _internal_sendname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailList::set_sendname(ArgT0&& arg0, ArgT... args) {
 
 sendname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MailList.sendName)
}
inline std::string* MailList::mutable_sendname() {
  std::string* _s = _internal_mutable_sendname();
  // @@protoc_insertion_point(field_mutable:MailList.sendName)
  return _s;
}
inline const std::string& MailList::_internal_sendname() const {
  return sendname_.Get();
}
inline void MailList::_internal_set_sendname(const std::string& value) {
  
  sendname_.Set(value, GetArenaForAllocation());
}
inline std::string* MailList::_internal_mutable_sendname() {
  
  return sendname_.Mutable(GetArenaForAllocation());
}
inline std::string* MailList::release_sendname() {
  // @@protoc_insertion_point(field_release:MailList.sendName)
  return sendname_.Release();
}
inline void MailList::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocated(sendname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sendname_.IsDefault()) {
    sendname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MailList.sendName)
}

// uint32 sendTime = 8;
inline void MailList::clear_sendtime() {
  sendtime_ = 0u;
}
inline uint32_t MailList::_internal_sendtime() const {
  return sendtime_;
}
inline uint32_t MailList::sendtime() const {
  // @@protoc_insertion_point(field_get:MailList.sendTime)
  return _internal_sendtime();
}
inline void MailList::_internal_set_sendtime(uint32_t value) {
  
  sendtime_ = value;
}
inline void MailList::set_sendtime(uint32_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:MailList.sendTime)
}

// -------------------------------------------------------------------

// ReqMailList

// -------------------------------------------------------------------

// ResMailList

// repeated .MailList data = 1;
inline int ResMailList::_internal_data_size() const {
  return data_.size();
}
inline int ResMailList::data_size() const {
  return _internal_data_size();
}
inline void ResMailList::clear_data() {
  data_.Clear();
}
inline ::MailList* ResMailList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResMailList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
ResMailList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResMailList.data)
  return &data_;
}
inline const ::MailList& ResMailList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::MailList& ResMailList::data(int index) const {
  // @@protoc_insertion_point(field_get:ResMailList.data)
  return _internal_data(index);
}
inline ::MailList* ResMailList::_internal_add_data() {
  return data_.Add();
}
inline ::MailList* ResMailList::add_data() {
  ::MailList* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:ResMailList.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
ResMailList::data() const {
  // @@protoc_insertion_point(field_list:ResMailList.data)
  return data_;
}

// -------------------------------------------------------------------

// ReqOptMail

// string id = 1;
inline void ReqOptMail::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ReqOptMail::id() const {
  // @@protoc_insertion_point(field_get:ReqOptMail.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqOptMail::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqOptMail.id)
}
inline std::string* ReqOptMail::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ReqOptMail.id)
  return _s;
}
inline const std::string& ReqOptMail::_internal_id() const {
  return id_.Get();
}
inline void ReqOptMail::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqOptMail::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqOptMail::release_id() {
  // @@protoc_insertion_point(field_release:ReqOptMail.id)
  return id_.Release();
}
inline void ReqOptMail::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqOptMail.id)
}

// int32 opt = 2;
inline void ReqOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ReqOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ReqOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ReqOptMail.opt)
  return _internal_opt();
}
inline void ReqOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ReqOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ReqOptMail.opt)
}

// -------------------------------------------------------------------

// ResOptMail

// string id = 1;
inline void ResOptMail::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ResOptMail::id() const {
  // @@protoc_insertion_point(field_get:ResOptMail.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResOptMail::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResOptMail.id)
}
inline std::string* ResOptMail::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ResOptMail.id)
  return _s;
}
inline const std::string& ResOptMail::_internal_id() const {
  return id_.Get();
}
inline void ResOptMail::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ResOptMail::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ResOptMail::release_id() {
  // @@protoc_insertion_point(field_release:ResOptMail.id)
  return id_.Release();
}
inline void ResOptMail::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResOptMail.id)
}

// int32 opt = 2;
inline void ResOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ResOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ResOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ResOptMail.opt)
  return _internal_opt();
}
inline void ResOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ResOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ResOptMail.opt)
}

// -------------------------------------------------------------------

// ReqOneKeyOptMail

// int32 opt = 1;
inline void ReqOneKeyOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ReqOneKeyOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ReqOneKeyOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ReqOneKeyOptMail.opt)
  return _internal_opt();
}
inline void ReqOneKeyOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ReqOneKeyOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ReqOneKeyOptMail.opt)
}

// -------------------------------------------------------------------

// ResOneKeyOptMail

// int32 opt = 1;
inline void ResOneKeyOptMail::clear_opt() {
  opt_ = 0;
}
inline int32_t ResOneKeyOptMail::_internal_opt() const {
  return opt_;
}
inline int32_t ResOneKeyOptMail::opt() const {
  // @@protoc_insertion_point(field_get:ResOneKeyOptMail.opt)
  return _internal_opt();
}
inline void ResOneKeyOptMail::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ResOneKeyOptMail::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ResOneKeyOptMail.opt)
}

// repeated string data = 2;
inline int ResOneKeyOptMail::_internal_data_size() const {
  return data_.size();
}
inline int ResOneKeyOptMail::data_size() const {
  return _internal_data_size();
}
inline void ResOneKeyOptMail::clear_data() {
  data_.Clear();
}
inline std::string* ResOneKeyOptMail::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:ResOneKeyOptMail.data)
  return _s;
}
inline const std::string& ResOneKeyOptMail::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& ResOneKeyOptMail::data(int index) const {
  // @@protoc_insertion_point(field_get:ResOneKeyOptMail.data)
  return _internal_data(index);
}
inline std::string* ResOneKeyOptMail::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ResOneKeyOptMail.data)
  return data_.Mutable(index);
}
inline void ResOneKeyOptMail::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ResOneKeyOptMail.data)
}
inline std::string* ResOneKeyOptMail::_internal_add_data() {
  return data_.Add();
}
inline void ResOneKeyOptMail::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ResOneKeyOptMail.data)
}
inline void ResOneKeyOptMail::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ResOneKeyOptMail.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResOneKeyOptMail::data() const {
  // @@protoc_insertion_point(field_list:ResOneKeyOptMail.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResOneKeyOptMail::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResOneKeyOptMail.data)
  return &data_;
}

// -------------------------------------------------------------------

// NotifyAddNewMail

// repeated .MailList data = 1;
inline int NotifyAddNewMail::_internal_data_size() const {
  return data_.size();
}
inline int NotifyAddNewMail::data_size() const {
  return _internal_data_size();
}
inline void NotifyAddNewMail::clear_data() {
  data_.Clear();
}
inline ::MailList* NotifyAddNewMail::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:NotifyAddNewMail.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >*
NotifyAddNewMail::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:NotifyAddNewMail.data)
  return &data_;
}
inline const ::MailList& NotifyAddNewMail::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::MailList& NotifyAddNewMail::data(int index) const {
  // @@protoc_insertion_point(field_get:NotifyAddNewMail.data)
  return _internal_data(index);
}
inline ::MailList* NotifyAddNewMail::_internal_add_data() {
  return data_.Add();
}
inline ::MailList* NotifyAddNewMail::add_data() {
  ::MailList* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:NotifyAddNewMail.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailList >&
NotifyAddNewMail::data() const {
  // @@protoc_insertion_point(field_list:NotifyAddNewMail.data)
  return data_;
}

// -------------------------------------------------------------------

// ReqMasterSendMail

// string title = 1;
inline void ReqMasterSendMail::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ReqMasterSendMail::title() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqMasterSendMail::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.title)
}
inline std::string* ReqMasterSendMail::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.title)
  return _s;
}
inline const std::string& ReqMasterSendMail::_internal_title() const {
  return title_.Get();
}
inline void ReqMasterSendMail::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::release_title() {
  // @@protoc_insertion_point(field_release:ReqMasterSendMail.title)
  return title_.Release();
}
inline void ReqMasterSendMail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqMasterSendMail.title)
}

// string content = 2;
inline void ReqMasterSendMail::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ReqMasterSendMail::content() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqMasterSendMail::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.content)
}
inline std::string* ReqMasterSendMail::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.content)
  return _s;
}
inline const std::string& ReqMasterSendMail::_internal_content() const {
  return content_.Get();
}
inline void ReqMasterSendMail::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::release_content() {
  // @@protoc_insertion_point(field_release:ReqMasterSendMail.content)
  return content_.Release();
}
inline void ReqMasterSendMail::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqMasterSendMail.content)
}

// uint32 expireTime = 3;
inline void ReqMasterSendMail::clear_expiretime() {
  expiretime_ = 0u;
}
inline uint32_t ReqMasterSendMail::_internal_expiretime() const {
  return expiretime_;
}
inline uint32_t ReqMasterSendMail::expiretime() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.expireTime)
  return _internal_expiretime();
}
inline void ReqMasterSendMail::_internal_set_expiretime(uint32_t value) {
  
  expiretime_ = value;
}
inline void ReqMasterSendMail::set_expiretime(uint32_t value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.expireTime)
}

// repeated .ItemInfo rd = 4;
inline int ReqMasterSendMail::_internal_rd_size() const {
  return rd_.size();
}
inline int ReqMasterSendMail::rd_size() const {
  return _internal_rd_size();
}
inline ::ItemInfo* ReqMasterSendMail::mutable_rd(int index) {
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.rd)
  return rd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >*
ReqMasterSendMail::mutable_rd() {
  // @@protoc_insertion_point(field_mutable_list:ReqMasterSendMail.rd)
  return &rd_;
}
inline const ::ItemInfo& ReqMasterSendMail::_internal_rd(int index) const {
  return rd_.Get(index);
}
inline const ::ItemInfo& ReqMasterSendMail::rd(int index) const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.rd)
  return _internal_rd(index);
}
inline ::ItemInfo* ReqMasterSendMail::_internal_add_rd() {
  return rd_.Add();
}
inline ::ItemInfo* ReqMasterSendMail::add_rd() {
  ::ItemInfo* _add = _internal_add_rd();
  // @@protoc_insertion_point(field_add:ReqMasterSendMail.rd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ItemInfo >&
ReqMasterSendMail::rd() const {
  // @@protoc_insertion_point(field_list:ReqMasterSendMail.rd)
  return rd_;
}

// string sendName = 5;
inline void ReqMasterSendMail::clear_sendname() {
  sendname_.ClearToEmpty();
}
inline const std::string& ReqMasterSendMail::sendname() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.sendName)
  return _internal_sendname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqMasterSendMail::set_sendname(ArgT0&& arg0, ArgT... args) {
 
 sendname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.sendName)
}
inline std::string* ReqMasterSendMail::mutable_sendname() {
  std::string* _s = _internal_mutable_sendname();
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.sendName)
  return _s;
}
inline const std::string& ReqMasterSendMail::_internal_sendname() const {
  return sendname_.Get();
}
inline void ReqMasterSendMail::_internal_set_sendname(const std::string& value) {
  
  sendname_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::_internal_mutable_sendname() {
  
  return sendname_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::release_sendname() {
  // @@protoc_insertion_point(field_release:ReqMasterSendMail.sendName)
  return sendname_.Release();
}
inline void ReqMasterSendMail::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocated(sendname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sendname_.IsDefault()) {
    sendname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqMasterSendMail.sendName)
}

// uint32 sendTime = 6;
inline void ReqMasterSendMail::clear_sendtime() {
  sendtime_ = 0u;
}
inline uint32_t ReqMasterSendMail::_internal_sendtime() const {
  return sendtime_;
}
inline uint32_t ReqMasterSendMail::sendtime() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.sendTime)
  return _internal_sendtime();
}
inline void ReqMasterSendMail::_internal_set_sendtime(uint32_t value) {
  
  sendtime_ = value;
}
inline void ReqMasterSendMail::set_sendtime(uint32_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.sendTime)
}

// string desc = 7;
inline void ReqMasterSendMail::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ReqMasterSendMail::desc() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqMasterSendMail::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.desc)
}
inline std::string* ReqMasterSendMail::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.desc)
  return _s;
}
inline const std::string& ReqMasterSendMail::_internal_desc() const {
  return desc_.Get();
}
inline void ReqMasterSendMail::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::release_desc() {
  // @@protoc_insertion_point(field_release:ReqMasterSendMail.desc)
  return desc_.Release();
}
inline void ReqMasterSendMail::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqMasterSendMail.desc)
}

// string extra = 8;
inline void ReqMasterSendMail::clear_extra() {
  extra_.ClearToEmpty();
}
inline const std::string& ReqMasterSendMail::extra() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqMasterSendMail::set_extra(ArgT0&& arg0, ArgT... args) {
 
 extra_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.extra)
}
inline std::string* ReqMasterSendMail::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:ReqMasterSendMail.extra)
  return _s;
}
inline const std::string& ReqMasterSendMail::_internal_extra() const {
  return extra_.Get();
}
inline void ReqMasterSendMail::_internal_set_extra(const std::string& value) {
  
  extra_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::_internal_mutable_extra() {
  
  return extra_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqMasterSendMail::release_extra() {
  // @@protoc_insertion_point(field_release:ReqMasterSendMail.extra)
  return extra_.Release();
}
inline void ReqMasterSendMail::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_.IsDefault()) {
    extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqMasterSendMail.extra)
}

// uint64 pid = 9;
inline void ReqMasterSendMail::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqMasterSendMail::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqMasterSendMail::pid() const {
  // @@protoc_insertion_point(field_get:ReqMasterSendMail.pid)
  return _internal_pid();
}
inline void ReqMasterSendMail::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqMasterSendMail::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqMasterSendMail.pid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Mail_2eproto
