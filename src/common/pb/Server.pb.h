// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Player.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Server_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Server_2eproto;
class ReqCloseDbServer;
struct ReqCloseDbServerDefaultTypeInternal;
extern ReqCloseDbServerDefaultTypeInternal _ReqCloseDbServer_default_instance_;
class ReqDbCreatePlayer;
struct ReqDbCreatePlayerDefaultTypeInternal;
extern ReqDbCreatePlayerDefaultTypeInternal _ReqDbCreatePlayer_default_instance_;
class ReqDbEnterGame;
struct ReqDbEnterGameDefaultTypeInternal;
extern ReqDbEnterGameDefaultTypeInternal _ReqDbEnterGame_default_instance_;
class ReqDbSelectPlayer;
struct ReqDbSelectPlayerDefaultTypeInternal;
extern ReqDbSelectPlayerDefaultTypeInternal _ReqDbSelectPlayer_default_instance_;
class ReqDbUpdatePlayerName;
struct ReqDbUpdatePlayerNameDefaultTypeInternal;
extern ReqDbUpdatePlayerNameDefaultTypeInternal _ReqDbUpdatePlayerName_default_instance_;
class ReqDelGlobalData;
struct ReqDelGlobalDataDefaultTypeInternal;
extern ReqDelGlobalDataDefaultTypeInternal _ReqDelGlobalData_default_instance_;
class ReqDelRankData;
struct ReqDelRankDataDefaultTypeInternal;
extern ReqDelRankDataDefaultTypeInternal _ReqDelRankData_default_instance_;
class ReqGameQuit;
struct ReqGameQuitDefaultTypeInternal;
extern ReqGameQuitDefaultTypeInternal _ReqGameQuit_default_instance_;
class ReqGameReport;
struct ReqGameReportDefaultTypeInternal;
extern ReqGameReportDefaultTypeInternal _ReqGameReport_default_instance_;
class ReqRegPlayerBaseInfo;
struct ReqRegPlayerBaseInfoDefaultTypeInternal;
extern ReqRegPlayerBaseInfoDefaultTypeInternal _ReqRegPlayerBaseInfo_default_instance_;
class ReqSaveGlobalData;
struct ReqSaveGlobalDataDefaultTypeInternal;
extern ReqSaveGlobalDataDefaultTypeInternal _ReqSaveGlobalData_default_instance_;
class ReqSavePlayerBaseData;
struct ReqSavePlayerBaseDataDefaultTypeInternal;
extern ReqSavePlayerBaseDataDefaultTypeInternal _ReqSavePlayerBaseData_default_instance_;
class ReqSavePlayerModuleData;
struct ReqSavePlayerModuleDataDefaultTypeInternal;
extern ReqSavePlayerModuleDataDefaultTypeInternal _ReqSavePlayerModuleData_default_instance_;
class ReqSaveRankData;
struct ReqSaveRankDataDefaultTypeInternal;
extern ReqSaveRankDataDefaultTypeInternal _ReqSaveRankData_default_instance_;
class ReqUpdatePlayerBaseInfo;
struct ReqUpdatePlayerBaseInfoDefaultTypeInternal;
extern ReqUpdatePlayerBaseInfoDefaultTypeInternal _ReqUpdatePlayerBaseInfo_default_instance_;
class ResDbCreatePlayer;
struct ResDbCreatePlayerDefaultTypeInternal;
extern ResDbCreatePlayerDefaultTypeInternal _ResDbCreatePlayer_default_instance_;
class ResDbEnterGame;
struct ResDbEnterGameDefaultTypeInternal;
extern ResDbEnterGameDefaultTypeInternal _ResDbEnterGame_default_instance_;
class ResDbSelectPlayer;
struct ResDbSelectPlayerDefaultTypeInternal;
extern ResDbSelectPlayerDefaultTypeInternal _ResDbSelectPlayer_default_instance_;
class ResDbUpdatePlayerName;
struct ResDbUpdatePlayerNameDefaultTypeInternal;
extern ResDbUpdatePlayerNameDefaultTypeInternal _ResDbUpdatePlayerName_default_instance_;
class ResReturnPlayerBaseData;
struct ResReturnPlayerBaseDataDefaultTypeInternal;
extern ResReturnPlayerBaseDataDefaultTypeInternal _ResReturnPlayerBaseData_default_instance_;
class ResReturnPlayerModuleData;
struct ResReturnPlayerModuleDataDefaultTypeInternal;
extern ResReturnPlayerModuleDataDefaultTypeInternal _ResReturnPlayerModuleData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReqCloseDbServer* Arena::CreateMaybeMessage<::ReqCloseDbServer>(Arena*);
template<> ::ReqDbCreatePlayer* Arena::CreateMaybeMessage<::ReqDbCreatePlayer>(Arena*);
template<> ::ReqDbEnterGame* Arena::CreateMaybeMessage<::ReqDbEnterGame>(Arena*);
template<> ::ReqDbSelectPlayer* Arena::CreateMaybeMessage<::ReqDbSelectPlayer>(Arena*);
template<> ::ReqDbUpdatePlayerName* Arena::CreateMaybeMessage<::ReqDbUpdatePlayerName>(Arena*);
template<> ::ReqDelGlobalData* Arena::CreateMaybeMessage<::ReqDelGlobalData>(Arena*);
template<> ::ReqDelRankData* Arena::CreateMaybeMessage<::ReqDelRankData>(Arena*);
template<> ::ReqGameQuit* Arena::CreateMaybeMessage<::ReqGameQuit>(Arena*);
template<> ::ReqGameReport* Arena::CreateMaybeMessage<::ReqGameReport>(Arena*);
template<> ::ReqRegPlayerBaseInfo* Arena::CreateMaybeMessage<::ReqRegPlayerBaseInfo>(Arena*);
template<> ::ReqSaveGlobalData* Arena::CreateMaybeMessage<::ReqSaveGlobalData>(Arena*);
template<> ::ReqSavePlayerBaseData* Arena::CreateMaybeMessage<::ReqSavePlayerBaseData>(Arena*);
template<> ::ReqSavePlayerModuleData* Arena::CreateMaybeMessage<::ReqSavePlayerModuleData>(Arena*);
template<> ::ReqSaveRankData* Arena::CreateMaybeMessage<::ReqSaveRankData>(Arena*);
template<> ::ReqUpdatePlayerBaseInfo* Arena::CreateMaybeMessage<::ReqUpdatePlayerBaseInfo>(Arena*);
template<> ::ResDbCreatePlayer* Arena::CreateMaybeMessage<::ResDbCreatePlayer>(Arena*);
template<> ::ResDbEnterGame* Arena::CreateMaybeMessage<::ResDbEnterGame>(Arena*);
template<> ::ResDbSelectPlayer* Arena::CreateMaybeMessage<::ResDbSelectPlayer>(Arena*);
template<> ::ResDbUpdatePlayerName* Arena::CreateMaybeMessage<::ResDbUpdatePlayerName>(Arena*);
template<> ::ResReturnPlayerBaseData* Arena::CreateMaybeMessage<::ResReturnPlayerBaseData>(Arena*);
template<> ::ResReturnPlayerModuleData* Arena::CreateMaybeMessage<::ResReturnPlayerModuleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ServerErrorCode : int {
  Success = 0,
  NoMatch = 1,
  IsOnline = 2,
  PasswordError = 3,
  BannedAccount = 4,
  DbAuthError = 5,
  DbSelectError = 6,
  DbCreateError = 7,
  NoAccount = 8,
  BannedIp = 9,
  NameRepeated = 10,
  NameError = 11,
  NoAuth = 12,
  PidRepeated = 13,
  PlayerIsOnline = 14,
  PlayerIsNotOnline = 15,
  AccountExists = 16,
  AccountExistsDb = 17,
  DbErrorBase = 18,
  NoFindSession = 19,
  ReAccountNoPlayer = 20,
  NoAuthCreate = 21,
  NoAuthEnter = 22,
  LoadModuleDataError = 23,
  UpdateTimeError = 24,
  CreateSqlError = 25,
  NoRegEnterGame = 26,
  HavePidCreate = 27,
  NameToLongError = 28,
  AccountIllegal = 29,
  ServerErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerErrorCode_IsValid(int value);
constexpr ServerErrorCode ServerErrorCode_MIN = Success;
constexpr ServerErrorCode ServerErrorCode_MAX = AccountIllegal;
constexpr int ServerErrorCode_ARRAYSIZE = ServerErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerErrorCode_descriptor();
template<typename T>
inline const std::string& ServerErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerErrorCode_descriptor(), enum_t_value);
}
inline bool ServerErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerErrorCode>(
    ServerErrorCode_descriptor(), name, value);
}
// ===================================================================

class ReqDbSelectPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDbSelectPlayer) */ {
 public:
  inline ReqDbSelectPlayer() : ReqDbSelectPlayer(nullptr) {}
  ~ReqDbSelectPlayer() override;
  explicit PROTOBUF_CONSTEXPR ReqDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDbSelectPlayer(const ReqDbSelectPlayer& from);
  ReqDbSelectPlayer(ReqDbSelectPlayer&& from) noexcept
    : ReqDbSelectPlayer() {
    *this = ::std::move(from);
  }

  inline ReqDbSelectPlayer& operator=(const ReqDbSelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDbSelectPlayer& operator=(ReqDbSelectPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDbSelectPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDbSelectPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqDbSelectPlayer*>(
               &_ReqDbSelectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqDbSelectPlayer& a, ReqDbSelectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDbSelectPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDbSelectPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDbSelectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDbSelectPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDbSelectPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDbSelectPlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDbSelectPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDbSelectPlayer";
  }
  protected:
  explicit ReqDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kPfFieldNumber = 4,
    kCsessionIdFieldNumber = 1,
    kSessionIdFieldNumber = 5,
    kFromServerIdFieldNumber = 2,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string pf = 4;
  void clear_pf();
  const std::string& pf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pf();
  PROTOBUF_NODISCARD std::string* release_pf();
  void set_allocated_pf(std::string* pf);
  private:
  const std::string& _internal_pf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pf(const std::string& value);
  std::string* _internal_mutable_pf();
  public:

  // uint64 csessionId = 1;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 5;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 fromServerId = 2;
  void clear_fromserverid();
  uint32_t fromserverid() const;
  void set_fromserverid(uint32_t value);
  private:
  uint32_t _internal_fromserverid() const;
  void _internal_set_fromserverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDbSelectPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pf_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  uint32_t fromserverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResDbSelectPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResDbSelectPlayer) */ {
 public:
  inline ResDbSelectPlayer() : ResDbSelectPlayer(nullptr) {}
  ~ResDbSelectPlayer() override;
  explicit PROTOBUF_CONSTEXPR ResDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResDbSelectPlayer(const ResDbSelectPlayer& from);
  ResDbSelectPlayer(ResDbSelectPlayer&& from) noexcept
    : ResDbSelectPlayer() {
    *this = ::std::move(from);
  }

  inline ResDbSelectPlayer& operator=(const ResDbSelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDbSelectPlayer& operator=(ResDbSelectPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResDbSelectPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResDbSelectPlayer* internal_default_instance() {
    return reinterpret_cast<const ResDbSelectPlayer*>(
               &_ResDbSelectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResDbSelectPlayer& a, ResDbSelectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ResDbSelectPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResDbSelectPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResDbSelectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResDbSelectPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResDbSelectPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResDbSelectPlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDbSelectPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResDbSelectPlayer";
  }
  protected:
  explicit ResDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kCsessionIdFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kCodeFieldNumber = 3,
  };
  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 2;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 4;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 code = 3;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResDbSelectPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqDbCreatePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDbCreatePlayer) */ {
 public:
  inline ReqDbCreatePlayer() : ReqDbCreatePlayer(nullptr) {}
  ~ReqDbCreatePlayer() override;
  explicit PROTOBUF_CONSTEXPR ReqDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDbCreatePlayer(const ReqDbCreatePlayer& from);
  ReqDbCreatePlayer(ReqDbCreatePlayer&& from) noexcept
    : ReqDbCreatePlayer() {
    *this = ::std::move(from);
  }

  inline ReqDbCreatePlayer& operator=(const ReqDbCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDbCreatePlayer& operator=(ReqDbCreatePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDbCreatePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDbCreatePlayer* internal_default_instance() {
    return reinterpret_cast<const ReqDbCreatePlayer*>(
               &_ReqDbCreatePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqDbCreatePlayer& a, ReqDbCreatePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDbCreatePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDbCreatePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDbCreatePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDbCreatePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDbCreatePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDbCreatePlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDbCreatePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDbCreatePlayer";
  }
  protected:
  explicit ReqDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAccountFieldNumber = 5,
    kPfFieldNumber = 6,
    kPidFieldNumber = 3,
    kCsessionIdFieldNumber = 4,
    kSexFieldNumber = 1,
    kFromServerIdFieldNumber = 7,
    kSessionIdFieldNumber = 9,
    kServerIdFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string account = 5;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string pf = 6;
  void clear_pf();
  const std::string& pf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pf();
  PROTOBUF_NODISCARD std::string* release_pf();
  void set_allocated_pf(std::string* pf);
  private:
  const std::string& _internal_pf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pf(const std::string& value);
  std::string* _internal_mutable_pf();
  public:

  // uint64 pid = 3;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 4;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint32 sex = 1;
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // uint32 fromServerId = 7;
  void clear_fromserverid();
  uint32_t fromserverid() const;
  void set_fromserverid(uint32_t value);
  private:
  uint32_t _internal_fromserverid() const;
  void _internal_set_fromserverid(uint32_t value);
  public:

  // uint64 sessionId = 9;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 serverId = 8;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDbCreatePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pf_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint32_t sex_;
  uint32_t fromserverid_;
  uint64_t sessionid_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResDbCreatePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResDbCreatePlayer) */ {
 public:
  inline ResDbCreatePlayer() : ResDbCreatePlayer(nullptr) {}
  ~ResDbCreatePlayer() override;
  explicit PROTOBUF_CONSTEXPR ResDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResDbCreatePlayer(const ResDbCreatePlayer& from);
  ResDbCreatePlayer(ResDbCreatePlayer&& from) noexcept
    : ResDbCreatePlayer() {
    *this = ::std::move(from);
  }

  inline ResDbCreatePlayer& operator=(const ResDbCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDbCreatePlayer& operator=(ResDbCreatePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResDbCreatePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResDbCreatePlayer* internal_default_instance() {
    return reinterpret_cast<const ResDbCreatePlayer*>(
               &_ResDbCreatePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResDbCreatePlayer& a, ResDbCreatePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ResDbCreatePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResDbCreatePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResDbCreatePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResDbCreatePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResDbCreatePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResDbCreatePlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDbCreatePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResDbCreatePlayer";
  }
  protected:
  explicit ResDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSexFieldNumber = 1,
    kCodeFieldNumber = 4,
    kPidFieldNumber = 3,
    kCsessionIdFieldNumber = 5,
    kSessionIdFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 sex = 1;
  void clear_sex();
  uint32_t sex() const;
  void set_sex(uint32_t value);
  private:
  uint32_t _internal_sex() const;
  void _internal_set_sex(uint32_t value);
  public:

  // uint32 code = 4;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // uint64 pid = 3;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 5;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 7;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResDbCreatePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t sex_;
  uint32_t code_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqDbEnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDbEnterGame) */ {
 public:
  inline ReqDbEnterGame() : ReqDbEnterGame(nullptr) {}
  ~ReqDbEnterGame() override;
  explicit PROTOBUF_CONSTEXPR ReqDbEnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDbEnterGame(const ReqDbEnterGame& from);
  ReqDbEnterGame(ReqDbEnterGame&& from) noexcept
    : ReqDbEnterGame() {
    *this = ::std::move(from);
  }

  inline ReqDbEnterGame& operator=(const ReqDbEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDbEnterGame& operator=(ReqDbEnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDbEnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDbEnterGame* internal_default_instance() {
    return reinterpret_cast<const ReqDbEnterGame*>(
               &_ReqDbEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqDbEnterGame& a, ReqDbEnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDbEnterGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDbEnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDbEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDbEnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDbEnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDbEnterGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDbEnterGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDbEnterGame";
  }
  protected:
  explicit ReqDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kCsessionIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 2;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 3;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDbEnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResDbEnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResDbEnterGame) */ {
 public:
  inline ResDbEnterGame() : ResDbEnterGame(nullptr) {}
  ~ResDbEnterGame() override;
  explicit PROTOBUF_CONSTEXPR ResDbEnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResDbEnterGame(const ResDbEnterGame& from);
  ResDbEnterGame(ResDbEnterGame&& from) noexcept
    : ResDbEnterGame() {
    *this = ::std::move(from);
  }

  inline ResDbEnterGame& operator=(const ResDbEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDbEnterGame& operator=(ResDbEnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResDbEnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResDbEnterGame* internal_default_instance() {
    return reinterpret_cast<const ResDbEnterGame*>(
               &_ResDbEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResDbEnterGame& a, ResDbEnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ResDbEnterGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResDbEnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResDbEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResDbEnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResDbEnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResDbEnterGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDbEnterGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResDbEnterGame";
  }
  protected:
  explicit ResDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kCsessionIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 3;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 4;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 code = 2;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResDbEnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResReturnPlayerBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResReturnPlayerBaseData) */ {
 public:
  inline ResReturnPlayerBaseData() : ResReturnPlayerBaseData(nullptr) {}
  ~ResReturnPlayerBaseData() override;
  explicit PROTOBUF_CONSTEXPR ResReturnPlayerBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResReturnPlayerBaseData(const ResReturnPlayerBaseData& from);
  ResReturnPlayerBaseData(ResReturnPlayerBaseData&& from) noexcept
    : ResReturnPlayerBaseData() {
    *this = ::std::move(from);
  }

  inline ResReturnPlayerBaseData& operator=(const ResReturnPlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResReturnPlayerBaseData& operator=(ResReturnPlayerBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResReturnPlayerBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResReturnPlayerBaseData* internal_default_instance() {
    return reinterpret_cast<const ResReturnPlayerBaseData*>(
               &_ResReturnPlayerBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResReturnPlayerBaseData& a, ResReturnPlayerBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResReturnPlayerBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResReturnPlayerBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResReturnPlayerBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResReturnPlayerBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResReturnPlayerBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResReturnPlayerBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResReturnPlayerBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResReturnPlayerBaseData";
  }
  protected:
  explicit ResReturnPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPidFieldNumber = 1,
    kCsessionIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
  };
  // .PlayerBaseData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PlayerBaseData& data() const;
  PROTOBUF_NODISCARD ::PlayerBaseData* release_data();
  ::PlayerBaseData* mutable_data();
  void set_allocated_data(::PlayerBaseData* data);
  private:
  const ::PlayerBaseData& _internal_data() const;
  ::PlayerBaseData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PlayerBaseData* data);
  ::PlayerBaseData* unsafe_arena_release_data();

  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 csessionId = 3;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 4;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResReturnPlayerBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerBaseData* data_;
  uint64_t pid_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResReturnPlayerModuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResReturnPlayerModuleData) */ {
 public:
  inline ResReturnPlayerModuleData() : ResReturnPlayerModuleData(nullptr) {}
  ~ResReturnPlayerModuleData() override;
  explicit PROTOBUF_CONSTEXPR ResReturnPlayerModuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResReturnPlayerModuleData(const ResReturnPlayerModuleData& from);
  ResReturnPlayerModuleData(ResReturnPlayerModuleData&& from) noexcept
    : ResReturnPlayerModuleData() {
    *this = ::std::move(from);
  }

  inline ResReturnPlayerModuleData& operator=(const ResReturnPlayerModuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResReturnPlayerModuleData& operator=(ResReturnPlayerModuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResReturnPlayerModuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResReturnPlayerModuleData* internal_default_instance() {
    return reinterpret_cast<const ResReturnPlayerModuleData*>(
               &_ResReturnPlayerModuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResReturnPlayerModuleData& a, ResReturnPlayerModuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResReturnPlayerModuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResReturnPlayerModuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResReturnPlayerModuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResReturnPlayerModuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResReturnPlayerModuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResReturnPlayerModuleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResReturnPlayerModuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResReturnPlayerModuleData";
  }
  protected:
  explicit ResReturnPlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kCsessionIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kModuleIdFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 csessionId = 3;
  void clear_csessionid();
  uint64_t csessionid() const;
  void set_csessionid(uint64_t value);
  private:
  uint64_t _internal_csessionid() const;
  void _internal_set_csessionid(uint64_t value);
  public:

  // uint64 sessionId = 4;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 moduleId = 1;
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResReturnPlayerModuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint64_t csessionid_;
  uint64_t sessionid_;
  uint32_t moduleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqSavePlayerBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSavePlayerBaseData) */ {
 public:
  inline ReqSavePlayerBaseData() : ReqSavePlayerBaseData(nullptr) {}
  ~ReqSavePlayerBaseData() override;
  explicit PROTOBUF_CONSTEXPR ReqSavePlayerBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSavePlayerBaseData(const ReqSavePlayerBaseData& from);
  ReqSavePlayerBaseData(ReqSavePlayerBaseData&& from) noexcept
    : ReqSavePlayerBaseData() {
    *this = ::std::move(from);
  }

  inline ReqSavePlayerBaseData& operator=(const ReqSavePlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSavePlayerBaseData& operator=(ReqSavePlayerBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSavePlayerBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSavePlayerBaseData* internal_default_instance() {
    return reinterpret_cast<const ReqSavePlayerBaseData*>(
               &_ReqSavePlayerBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqSavePlayerBaseData& a, ReqSavePlayerBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSavePlayerBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSavePlayerBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSavePlayerBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSavePlayerBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSavePlayerBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSavePlayerBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSavePlayerBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSavePlayerBaseData";
  }
  protected:
  explicit ReqSavePlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPidFieldNumber = 1,
    kOptFieldNumber = 3,
  };
  // .PlayerBaseData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PlayerBaseData& data() const;
  PROTOBUF_NODISCARD ::PlayerBaseData* release_data();
  ::PlayerBaseData* mutable_data();
  void set_allocated_data(::PlayerBaseData* data);
  private:
  const ::PlayerBaseData& _internal_data() const;
  ::PlayerBaseData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PlayerBaseData* data);
  ::PlayerBaseData* unsafe_arena_release_data();

  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // int32 opt = 3;
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSavePlayerBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerBaseData* data_;
  uint64_t pid_;
  int32_t opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqSavePlayerModuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSavePlayerModuleData) */ {
 public:
  inline ReqSavePlayerModuleData() : ReqSavePlayerModuleData(nullptr) {}
  ~ReqSavePlayerModuleData() override;
  explicit PROTOBUF_CONSTEXPR ReqSavePlayerModuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSavePlayerModuleData(const ReqSavePlayerModuleData& from);
  ReqSavePlayerModuleData(ReqSavePlayerModuleData&& from) noexcept
    : ReqSavePlayerModuleData() {
    *this = ::std::move(from);
  }

  inline ReqSavePlayerModuleData& operator=(const ReqSavePlayerModuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSavePlayerModuleData& operator=(ReqSavePlayerModuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSavePlayerModuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSavePlayerModuleData* internal_default_instance() {
    return reinterpret_cast<const ReqSavePlayerModuleData*>(
               &_ReqSavePlayerModuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqSavePlayerModuleData& a, ReqSavePlayerModuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSavePlayerModuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSavePlayerModuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSavePlayerModuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSavePlayerModuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSavePlayerModuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSavePlayerModuleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSavePlayerModuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSavePlayerModuleData";
  }
  protected:
  explicit ReqSavePlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kPidFieldNumber = 1,
    kModuleIdFieldNumber = 2,
    kServerIdFieldNumber = 4,
  };
  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint32 moduleId = 2;
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // uint32 serverId = 4;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSavePlayerModuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint64_t pid_;
  uint32_t moduleid_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqGameReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqGameReport) */ {
 public:
  inline ReqGameReport() : ReqGameReport(nullptr) {}
  ~ReqGameReport() override;
  explicit PROTOBUF_CONSTEXPR ReqGameReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGameReport(const ReqGameReport& from);
  ReqGameReport(ReqGameReport&& from) noexcept
    : ReqGameReport() {
    *this = ::std::move(from);
  }

  inline ReqGameReport& operator=(const ReqGameReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGameReport& operator=(ReqGameReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGameReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGameReport* internal_default_instance() {
    return reinterpret_cast<const ReqGameReport*>(
               &_ReqGameReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqGameReport& a, ReqGameReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGameReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGameReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqGameReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqGameReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqGameReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqGameReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGameReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqGameReport";
  }
  protected:
  explicit ReqGameReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 serverId = 1;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqGameReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqGameQuit final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqGameQuit) */ {
 public:
  inline ReqGameQuit() : ReqGameQuit(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqGameQuit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGameQuit(const ReqGameQuit& from);
  ReqGameQuit(ReqGameQuit&& from) noexcept
    : ReqGameQuit() {
    *this = ::std::move(from);
  }

  inline ReqGameQuit& operator=(const ReqGameQuit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGameQuit& operator=(ReqGameQuit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGameQuit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGameQuit* internal_default_instance() {
    return reinterpret_cast<const ReqGameQuit*>(
               &_ReqGameQuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqGameQuit& a, ReqGameQuit& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGameQuit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGameQuit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqGameQuit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqGameQuit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqGameQuit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqGameQuit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqGameQuit";
  }
  protected:
  explicit ReqGameQuit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqGameQuit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqSaveRankData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSaveRankData) */ {
 public:
  inline ReqSaveRankData() : ReqSaveRankData(nullptr) {}
  ~ReqSaveRankData() override;
  explicit PROTOBUF_CONSTEXPR ReqSaveRankData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSaveRankData(const ReqSaveRankData& from);
  ReqSaveRankData(ReqSaveRankData&& from) noexcept
    : ReqSaveRankData() {
    *this = ::std::move(from);
  }

  inline ReqSaveRankData& operator=(const ReqSaveRankData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSaveRankData& operator=(ReqSaveRankData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSaveRankData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSaveRankData* internal_default_instance() {
    return reinterpret_cast<const ReqSaveRankData*>(
               &_ReqSaveRankData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqSaveRankData& a, ReqSaveRankData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSaveRankData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSaveRankData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSaveRankData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSaveRankData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSaveRankData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSaveRankData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSaveRankData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSaveRankData";
  }
  protected:
  explicit ReqSaveRankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kRankLenFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 serverId = 3;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // uint32 rankLen = 4;
  void clear_ranklen();
  uint32_t ranklen() const;
  void set_ranklen(uint32_t value);
  private:
  uint32_t _internal_ranklen() const;
  void _internal_set_ranklen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSaveRankData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t serverid_;
  uint32_t ranklen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqSaveGlobalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSaveGlobalData) */ {
 public:
  inline ReqSaveGlobalData() : ReqSaveGlobalData(nullptr) {}
  ~ReqSaveGlobalData() override;
  explicit PROTOBUF_CONSTEXPR ReqSaveGlobalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSaveGlobalData(const ReqSaveGlobalData& from);
  ReqSaveGlobalData(ReqSaveGlobalData&& from) noexcept
    : ReqSaveGlobalData() {
    *this = ::std::move(from);
  }

  inline ReqSaveGlobalData& operator=(const ReqSaveGlobalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSaveGlobalData& operator=(ReqSaveGlobalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSaveGlobalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSaveGlobalData* internal_default_instance() {
    return reinterpret_cast<const ReqSaveGlobalData*>(
               &_ReqSaveGlobalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReqSaveGlobalData& a, ReqSaveGlobalData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSaveGlobalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSaveGlobalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSaveGlobalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSaveGlobalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSaveGlobalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSaveGlobalData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSaveGlobalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSaveGlobalData";
  }
  protected:
  explicit ReqSaveGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kModuleIdFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 moduleId = 1;
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // uint32 serverId = 2;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSaveGlobalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t moduleid_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqDelRankData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDelRankData) */ {
 public:
  inline ReqDelRankData() : ReqDelRankData(nullptr) {}
  ~ReqDelRankData() override;
  explicit PROTOBUF_CONSTEXPR ReqDelRankData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDelRankData(const ReqDelRankData& from);
  ReqDelRankData(ReqDelRankData&& from) noexcept
    : ReqDelRankData() {
    *this = ::std::move(from);
  }

  inline ReqDelRankData& operator=(const ReqDelRankData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDelRankData& operator=(ReqDelRankData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDelRankData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDelRankData* internal_default_instance() {
    return reinterpret_cast<const ReqDelRankData*>(
               &_ReqDelRankData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReqDelRankData& a, ReqDelRankData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDelRankData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDelRankData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDelRankData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDelRankData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDelRankData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDelRankData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDelRankData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDelRankData";
  }
  protected:
  explicit ReqDelRankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kServeridFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 serverid = 2;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDelRankData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqDelGlobalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDelGlobalData) */ {
 public:
  inline ReqDelGlobalData() : ReqDelGlobalData(nullptr) {}
  ~ReqDelGlobalData() override;
  explicit PROTOBUF_CONSTEXPR ReqDelGlobalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDelGlobalData(const ReqDelGlobalData& from);
  ReqDelGlobalData(ReqDelGlobalData&& from) noexcept
    : ReqDelGlobalData() {
    *this = ::std::move(from);
  }

  inline ReqDelGlobalData& operator=(const ReqDelGlobalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDelGlobalData& operator=(ReqDelGlobalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDelGlobalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDelGlobalData* internal_default_instance() {
    return reinterpret_cast<const ReqDelGlobalData*>(
               &_ReqDelGlobalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReqDelGlobalData& a, ReqDelGlobalData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDelGlobalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDelGlobalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDelGlobalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDelGlobalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDelGlobalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDelGlobalData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDelGlobalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDelGlobalData";
  }
  protected:
  explicit ReqDelGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIdFieldNumber = 1,
  };
  // uint32 moduleId = 1;
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDelGlobalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t moduleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqRegPlayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqRegPlayerBaseInfo) */ {
 public:
  inline ReqRegPlayerBaseInfo() : ReqRegPlayerBaseInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqRegPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRegPlayerBaseInfo(const ReqRegPlayerBaseInfo& from);
  ReqRegPlayerBaseInfo(ReqRegPlayerBaseInfo&& from) noexcept
    : ReqRegPlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline ReqRegPlayerBaseInfo& operator=(const ReqRegPlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRegPlayerBaseInfo& operator=(ReqRegPlayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRegPlayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRegPlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const ReqRegPlayerBaseInfo*>(
               &_ReqRegPlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReqRegPlayerBaseInfo& a, ReqRegPlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRegPlayerBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRegPlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqRegPlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqRegPlayerBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqRegPlayerBaseInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqRegPlayerBaseInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqRegPlayerBaseInfo";
  }
  protected:
  explicit ReqRegPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqRegPlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePlayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqUpdatePlayerBaseInfo) */ {
 public:
  inline ReqUpdatePlayerBaseInfo() : ReqUpdatePlayerBaseInfo(nullptr) {}
  ~ReqUpdatePlayerBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR ReqUpdatePlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePlayerBaseInfo(const ReqUpdatePlayerBaseInfo& from);
  ReqUpdatePlayerBaseInfo(ReqUpdatePlayerBaseInfo&& from) noexcept
    : ReqUpdatePlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePlayerBaseInfo& operator=(const ReqUpdatePlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePlayerBaseInfo& operator=(ReqUpdatePlayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePlayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePlayerBaseInfo*>(
               &_ReqUpdatePlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReqUpdatePlayerBaseInfo& a, ReqUpdatePlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePlayerBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqUpdatePlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqUpdatePlayerBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqUpdatePlayerBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqUpdatePlayerBaseInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePlayerBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqUpdatePlayerBaseInfo";
  }
  protected:
  explicit ReqUpdatePlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 pid = 2;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqUpdatePlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint64_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqDbUpdatePlayerName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqDbUpdatePlayerName) */ {
 public:
  inline ReqDbUpdatePlayerName() : ReqDbUpdatePlayerName(nullptr) {}
  ~ReqDbUpdatePlayerName() override;
  explicit PROTOBUF_CONSTEXPR ReqDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDbUpdatePlayerName(const ReqDbUpdatePlayerName& from);
  ReqDbUpdatePlayerName(ReqDbUpdatePlayerName&& from) noexcept
    : ReqDbUpdatePlayerName() {
    *this = ::std::move(from);
  }

  inline ReqDbUpdatePlayerName& operator=(const ReqDbUpdatePlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDbUpdatePlayerName& operator=(ReqDbUpdatePlayerName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDbUpdatePlayerName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDbUpdatePlayerName* internal_default_instance() {
    return reinterpret_cast<const ReqDbUpdatePlayerName*>(
               &_ReqDbUpdatePlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReqDbUpdatePlayerName& a, ReqDbUpdatePlayerName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDbUpdatePlayerName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDbUpdatePlayerName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqDbUpdatePlayerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqDbUpdatePlayerName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqDbUpdatePlayerName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqDbUpdatePlayerName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDbUpdatePlayerName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqDbUpdatePlayerName";
  }
  protected:
  explicit ReqDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 pid = 2;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqDbUpdatePlayerName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ResDbUpdatePlayerName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResDbUpdatePlayerName) */ {
 public:
  inline ResDbUpdatePlayerName() : ResDbUpdatePlayerName(nullptr) {}
  ~ResDbUpdatePlayerName() override;
  explicit PROTOBUF_CONSTEXPR ResDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResDbUpdatePlayerName(const ResDbUpdatePlayerName& from);
  ResDbUpdatePlayerName(ResDbUpdatePlayerName&& from) noexcept
    : ResDbUpdatePlayerName() {
    *this = ::std::move(from);
  }

  inline ResDbUpdatePlayerName& operator=(const ResDbUpdatePlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDbUpdatePlayerName& operator=(ResDbUpdatePlayerName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResDbUpdatePlayerName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResDbUpdatePlayerName* internal_default_instance() {
    return reinterpret_cast<const ResDbUpdatePlayerName*>(
               &_ResDbUpdatePlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResDbUpdatePlayerName& a, ResDbUpdatePlayerName& b) {
    a.Swap(&b);
  }
  inline void Swap(ResDbUpdatePlayerName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResDbUpdatePlayerName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResDbUpdatePlayerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResDbUpdatePlayerName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResDbUpdatePlayerName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResDbUpdatePlayerName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDbUpdatePlayerName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResDbUpdatePlayerName";
  }
  protected:
  explicit ResDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 pid = 2;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint32 code = 3;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResDbUpdatePlayerName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t pid_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Server_2eproto;
};
// -------------------------------------------------------------------

class ReqCloseDbServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqCloseDbServer) */ {
 public:
  inline ReqCloseDbServer() : ReqCloseDbServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqCloseDbServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCloseDbServer(const ReqCloseDbServer& from);
  ReqCloseDbServer(ReqCloseDbServer&& from) noexcept
    : ReqCloseDbServer() {
    *this = ::std::move(from);
  }

  inline ReqCloseDbServer& operator=(const ReqCloseDbServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCloseDbServer& operator=(ReqCloseDbServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCloseDbServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCloseDbServer* internal_default_instance() {
    return reinterpret_cast<const ReqCloseDbServer*>(
               &_ReqCloseDbServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReqCloseDbServer& a, ReqCloseDbServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCloseDbServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCloseDbServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqCloseDbServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqCloseDbServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqCloseDbServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqCloseDbServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqCloseDbServer";
  }
  protected:
  explicit ReqCloseDbServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqCloseDbServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqDbSelectPlayer

// uint64 csessionId = 1;
inline void ReqDbSelectPlayer::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbSelectPlayer::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ReqDbSelectPlayer::csessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbSelectPlayer.csessionId)
  return _internal_csessionid();
}
inline void ReqDbSelectPlayer::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ReqDbSelectPlayer::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbSelectPlayer.csessionId)
}

// uint32 fromServerId = 2;
inline void ReqDbSelectPlayer::clear_fromserverid() {
  fromserverid_ = 0u;
}
inline uint32_t ReqDbSelectPlayer::_internal_fromserverid() const {
  return fromserverid_;
}
inline uint32_t ReqDbSelectPlayer::fromserverid() const {
  // @@protoc_insertion_point(field_get:ReqDbSelectPlayer.fromServerId)
  return _internal_fromserverid();
}
inline void ReqDbSelectPlayer::_internal_set_fromserverid(uint32_t value) {
  
  fromserverid_ = value;
}
inline void ReqDbSelectPlayer::set_fromserverid(uint32_t value) {
  _internal_set_fromserverid(value);
  // @@protoc_insertion_point(field_set:ReqDbSelectPlayer.fromServerId)
}

// string account = 3;
inline void ReqDbSelectPlayer::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqDbSelectPlayer::account() const {
  // @@protoc_insertion_point(field_get:ReqDbSelectPlayer.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbSelectPlayer::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbSelectPlayer.account)
}
inline std::string* ReqDbSelectPlayer::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:ReqDbSelectPlayer.account)
  return _s;
}
inline const std::string& ReqDbSelectPlayer::_internal_account() const {
  return account_.Get();
}
inline void ReqDbSelectPlayer::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbSelectPlayer::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbSelectPlayer::release_account() {
  // @@protoc_insertion_point(field_release:ReqDbSelectPlayer.account)
  return account_.Release();
}
inline void ReqDbSelectPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbSelectPlayer.account)
}

// string pf = 4;
inline void ReqDbSelectPlayer::clear_pf() {
  pf_.ClearToEmpty();
}
inline const std::string& ReqDbSelectPlayer::pf() const {
  // @@protoc_insertion_point(field_get:ReqDbSelectPlayer.pf)
  return _internal_pf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbSelectPlayer::set_pf(ArgT0&& arg0, ArgT... args) {
 
 pf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbSelectPlayer.pf)
}
inline std::string* ReqDbSelectPlayer::mutable_pf() {
  std::string* _s = _internal_mutable_pf();
  // @@protoc_insertion_point(field_mutable:ReqDbSelectPlayer.pf)
  return _s;
}
inline const std::string& ReqDbSelectPlayer::_internal_pf() const {
  return pf_.Get();
}
inline void ReqDbSelectPlayer::_internal_set_pf(const std::string& value) {
  
  pf_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbSelectPlayer::_internal_mutable_pf() {
  
  return pf_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbSelectPlayer::release_pf() {
  // @@protoc_insertion_point(field_release:ReqDbSelectPlayer.pf)
  return pf_.Release();
}
inline void ReqDbSelectPlayer::set_allocated_pf(std::string* pf) {
  if (pf != nullptr) {
    
  } else {
    
  }
  pf_.SetAllocated(pf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pf_.IsDefault()) {
    pf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbSelectPlayer.pf)
}

// uint64 sessionId = 5;
inline void ReqDbSelectPlayer::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbSelectPlayer::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ReqDbSelectPlayer::sessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbSelectPlayer.sessionId)
  return _internal_sessionid();
}
inline void ReqDbSelectPlayer::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ReqDbSelectPlayer::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbSelectPlayer.sessionId)
}

// -------------------------------------------------------------------

// ResDbSelectPlayer

// uint64 pid = 1;
inline void ResDbSelectPlayer::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResDbSelectPlayer::_internal_pid() const {
  return pid_;
}
inline uint64_t ResDbSelectPlayer::pid() const {
  // @@protoc_insertion_point(field_get:ResDbSelectPlayer.pid)
  return _internal_pid();
}
inline void ResDbSelectPlayer::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResDbSelectPlayer::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResDbSelectPlayer.pid)
}

// uint64 csessionId = 2;
inline void ResDbSelectPlayer::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ResDbSelectPlayer::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ResDbSelectPlayer::csessionid() const {
  // @@protoc_insertion_point(field_get:ResDbSelectPlayer.csessionId)
  return _internal_csessionid();
}
inline void ResDbSelectPlayer::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ResDbSelectPlayer::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ResDbSelectPlayer.csessionId)
}

// uint32 code = 3;
inline void ResDbSelectPlayer::clear_code() {
  code_ = 0u;
}
inline uint32_t ResDbSelectPlayer::_internal_code() const {
  return code_;
}
inline uint32_t ResDbSelectPlayer::code() const {
  // @@protoc_insertion_point(field_get:ResDbSelectPlayer.code)
  return _internal_code();
}
inline void ResDbSelectPlayer::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void ResDbSelectPlayer::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ResDbSelectPlayer.code)
}

// uint64 sessionId = 4;
inline void ResDbSelectPlayer::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ResDbSelectPlayer::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ResDbSelectPlayer::sessionid() const {
  // @@protoc_insertion_point(field_get:ResDbSelectPlayer.sessionId)
  return _internal_sessionid();
}
inline void ResDbSelectPlayer::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ResDbSelectPlayer::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ResDbSelectPlayer.sessionId)
}

// -------------------------------------------------------------------

// ReqDbCreatePlayer

// uint32 sex = 1;
inline void ReqDbCreatePlayer::clear_sex() {
  sex_ = 0u;
}
inline uint32_t ReqDbCreatePlayer::_internal_sex() const {
  return sex_;
}
inline uint32_t ReqDbCreatePlayer::sex() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.sex)
  return _internal_sex();
}
inline void ReqDbCreatePlayer::_internal_set_sex(uint32_t value) {
  
  sex_ = value;
}
inline void ReqDbCreatePlayer::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.sex)
}

// string name = 2;
inline void ReqDbCreatePlayer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqDbCreatePlayer::name() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbCreatePlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.name)
}
inline std::string* ReqDbCreatePlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ReqDbCreatePlayer.name)
  return _s;
}
inline const std::string& ReqDbCreatePlayer::_internal_name() const {
  return name_.Get();
}
inline void ReqDbCreatePlayer::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::release_name() {
  // @@protoc_insertion_point(field_release:ReqDbCreatePlayer.name)
  return name_.Release();
}
inline void ReqDbCreatePlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbCreatePlayer.name)
}

// uint64 pid = 3;
inline void ReqDbCreatePlayer::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqDbCreatePlayer::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqDbCreatePlayer::pid() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.pid)
  return _internal_pid();
}
inline void ReqDbCreatePlayer::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqDbCreatePlayer::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.pid)
}

// uint64 csessionId = 4;
inline void ReqDbCreatePlayer::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbCreatePlayer::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ReqDbCreatePlayer::csessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.csessionId)
  return _internal_csessionid();
}
inline void ReqDbCreatePlayer::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ReqDbCreatePlayer::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.csessionId)
}

// string account = 5;
inline void ReqDbCreatePlayer::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqDbCreatePlayer::account() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbCreatePlayer::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.account)
}
inline std::string* ReqDbCreatePlayer::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:ReqDbCreatePlayer.account)
  return _s;
}
inline const std::string& ReqDbCreatePlayer::_internal_account() const {
  return account_.Get();
}
inline void ReqDbCreatePlayer::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::release_account() {
  // @@protoc_insertion_point(field_release:ReqDbCreatePlayer.account)
  return account_.Release();
}
inline void ReqDbCreatePlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbCreatePlayer.account)
}

// string pf = 6;
inline void ReqDbCreatePlayer::clear_pf() {
  pf_.ClearToEmpty();
}
inline const std::string& ReqDbCreatePlayer::pf() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.pf)
  return _internal_pf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbCreatePlayer::set_pf(ArgT0&& arg0, ArgT... args) {
 
 pf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.pf)
}
inline std::string* ReqDbCreatePlayer::mutable_pf() {
  std::string* _s = _internal_mutable_pf();
  // @@protoc_insertion_point(field_mutable:ReqDbCreatePlayer.pf)
  return _s;
}
inline const std::string& ReqDbCreatePlayer::_internal_pf() const {
  return pf_.Get();
}
inline void ReqDbCreatePlayer::_internal_set_pf(const std::string& value) {
  
  pf_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::_internal_mutable_pf() {
  
  return pf_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbCreatePlayer::release_pf() {
  // @@protoc_insertion_point(field_release:ReqDbCreatePlayer.pf)
  return pf_.Release();
}
inline void ReqDbCreatePlayer::set_allocated_pf(std::string* pf) {
  if (pf != nullptr) {
    
  } else {
    
  }
  pf_.SetAllocated(pf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pf_.IsDefault()) {
    pf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbCreatePlayer.pf)
}

// uint32 fromServerId = 7;
inline void ReqDbCreatePlayer::clear_fromserverid() {
  fromserverid_ = 0u;
}
inline uint32_t ReqDbCreatePlayer::_internal_fromserverid() const {
  return fromserverid_;
}
inline uint32_t ReqDbCreatePlayer::fromserverid() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.fromServerId)
  return _internal_fromserverid();
}
inline void ReqDbCreatePlayer::_internal_set_fromserverid(uint32_t value) {
  
  fromserverid_ = value;
}
inline void ReqDbCreatePlayer::set_fromserverid(uint32_t value) {
  _internal_set_fromserverid(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.fromServerId)
}

// uint32 serverId = 8;
inline void ReqDbCreatePlayer::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqDbCreatePlayer::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqDbCreatePlayer::serverid() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.serverId)
  return _internal_serverid();
}
inline void ReqDbCreatePlayer::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqDbCreatePlayer::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.serverId)
}

// uint64 sessionId = 9;
inline void ReqDbCreatePlayer::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbCreatePlayer::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ReqDbCreatePlayer::sessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbCreatePlayer.sessionId)
  return _internal_sessionid();
}
inline void ReqDbCreatePlayer::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ReqDbCreatePlayer::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbCreatePlayer.sessionId)
}

// -------------------------------------------------------------------

// ResDbCreatePlayer

// uint32 sex = 1;
inline void ResDbCreatePlayer::clear_sex() {
  sex_ = 0u;
}
inline uint32_t ResDbCreatePlayer::_internal_sex() const {
  return sex_;
}
inline uint32_t ResDbCreatePlayer::sex() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.sex)
  return _internal_sex();
}
inline void ResDbCreatePlayer::_internal_set_sex(uint32_t value) {
  
  sex_ = value;
}
inline void ResDbCreatePlayer::set_sex(uint32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.sex)
}

// string name = 2;
inline void ResDbCreatePlayer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResDbCreatePlayer::name() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResDbCreatePlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.name)
}
inline std::string* ResDbCreatePlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ResDbCreatePlayer.name)
  return _s;
}
inline const std::string& ResDbCreatePlayer::_internal_name() const {
  return name_.Get();
}
inline void ResDbCreatePlayer::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResDbCreatePlayer::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResDbCreatePlayer::release_name() {
  // @@protoc_insertion_point(field_release:ResDbCreatePlayer.name)
  return name_.Release();
}
inline void ResDbCreatePlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResDbCreatePlayer.name)
}

// uint64 pid = 3;
inline void ResDbCreatePlayer::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResDbCreatePlayer::_internal_pid() const {
  return pid_;
}
inline uint64_t ResDbCreatePlayer::pid() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.pid)
  return _internal_pid();
}
inline void ResDbCreatePlayer::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResDbCreatePlayer::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.pid)
}

// uint32 code = 4;
inline void ResDbCreatePlayer::clear_code() {
  code_ = 0u;
}
inline uint32_t ResDbCreatePlayer::_internal_code() const {
  return code_;
}
inline uint32_t ResDbCreatePlayer::code() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.code)
  return _internal_code();
}
inline void ResDbCreatePlayer::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void ResDbCreatePlayer::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.code)
}

// uint64 csessionId = 5;
inline void ResDbCreatePlayer::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ResDbCreatePlayer::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ResDbCreatePlayer::csessionid() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.csessionId)
  return _internal_csessionid();
}
inline void ResDbCreatePlayer::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ResDbCreatePlayer::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.csessionId)
}

// uint64 sessionId = 7;
inline void ResDbCreatePlayer::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ResDbCreatePlayer::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ResDbCreatePlayer::sessionid() const {
  // @@protoc_insertion_point(field_get:ResDbCreatePlayer.sessionId)
  return _internal_sessionid();
}
inline void ResDbCreatePlayer::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ResDbCreatePlayer::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ResDbCreatePlayer.sessionId)
}

// -------------------------------------------------------------------

// ReqDbEnterGame

// uint64 pid = 1;
inline void ReqDbEnterGame::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqDbEnterGame::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqDbEnterGame::pid() const {
  // @@protoc_insertion_point(field_get:ReqDbEnterGame.pid)
  return _internal_pid();
}
inline void ReqDbEnterGame::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqDbEnterGame::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqDbEnterGame.pid)
}

// uint64 csessionId = 2;
inline void ReqDbEnterGame::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbEnterGame::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ReqDbEnterGame::csessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbEnterGame.csessionId)
  return _internal_csessionid();
}
inline void ReqDbEnterGame::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ReqDbEnterGame::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbEnterGame.csessionId)
}

// uint64 sessionId = 3;
inline void ReqDbEnterGame::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ReqDbEnterGame::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ReqDbEnterGame::sessionid() const {
  // @@protoc_insertion_point(field_get:ReqDbEnterGame.sessionId)
  return _internal_sessionid();
}
inline void ReqDbEnterGame::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ReqDbEnterGame::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ReqDbEnterGame.sessionId)
}

// -------------------------------------------------------------------

// ResDbEnterGame

// uint64 pid = 1;
inline void ResDbEnterGame::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResDbEnterGame::_internal_pid() const {
  return pid_;
}
inline uint64_t ResDbEnterGame::pid() const {
  // @@protoc_insertion_point(field_get:ResDbEnterGame.pid)
  return _internal_pid();
}
inline void ResDbEnterGame::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResDbEnterGame::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResDbEnterGame.pid)
}

// uint32 code = 2;
inline void ResDbEnterGame::clear_code() {
  code_ = 0u;
}
inline uint32_t ResDbEnterGame::_internal_code() const {
  return code_;
}
inline uint32_t ResDbEnterGame::code() const {
  // @@protoc_insertion_point(field_get:ResDbEnterGame.code)
  return _internal_code();
}
inline void ResDbEnterGame::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void ResDbEnterGame::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ResDbEnterGame.code)
}

// uint64 csessionId = 3;
inline void ResDbEnterGame::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ResDbEnterGame::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ResDbEnterGame::csessionid() const {
  // @@protoc_insertion_point(field_get:ResDbEnterGame.csessionId)
  return _internal_csessionid();
}
inline void ResDbEnterGame::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ResDbEnterGame::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ResDbEnterGame.csessionId)
}

// uint64 sessionId = 4;
inline void ResDbEnterGame::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ResDbEnterGame::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ResDbEnterGame::sessionid() const {
  // @@protoc_insertion_point(field_get:ResDbEnterGame.sessionId)
  return _internal_sessionid();
}
inline void ResDbEnterGame::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ResDbEnterGame::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ResDbEnterGame.sessionId)
}

// -------------------------------------------------------------------

// ResReturnPlayerBaseData

// uint64 pid = 1;
inline void ResReturnPlayerBaseData::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResReturnPlayerBaseData::_internal_pid() const {
  return pid_;
}
inline uint64_t ResReturnPlayerBaseData::pid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerBaseData.pid)
  return _internal_pid();
}
inline void ResReturnPlayerBaseData::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResReturnPlayerBaseData::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerBaseData.pid)
}

// .PlayerBaseData data = 2;
inline bool ResReturnPlayerBaseData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ResReturnPlayerBaseData::has_data() const {
  return _internal_has_data();
}
inline const ::PlayerBaseData& ResReturnPlayerBaseData::_internal_data() const {
  const ::PlayerBaseData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerBaseData&>(
      ::_PlayerBaseData_default_instance_);
}
inline const ::PlayerBaseData& ResReturnPlayerBaseData::data() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerBaseData.data)
  return _internal_data();
}
inline void ResReturnPlayerBaseData::unsafe_arena_set_allocated_data(
    ::PlayerBaseData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResReturnPlayerBaseData.data)
}
inline ::PlayerBaseData* ResReturnPlayerBaseData::release_data() {
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerBaseData* ResReturnPlayerBaseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:ResReturnPlayerBaseData.data)
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PlayerBaseData* ResReturnPlayerBaseData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerBaseData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PlayerBaseData* ResReturnPlayerBaseData::mutable_data() {
  ::PlayerBaseData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ResReturnPlayerBaseData.data)
  return _msg;
}
inline void ResReturnPlayerBaseData::set_allocated_data(::PlayerBaseData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ResReturnPlayerBaseData.data)
}

// uint64 csessionId = 3;
inline void ResReturnPlayerBaseData::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ResReturnPlayerBaseData::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ResReturnPlayerBaseData::csessionid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerBaseData.csessionId)
  return _internal_csessionid();
}
inline void ResReturnPlayerBaseData::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ResReturnPlayerBaseData::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerBaseData.csessionId)
}

// uint64 sessionId = 4;
inline void ResReturnPlayerBaseData::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ResReturnPlayerBaseData::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ResReturnPlayerBaseData::sessionid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerBaseData.sessionId)
  return _internal_sessionid();
}
inline void ResReturnPlayerBaseData::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ResReturnPlayerBaseData::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerBaseData.sessionId)
}

// -------------------------------------------------------------------

// ResReturnPlayerModuleData

// uint32 moduleId = 1;
inline void ResReturnPlayerModuleData::clear_moduleid() {
  moduleid_ = 0u;
}
inline uint32_t ResReturnPlayerModuleData::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t ResReturnPlayerModuleData::moduleid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerModuleData.moduleId)
  return _internal_moduleid();
}
inline void ResReturnPlayerModuleData::_internal_set_moduleid(uint32_t value) {
  
  moduleid_ = value;
}
inline void ResReturnPlayerModuleData::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerModuleData.moduleId)
}

// string data = 2;
inline void ResReturnPlayerModuleData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResReturnPlayerModuleData::data() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerModuleData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResReturnPlayerModuleData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResReturnPlayerModuleData.data)
}
inline std::string* ResReturnPlayerModuleData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ResReturnPlayerModuleData.data)
  return _s;
}
inline const std::string& ResReturnPlayerModuleData::_internal_data() const {
  return data_.Get();
}
inline void ResReturnPlayerModuleData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResReturnPlayerModuleData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResReturnPlayerModuleData::release_data() {
  // @@protoc_insertion_point(field_release:ResReturnPlayerModuleData.data)
  return data_.Release();
}
inline void ResReturnPlayerModuleData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResReturnPlayerModuleData.data)
}

// uint64 csessionId = 3;
inline void ResReturnPlayerModuleData::clear_csessionid() {
  csessionid_ = uint64_t{0u};
}
inline uint64_t ResReturnPlayerModuleData::_internal_csessionid() const {
  return csessionid_;
}
inline uint64_t ResReturnPlayerModuleData::csessionid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerModuleData.csessionId)
  return _internal_csessionid();
}
inline void ResReturnPlayerModuleData::_internal_set_csessionid(uint64_t value) {
  
  csessionid_ = value;
}
inline void ResReturnPlayerModuleData::set_csessionid(uint64_t value) {
  _internal_set_csessionid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerModuleData.csessionId)
}

// uint64 sessionId = 4;
inline void ResReturnPlayerModuleData::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t ResReturnPlayerModuleData::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t ResReturnPlayerModuleData::sessionid() const {
  // @@protoc_insertion_point(field_get:ResReturnPlayerModuleData.sessionId)
  return _internal_sessionid();
}
inline void ResReturnPlayerModuleData::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void ResReturnPlayerModuleData::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:ResReturnPlayerModuleData.sessionId)
}

// -------------------------------------------------------------------

// ReqSavePlayerBaseData

// uint64 pid = 1;
inline void ReqSavePlayerBaseData::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqSavePlayerBaseData::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqSavePlayerBaseData::pid() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerBaseData.pid)
  return _internal_pid();
}
inline void ReqSavePlayerBaseData::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqSavePlayerBaseData::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqSavePlayerBaseData.pid)
}

// .PlayerBaseData data = 2;
inline bool ReqSavePlayerBaseData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ReqSavePlayerBaseData::has_data() const {
  return _internal_has_data();
}
inline const ::PlayerBaseData& ReqSavePlayerBaseData::_internal_data() const {
  const ::PlayerBaseData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerBaseData&>(
      ::_PlayerBaseData_default_instance_);
}
inline const ::PlayerBaseData& ReqSavePlayerBaseData::data() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerBaseData.data)
  return _internal_data();
}
inline void ReqSavePlayerBaseData::unsafe_arena_set_allocated_data(
    ::PlayerBaseData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReqSavePlayerBaseData.data)
}
inline ::PlayerBaseData* ReqSavePlayerBaseData::release_data() {
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerBaseData* ReqSavePlayerBaseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:ReqSavePlayerBaseData.data)
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PlayerBaseData* ReqSavePlayerBaseData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerBaseData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PlayerBaseData* ReqSavePlayerBaseData::mutable_data() {
  ::PlayerBaseData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ReqSavePlayerBaseData.data)
  return _msg;
}
inline void ReqSavePlayerBaseData::set_allocated_data(::PlayerBaseData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ReqSavePlayerBaseData.data)
}

// int32 opt = 3;
inline void ReqSavePlayerBaseData::clear_opt() {
  opt_ = 0;
}
inline int32_t ReqSavePlayerBaseData::_internal_opt() const {
  return opt_;
}
inline int32_t ReqSavePlayerBaseData::opt() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerBaseData.opt)
  return _internal_opt();
}
inline void ReqSavePlayerBaseData::_internal_set_opt(int32_t value) {
  
  opt_ = value;
}
inline void ReqSavePlayerBaseData::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:ReqSavePlayerBaseData.opt)
}

// -------------------------------------------------------------------

// ReqSavePlayerModuleData

// uint64 pid = 1;
inline void ReqSavePlayerModuleData::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqSavePlayerModuleData::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqSavePlayerModuleData::pid() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerModuleData.pid)
  return _internal_pid();
}
inline void ReqSavePlayerModuleData::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqSavePlayerModuleData::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqSavePlayerModuleData.pid)
}

// uint32 moduleId = 2;
inline void ReqSavePlayerModuleData::clear_moduleid() {
  moduleid_ = 0u;
}
inline uint32_t ReqSavePlayerModuleData::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t ReqSavePlayerModuleData::moduleid() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerModuleData.moduleId)
  return _internal_moduleid();
}
inline void ReqSavePlayerModuleData::_internal_set_moduleid(uint32_t value) {
  
  moduleid_ = value;
}
inline void ReqSavePlayerModuleData::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:ReqSavePlayerModuleData.moduleId)
}

// string data = 3;
inline void ReqSavePlayerModuleData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReqSavePlayerModuleData::data() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerModuleData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSavePlayerModuleData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSavePlayerModuleData.data)
}
inline std::string* ReqSavePlayerModuleData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ReqSavePlayerModuleData.data)
  return _s;
}
inline const std::string& ReqSavePlayerModuleData::_internal_data() const {
  return data_.Get();
}
inline void ReqSavePlayerModuleData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSavePlayerModuleData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSavePlayerModuleData::release_data() {
  // @@protoc_insertion_point(field_release:ReqSavePlayerModuleData.data)
  return data_.Release();
}
inline void ReqSavePlayerModuleData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSavePlayerModuleData.data)
}

// uint32 serverId = 4;
inline void ReqSavePlayerModuleData::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqSavePlayerModuleData::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqSavePlayerModuleData::serverid() const {
  // @@protoc_insertion_point(field_get:ReqSavePlayerModuleData.serverId)
  return _internal_serverid();
}
inline void ReqSavePlayerModuleData::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqSavePlayerModuleData::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqSavePlayerModuleData.serverId)
}

// -------------------------------------------------------------------

// ReqGameReport

// uint32 serverId = 1;
inline void ReqGameReport::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqGameReport::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqGameReport::serverid() const {
  // @@protoc_insertion_point(field_get:ReqGameReport.serverId)
  return _internal_serverid();
}
inline void ReqGameReport::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqGameReport::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqGameReport.serverId)
}

// -------------------------------------------------------------------

// ReqGameQuit

// -------------------------------------------------------------------

// ReqSaveRankData

// string name = 1;
inline void ReqSaveRankData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqSaveRankData::name() const {
  // @@protoc_insertion_point(field_get:ReqSaveRankData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSaveRankData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSaveRankData.name)
}
inline std::string* ReqSaveRankData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ReqSaveRankData.name)
  return _s;
}
inline const std::string& ReqSaveRankData::_internal_name() const {
  return name_.Get();
}
inline void ReqSaveRankData::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSaveRankData::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSaveRankData::release_name() {
  // @@protoc_insertion_point(field_release:ReqSaveRankData.name)
  return name_.Release();
}
inline void ReqSaveRankData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSaveRankData.name)
}

// string data = 2;
inline void ReqSaveRankData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReqSaveRankData::data() const {
  // @@protoc_insertion_point(field_get:ReqSaveRankData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSaveRankData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSaveRankData.data)
}
inline std::string* ReqSaveRankData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ReqSaveRankData.data)
  return _s;
}
inline const std::string& ReqSaveRankData::_internal_data() const {
  return data_.Get();
}
inline void ReqSaveRankData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSaveRankData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSaveRankData::release_data() {
  // @@protoc_insertion_point(field_release:ReqSaveRankData.data)
  return data_.Release();
}
inline void ReqSaveRankData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSaveRankData.data)
}

// uint32 serverId = 3;
inline void ReqSaveRankData::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqSaveRankData::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqSaveRankData::serverid() const {
  // @@protoc_insertion_point(field_get:ReqSaveRankData.serverId)
  return _internal_serverid();
}
inline void ReqSaveRankData::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqSaveRankData::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqSaveRankData.serverId)
}

// uint32 rankLen = 4;
inline void ReqSaveRankData::clear_ranklen() {
  ranklen_ = 0u;
}
inline uint32_t ReqSaveRankData::_internal_ranklen() const {
  return ranklen_;
}
inline uint32_t ReqSaveRankData::ranklen() const {
  // @@protoc_insertion_point(field_get:ReqSaveRankData.rankLen)
  return _internal_ranklen();
}
inline void ReqSaveRankData::_internal_set_ranklen(uint32_t value) {
  
  ranklen_ = value;
}
inline void ReqSaveRankData::set_ranklen(uint32_t value) {
  _internal_set_ranklen(value);
  // @@protoc_insertion_point(field_set:ReqSaveRankData.rankLen)
}

// -------------------------------------------------------------------

// ReqSaveGlobalData

// uint32 moduleId = 1;
inline void ReqSaveGlobalData::clear_moduleid() {
  moduleid_ = 0u;
}
inline uint32_t ReqSaveGlobalData::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t ReqSaveGlobalData::moduleid() const {
  // @@protoc_insertion_point(field_get:ReqSaveGlobalData.moduleId)
  return _internal_moduleid();
}
inline void ReqSaveGlobalData::_internal_set_moduleid(uint32_t value) {
  
  moduleid_ = value;
}
inline void ReqSaveGlobalData::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:ReqSaveGlobalData.moduleId)
}

// uint32 serverId = 2;
inline void ReqSaveGlobalData::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqSaveGlobalData::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqSaveGlobalData::serverid() const {
  // @@protoc_insertion_point(field_get:ReqSaveGlobalData.serverId)
  return _internal_serverid();
}
inline void ReqSaveGlobalData::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqSaveGlobalData::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqSaveGlobalData.serverId)
}

// string data = 3;
inline void ReqSaveGlobalData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReqSaveGlobalData::data() const {
  // @@protoc_insertion_point(field_get:ReqSaveGlobalData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSaveGlobalData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqSaveGlobalData.data)
}
inline std::string* ReqSaveGlobalData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ReqSaveGlobalData.data)
  return _s;
}
inline const std::string& ReqSaveGlobalData::_internal_data() const {
  return data_.Get();
}
inline void ReqSaveGlobalData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSaveGlobalData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSaveGlobalData::release_data() {
  // @@protoc_insertion_point(field_release:ReqSaveGlobalData.data)
  return data_.Release();
}
inline void ReqSaveGlobalData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqSaveGlobalData.data)
}

// -------------------------------------------------------------------

// ReqDelRankData

// string name = 1;
inline void ReqDelRankData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqDelRankData::name() const {
  // @@protoc_insertion_point(field_get:ReqDelRankData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDelRankData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDelRankData.name)
}
inline std::string* ReqDelRankData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ReqDelRankData.name)
  return _s;
}
inline const std::string& ReqDelRankData::_internal_name() const {
  return name_.Get();
}
inline void ReqDelRankData::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDelRankData::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDelRankData::release_name() {
  // @@protoc_insertion_point(field_release:ReqDelRankData.name)
  return name_.Release();
}
inline void ReqDelRankData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDelRankData.name)
}

// uint32 serverid = 2;
inline void ReqDelRankData::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t ReqDelRankData::_internal_serverid() const {
  return serverid_;
}
inline uint32_t ReqDelRankData::serverid() const {
  // @@protoc_insertion_point(field_get:ReqDelRankData.serverid)
  return _internal_serverid();
}
inline void ReqDelRankData::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void ReqDelRankData::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:ReqDelRankData.serverid)
}

// -------------------------------------------------------------------

// ReqDelGlobalData

// uint32 moduleId = 1;
inline void ReqDelGlobalData::clear_moduleid() {
  moduleid_ = 0u;
}
inline uint32_t ReqDelGlobalData::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t ReqDelGlobalData::moduleid() const {
  // @@protoc_insertion_point(field_get:ReqDelGlobalData.moduleId)
  return _internal_moduleid();
}
inline void ReqDelGlobalData::_internal_set_moduleid(uint32_t value) {
  
  moduleid_ = value;
}
inline void ReqDelGlobalData::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:ReqDelGlobalData.moduleId)
}

// -------------------------------------------------------------------

// ReqRegPlayerBaseInfo

// -------------------------------------------------------------------

// ReqUpdatePlayerBaseInfo

// string data = 1;
inline void ReqUpdatePlayerBaseInfo::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ReqUpdatePlayerBaseInfo::data() const {
  // @@protoc_insertion_point(field_get:ReqUpdatePlayerBaseInfo.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdatePlayerBaseInfo::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqUpdatePlayerBaseInfo.data)
}
inline std::string* ReqUpdatePlayerBaseInfo::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ReqUpdatePlayerBaseInfo.data)
  return _s;
}
inline const std::string& ReqUpdatePlayerBaseInfo::_internal_data() const {
  return data_.Get();
}
inline void ReqUpdatePlayerBaseInfo::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerBaseInfo::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerBaseInfo::release_data() {
  // @@protoc_insertion_point(field_release:ReqUpdatePlayerBaseInfo.data)
  return data_.Release();
}
inline void ReqUpdatePlayerBaseInfo::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqUpdatePlayerBaseInfo.data)
}

// uint64 pid = 2;
inline void ReqUpdatePlayerBaseInfo::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqUpdatePlayerBaseInfo::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqUpdatePlayerBaseInfo::pid() const {
  // @@protoc_insertion_point(field_get:ReqUpdatePlayerBaseInfo.pid)
  return _internal_pid();
}
inline void ReqUpdatePlayerBaseInfo::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqUpdatePlayerBaseInfo::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqUpdatePlayerBaseInfo.pid)
}

// -------------------------------------------------------------------

// ReqDbUpdatePlayerName

// string name = 1;
inline void ReqDbUpdatePlayerName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqDbUpdatePlayerName::name() const {
  // @@protoc_insertion_point(field_get:ReqDbUpdatePlayerName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDbUpdatePlayerName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqDbUpdatePlayerName.name)
}
inline std::string* ReqDbUpdatePlayerName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ReqDbUpdatePlayerName.name)
  return _s;
}
inline const std::string& ReqDbUpdatePlayerName::_internal_name() const {
  return name_.Get();
}
inline void ReqDbUpdatePlayerName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqDbUpdatePlayerName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqDbUpdatePlayerName::release_name() {
  // @@protoc_insertion_point(field_release:ReqDbUpdatePlayerName.name)
  return name_.Release();
}
inline void ReqDbUpdatePlayerName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqDbUpdatePlayerName.name)
}

// uint64 pid = 2;
inline void ReqDbUpdatePlayerName::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ReqDbUpdatePlayerName::_internal_pid() const {
  return pid_;
}
inline uint64_t ReqDbUpdatePlayerName::pid() const {
  // @@protoc_insertion_point(field_get:ReqDbUpdatePlayerName.pid)
  return _internal_pid();
}
inline void ReqDbUpdatePlayerName::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ReqDbUpdatePlayerName::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ReqDbUpdatePlayerName.pid)
}

// -------------------------------------------------------------------

// ResDbUpdatePlayerName

// string name = 1;
inline void ResDbUpdatePlayerName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResDbUpdatePlayerName::name() const {
  // @@protoc_insertion_point(field_get:ResDbUpdatePlayerName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResDbUpdatePlayerName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResDbUpdatePlayerName.name)
}
inline std::string* ResDbUpdatePlayerName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ResDbUpdatePlayerName.name)
  return _s;
}
inline const std::string& ResDbUpdatePlayerName::_internal_name() const {
  return name_.Get();
}
inline void ResDbUpdatePlayerName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResDbUpdatePlayerName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResDbUpdatePlayerName::release_name() {
  // @@protoc_insertion_point(field_release:ResDbUpdatePlayerName.name)
  return name_.Release();
}
inline void ResDbUpdatePlayerName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResDbUpdatePlayerName.name)
}

// uint64 pid = 2;
inline void ResDbUpdatePlayerName::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t ResDbUpdatePlayerName::_internal_pid() const {
  return pid_;
}
inline uint64_t ResDbUpdatePlayerName::pid() const {
  // @@protoc_insertion_point(field_get:ResDbUpdatePlayerName.pid)
  return _internal_pid();
}
inline void ResDbUpdatePlayerName::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void ResDbUpdatePlayerName::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ResDbUpdatePlayerName.pid)
}

// uint32 code = 3;
inline void ResDbUpdatePlayerName::clear_code() {
  code_ = 0u;
}
inline uint32_t ResDbUpdatePlayerName::_internal_code() const {
  return code_;
}
inline uint32_t ResDbUpdatePlayerName::code() const {
  // @@protoc_insertion_point(field_get:ResDbUpdatePlayerName.code)
  return _internal_code();
}
inline void ResDbUpdatePlayerName::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void ResDbUpdatePlayerName::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ResDbUpdatePlayerName.code)
}

// -------------------------------------------------------------------

// ReqCloseDbServer

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServerErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerErrorCode>() {
  return ::ServerErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Server_2eproto
