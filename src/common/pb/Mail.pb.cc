// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#include "Mail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR MailList::MailList(
    ::_pbi::ConstantInitialized)
  : rd_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sendname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0u)
  , expiretime_(0u)
  , sendtime_(0u){}
struct MailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailListDefaultTypeInternal() {}
  union {
    MailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailListDefaultTypeInternal _MailList_default_instance_;
PROTOBUF_CONSTEXPR ReqMailList::ReqMailList(
    ::_pbi::ConstantInitialized){}
struct ReqMailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqMailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqMailListDefaultTypeInternal() {}
  union {
    ReqMailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqMailListDefaultTypeInternal _ReqMailList_default_instance_;
PROTOBUF_CONSTEXPR ResMailList::ResMailList(
    ::_pbi::ConstantInitialized)
  : data_(){}
struct ResMailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResMailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResMailListDefaultTypeInternal() {}
  union {
    ResMailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResMailListDefaultTypeInternal _ResMailList_default_instance_;
PROTOBUF_CONSTEXPR ReqOptMail::ReqOptMail(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , opt_(0){}
struct ReqOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqOptMailDefaultTypeInternal() {}
  union {
    ReqOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqOptMailDefaultTypeInternal _ReqOptMail_default_instance_;
PROTOBUF_CONSTEXPR ResOptMail::ResOptMail(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , opt_(0){}
struct ResOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResOptMailDefaultTypeInternal() {}
  union {
    ResOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResOptMailDefaultTypeInternal _ResOptMail_default_instance_;
PROTOBUF_CONSTEXPR ReqOneKeyOptMail::ReqOneKeyOptMail(
    ::_pbi::ConstantInitialized)
  : opt_(0){}
struct ReqOneKeyOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqOneKeyOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqOneKeyOptMailDefaultTypeInternal() {}
  union {
    ReqOneKeyOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqOneKeyOptMailDefaultTypeInternal _ReqOneKeyOptMail_default_instance_;
PROTOBUF_CONSTEXPR ResOneKeyOptMail::ResOneKeyOptMail(
    ::_pbi::ConstantInitialized)
  : data_()
  , opt_(0){}
struct ResOneKeyOptMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResOneKeyOptMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResOneKeyOptMailDefaultTypeInternal() {}
  union {
    ResOneKeyOptMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResOneKeyOptMailDefaultTypeInternal _ResOneKeyOptMail_default_instance_;
PROTOBUF_CONSTEXPR NotifyAddNewMail::NotifyAddNewMail(
    ::_pbi::ConstantInitialized)
  : data_(){}
struct NotifyAddNewMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyAddNewMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyAddNewMailDefaultTypeInternal() {}
  union {
    NotifyAddNewMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyAddNewMailDefaultTypeInternal _NotifyAddNewMail_default_instance_;
PROTOBUF_CONSTEXPR ReqMasterSendMail::ReqMasterSendMail(
    ::_pbi::ConstantInitialized)
  : rd_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sendname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , expiretime_(0u)
  , sendtime_(0u)
  , pid_(uint64_t{0u}){}
struct ReqMasterSendMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqMasterSendMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqMasterSendMailDefaultTypeInternal() {}
  union {
    ReqMasterSendMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqMasterSendMailDefaultTypeInternal _ReqMasterSendMail_default_instance_;
static ::_pb::Metadata file_level_metadata_Mail_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Mail_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Mail_2eproto = nullptr;

const uint32_t TableStruct_Mail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MailList, id_),
  PROTOBUF_FIELD_OFFSET(::MailList, title_),
  PROTOBUF_FIELD_OFFSET(::MailList, content_),
  PROTOBUF_FIELD_OFFSET(::MailList, status_),
  PROTOBUF_FIELD_OFFSET(::MailList, expiretime_),
  PROTOBUF_FIELD_OFFSET(::MailList, rd_),
  PROTOBUF_FIELD_OFFSET(::MailList, sendname_),
  PROTOBUF_FIELD_OFFSET(::MailList, sendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqMailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResMailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResMailList, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, id_),
  PROTOBUF_FIELD_OFFSET(::ReqOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResOptMail, id_),
  PROTOBUF_FIELD_OFFSET(::ResOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqOneKeyOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqOneKeyOptMail, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, opt_),
  PROTOBUF_FIELD_OFFSET(::ResOneKeyOptMail, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewMail, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, title_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, content_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, expiretime_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, rd_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, sendname_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, sendtime_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, desc_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, extra_),
  PROTOBUF_FIELD_OFFSET(::ReqMasterSendMail, pid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MailList)},
  { 14, -1, -1, sizeof(::ReqMailList)},
  { 20, -1, -1, sizeof(::ResMailList)},
  { 27, -1, -1, sizeof(::ReqOptMail)},
  { 35, -1, -1, sizeof(::ResOptMail)},
  { 43, -1, -1, sizeof(::ReqOneKeyOptMail)},
  { 50, -1, -1, sizeof(::ResOneKeyOptMail)},
  { 58, -1, -1, sizeof(::NotifyAddNewMail)},
  { 65, -1, -1, sizeof(::ReqMasterSendMail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_MailList_default_instance_._instance,
  &::_ReqMailList_default_instance_._instance,
  &::_ResMailList_default_instance_._instance,
  &::_ReqOptMail_default_instance_._instance,
  &::_ResOptMail_default_instance_._instance,
  &::_ReqOneKeyOptMail_default_instance_._instance,
  &::_ResOneKeyOptMail_default_instance_._instance,
  &::_NotifyAddNewMail_default_instance_._instance,
  &::_ReqMasterSendMail_default_instance_._instance,
};

const char descriptor_table_protodef_Mail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nMail.proto\032\tBag.proto\"\225\001\n\010MailList\022\n\n\002"
  "id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\017\n\007content\030\003 \001(\t"
  "\022\016\n\006status\030\004 \001(\r\022\022\n\nexpireTime\030\005 \001(\r\022\025\n\002"
  "rd\030\006 \003(\0132\t.ItemInfo\022\020\n\010sendName\030\007 \001(\t\022\020\n"
  "\010sendTime\030\010 \001(\r\"\r\n\013ReqMailList\"&\n\013ResMai"
  "lList\022\027\n\004data\030\001 \003(\0132\t.MailList\"%\n\nReqOpt"
  "Mail\022\n\n\002id\030\001 \001(\t\022\013\n\003opt\030\002 \001(\005\"%\n\nResOptM"
  "ail\022\n\n\002id\030\001 \001(\t\022\013\n\003opt\030\002 \001(\005\"\037\n\020ReqOneKe"
  "yOptMail\022\013\n\003opt\030\001 \001(\005\"-\n\020ResOneKeyOptMai"
  "l\022\013\n\003opt\030\001 \001(\005\022\014\n\004data\030\002 \003(\t\"+\n\020NotifyAd"
  "dNewMail\022\027\n\004data\030\001 \003(\0132\t.MailList\"\254\001\n\021Re"
  "qMasterSendMail\022\r\n\005title\030\001 \001(\t\022\017\n\007conten"
  "t\030\002 \001(\t\022\022\n\nexpireTime\030\003 \001(\r\022\025\n\002rd\030\004 \003(\0132"
  "\t.ItemInfo\022\020\n\010sendName\030\005 \001(\t\022\020\n\010sendTime"
  "\030\006 \001(\r\022\014\n\004desc\030\007 \001(\t\022\r\n\005extra\030\010 \001(\t\022\013\n\003p"
  "id\030\t \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Mail_2eproto_deps[1] = {
  &::descriptor_table_Bag_2eproto,
};
static ::_pbi::once_flag descriptor_table_Mail_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Mail_2eproto = {
    false, false, 616, descriptor_table_protodef_Mail_2eproto,
    "Mail.proto",
    &descriptor_table_Mail_2eproto_once, descriptor_table_Mail_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_Mail_2eproto::offsets,
    file_level_metadata_Mail_2eproto, file_level_enum_descriptors_Mail_2eproto,
    file_level_service_descriptors_Mail_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Mail_2eproto_getter() {
  return &descriptor_table_Mail_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Mail_2eproto(&descriptor_table_Mail_2eproto);

// ===================================================================

class MailList::_Internal {
 public:
};

void MailList::clear_rd() {
  rd_.Clear();
}
MailList::MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rd_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MailList)
}
MailList::MailList(const MailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rd_(from.rd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  sendname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(from._internal_sendname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendtime_) -
    reinterpret_cast<char*>(&status_)) + sizeof(sendtime_));
  // @@protoc_insertion_point(copy_constructor:MailList)
}

inline void MailList::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sendtime_) -
    reinterpret_cast<char*>(&status_)) + sizeof(sendtime_));
}

MailList::~MailList() {
  // @@protoc_insertion_point(destructor:MailList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  title_.Destroy();
  content_.Destroy();
  sendname_.Destroy();
}

void MailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailList::Clear() {
// @@protoc_insertion_point(message_clear_start:MailList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rd_.Clear();
  id_.ClearToEmpty();
  title_.ClearToEmpty();
  content_.ClearToEmpty();
  sendname_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendtime_) -
      reinterpret_cast<char*>(&status_)) + sizeof(sendtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MailList.id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MailList.title"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MailList.content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expireTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ItemInfo rd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sendName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sendname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MailList.sendName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sendTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailList.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailList.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailList.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  // uint32 expireTime = 5;
  if (this->_internal_expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expiretime(), target);
  }

  // repeated .ItemInfo rd = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rd_size()); i < n; i++) {
    const auto& repfield = this->_internal_rd(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string sendName = 7;
  if (!this->_internal_sendname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendname().data(), static_cast<int>(this->_internal_sendname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MailList.sendName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sendname(), target);
  }

  // uint32 sendTime = 8;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_sendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailList)
  return target;
}

size_t MailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ItemInfo rd = 6;
  total_size += 1UL * this->_internal_rd_size();
  for (const auto& msg : this->rd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string sendName = 7;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendname());
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  // uint32 expireTime = 5;
  if (this->_internal_expiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiretime());
  }

  // uint32 sendTime = 8;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailList::GetClassData() const { return &_class_data_; }

void MailList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailList *>(to)->MergeFrom(
      static_cast<const MailList &>(from));
}


void MailList::MergeFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rd_.MergeFrom(from.rd_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  if (from._internal_sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailList::CopyFrom(const MailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailList::IsInitialized() const {
  return true;
}

void MailList::InternalSwap(MailList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rd_.InternalSwap(&other->rd_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailList, sendtime_)
      + sizeof(MailList::sendtime_)
      - PROTOBUF_FIELD_OFFSET(MailList, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[0]);
}

// ===================================================================

class ReqMailList::_Internal {
 public:
};

ReqMailList::ReqMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqMailList)
}
ReqMailList::ReqMailList(const ReqMailList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqMailList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqMailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqMailList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqMailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[1]);
}

// ===================================================================

class ResMailList::_Internal {
 public:
};

ResMailList::ResMailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResMailList)
}
ResMailList::ResMailList(const ResMailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResMailList)
}

inline void ResMailList::SharedCtor() {
}

ResMailList::~ResMailList() {
  // @@protoc_insertion_point(destructor:ResMailList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResMailList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResMailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResMailList::Clear() {
// @@protoc_insertion_point(message_clear_start:ResMailList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResMailList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MailList data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResMailList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResMailList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResMailList)
  return target;
}

size_t ResMailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResMailList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResMailList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResMailList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResMailList::GetClassData() const { return &_class_data_; }

void ResMailList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResMailList *>(to)->MergeFrom(
      static_cast<const ResMailList &>(from));
}


void ResMailList::MergeFrom(const ResMailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResMailList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResMailList::CopyFrom(const ResMailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResMailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResMailList::IsInitialized() const {
  return true;
}

void ResMailList::InternalSwap(ResMailList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResMailList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[2]);
}

// ===================================================================

class ReqOptMail::_Internal {
 public:
};

ReqOptMail::ReqOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqOptMail)
}
ReqOptMail::ReqOptMail(const ReqOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ReqOptMail)
}

inline void ReqOptMail::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
opt_ = 0;
}

ReqOptMail::~ReqOptMail() {
  // @@protoc_insertion_point(destructor:ReqOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void ReqOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqOptMail.id"));
        } else
          goto handle_unusual;
        continue;
      // int32 opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqOptMail.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 opt = 2;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqOptMail)
  return target;
}

size_t ReqOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 opt = 2;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqOptMail::GetClassData() const { return &_class_data_; }

void ReqOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqOptMail *>(to)->MergeFrom(
      static_cast<const ReqOptMail &>(from));
}


void ReqOptMail::MergeFrom(const ReqOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqOptMail::CopyFrom(const ReqOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOptMail::IsInitialized() const {
  return true;
}

void ReqOptMail::InternalSwap(ReqOptMail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[3]);
}

// ===================================================================

class ResOptMail::_Internal {
 public:
};

ResOptMail::ResOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResOptMail)
}
ResOptMail::ResOptMail(const ResOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ResOptMail)
}

inline void ResOptMail::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
opt_ = 0;
}

ResOptMail::~ResOptMail() {
  // @@protoc_insertion_point(destructor:ResOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void ResOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ResOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResOptMail.id"));
        } else
          goto handle_unusual;
        continue;
      // int32 opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResOptMail.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 opt = 2;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResOptMail)
  return target;
}

size_t ResOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 opt = 2;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResOptMail::GetClassData() const { return &_class_data_; }

void ResOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResOptMail *>(to)->MergeFrom(
      static_cast<const ResOptMail &>(from));
}


void ResOptMail::MergeFrom(const ResOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResOptMail::CopyFrom(const ResOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOptMail::IsInitialized() const {
  return true;
}

void ResOptMail::InternalSwap(ResOptMail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[4]);
}

// ===================================================================

class ReqOneKeyOptMail::_Internal {
 public:
};

ReqOneKeyOptMail::ReqOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqOneKeyOptMail)
}
ReqOneKeyOptMail::ReqOneKeyOptMail(const ReqOneKeyOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ReqOneKeyOptMail)
}

inline void ReqOneKeyOptMail::SharedCtor() {
opt_ = 0;
}

ReqOneKeyOptMail::~ReqOneKeyOptMail() {
  // @@protoc_insertion_point(destructor:ReqOneKeyOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqOneKeyOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqOneKeyOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqOneKeyOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqOneKeyOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqOneKeyOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqOneKeyOptMail)
  return target;
}

size_t ReqOneKeyOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqOneKeyOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqOneKeyOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqOneKeyOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqOneKeyOptMail::GetClassData() const { return &_class_data_; }

void ReqOneKeyOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqOneKeyOptMail *>(to)->MergeFrom(
      static_cast<const ReqOneKeyOptMail &>(from));
}


void ReqOneKeyOptMail::MergeFrom(const ReqOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqOneKeyOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqOneKeyOptMail::CopyFrom(const ReqOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqOneKeyOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOneKeyOptMail::IsInitialized() const {
  return true;
}

void ReqOneKeyOptMail::InternalSwap(ReqOneKeyOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqOneKeyOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[5]);
}

// ===================================================================

class ResOneKeyOptMail::_Internal {
 public:
};

ResOneKeyOptMail::ResOneKeyOptMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResOneKeyOptMail)
}
ResOneKeyOptMail::ResOneKeyOptMail(const ResOneKeyOptMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:ResOneKeyOptMail)
}

inline void ResOneKeyOptMail::SharedCtor() {
opt_ = 0;
}

ResOneKeyOptMail::~ResOneKeyOptMail() {
  // @@protoc_insertion_point(destructor:ResOneKeyOptMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResOneKeyOptMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResOneKeyOptMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResOneKeyOptMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ResOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResOneKeyOptMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ResOneKeyOptMail.data"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResOneKeyOptMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResOneKeyOptMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_opt(), target);
  }

  // repeated string data = 2;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResOneKeyOptMail.data");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResOneKeyOptMail)
  return target;
}

size_t ResOneKeyOptMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResOneKeyOptMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  // int32 opt = 1;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResOneKeyOptMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResOneKeyOptMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResOneKeyOptMail::GetClassData() const { return &_class_data_; }

void ResOneKeyOptMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResOneKeyOptMail *>(to)->MergeFrom(
      static_cast<const ResOneKeyOptMail &>(from));
}


void ResOneKeyOptMail::MergeFrom(const ResOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResOneKeyOptMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResOneKeyOptMail::CopyFrom(const ResOneKeyOptMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResOneKeyOptMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOneKeyOptMail::IsInitialized() const {
  return true;
}

void ResOneKeyOptMail::InternalSwap(ResOneKeyOptMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(opt_, other->opt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResOneKeyOptMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[6]);
}

// ===================================================================

class NotifyAddNewMail::_Internal {
 public:
};

NotifyAddNewMail::NotifyAddNewMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NotifyAddNewMail)
}
NotifyAddNewMail::NotifyAddNewMail(const NotifyAddNewMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NotifyAddNewMail)
}

inline void NotifyAddNewMail::SharedCtor() {
}

NotifyAddNewMail::~NotifyAddNewMail() {
  // @@protoc_insertion_point(destructor:NotifyAddNewMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyAddNewMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotifyAddNewMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyAddNewMail::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyAddNewMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyAddNewMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MailList data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyAddNewMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyAddNewMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyAddNewMail)
  return target;
}

size_t NotifyAddNewMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyAddNewMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MailList data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyAddNewMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyAddNewMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyAddNewMail::GetClassData() const { return &_class_data_; }

void NotifyAddNewMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyAddNewMail *>(to)->MergeFrom(
      static_cast<const NotifyAddNewMail &>(from));
}


void NotifyAddNewMail::MergeFrom(const NotifyAddNewMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotifyAddNewMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyAddNewMail::CopyFrom(const NotifyAddNewMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyAddNewMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAddNewMail::IsInitialized() const {
  return true;
}

void NotifyAddNewMail::InternalSwap(NotifyAddNewMail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyAddNewMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[7]);
}

// ===================================================================

class ReqMasterSendMail::_Internal {
 public:
};

void ReqMasterSendMail::clear_rd() {
  rd_.Clear();
}
ReqMasterSendMail::ReqMasterSendMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rd_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqMasterSendMail)
}
ReqMasterSendMail::ReqMasterSendMail(const ReqMasterSendMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rd_(from.rd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  sendname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(from._internal_sendname(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  ::memcpy(&expiretime_, &from.expiretime_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&expiretime_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:ReqMasterSendMail)
}

inline void ReqMasterSendMail::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiretime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&expiretime_)) + sizeof(pid_));
}

ReqMasterSendMail::~ReqMasterSendMail() {
  // @@protoc_insertion_point(destructor:ReqMasterSendMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqMasterSendMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  content_.Destroy();
  sendname_.Destroy();
  desc_.Destroy();
  extra_.Destroy();
}

void ReqMasterSendMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqMasterSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqMasterSendMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rd_.Clear();
  title_.ClearToEmpty();
  content_.ClearToEmpty();
  sendname_.ClearToEmpty();
  desc_.ClearToEmpty();
  extra_.ClearToEmpty();
  ::memset(&expiretime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&expiretime_)) + sizeof(pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqMasterSendMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqMasterSendMail.title"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqMasterSendMail.content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 expireTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ItemInfo rd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sendName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sendname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqMasterSendMail.sendName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sendTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqMasterSendMail.desc"));
        } else
          goto handle_unusual;
        continue;
      // string extra = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqMasterSendMail.extra"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqMasterSendMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqMasterSendMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqMasterSendMail.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqMasterSendMail.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint32 expireTime = 3;
  if (this->_internal_expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiretime(), target);
  }

  // repeated .ItemInfo rd = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rd_size()); i < n; i++) {
    const auto& repfield = this->_internal_rd(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string sendName = 5;
  if (!this->_internal_sendname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendname().data(), static_cast<int>(this->_internal_sendname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqMasterSendMail.sendName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sendname(), target);
  }

  // uint32 sendTime = 6;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sendtime(), target);
  }

  // string desc = 7;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqMasterSendMail.desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_desc(), target);
  }

  // string extra = 8;
  if (!this->_internal_extra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqMasterSendMail.extra");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_extra(), target);
  }

  // uint64 pid = 9;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqMasterSendMail)
  return target;
}

size_t ReqMasterSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqMasterSendMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ItemInfo rd = 4;
  total_size += 1UL * this->_internal_rd_size();
  for (const auto& msg : this->rd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string sendName = 5;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendname());
  }

  // string desc = 7;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string extra = 8;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // uint32 expireTime = 3;
  if (this->_internal_expiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expiretime());
  }

  // uint32 sendTime = 6;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sendtime());
  }

  // uint64 pid = 9;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqMasterSendMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqMasterSendMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqMasterSendMail::GetClassData() const { return &_class_data_; }

void ReqMasterSendMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqMasterSendMail *>(to)->MergeFrom(
      static_cast<const ReqMasterSendMail &>(from));
}


void ReqMasterSendMail::MergeFrom(const ReqMasterSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqMasterSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rd_.MergeFrom(from.rd_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (from._internal_expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  if (from._internal_sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqMasterSendMail::CopyFrom(const ReqMasterSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqMasterSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMasterSendMail::IsInitialized() const {
  return true;
}

void ReqMasterSendMail::InternalSwap(ReqMasterSendMail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rd_.InternalSwap(&other->rd_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqMasterSendMail, pid_)
      + sizeof(ReqMasterSendMail::pid_)
      - PROTOBUF_FIELD_OFFSET(ReqMasterSendMail, expiretime_)>(
          reinterpret_cast<char*>(&expiretime_),
          reinterpret_cast<char*>(&other->expiretime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqMasterSendMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Mail_2eproto_getter, &descriptor_table_Mail_2eproto_once,
      file_level_metadata_Mail_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MailList*
Arena::CreateMaybeMessage< ::MailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqMailList*
Arena::CreateMaybeMessage< ::ReqMailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqMailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ResMailList*
Arena::CreateMaybeMessage< ::ResMailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResMailList >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqOptMail*
Arena::CreateMaybeMessage< ::ReqOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ResOptMail*
Arena::CreateMaybeMessage< ::ResOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqOneKeyOptMail*
Arena::CreateMaybeMessage< ::ReqOneKeyOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqOneKeyOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ResOneKeyOptMail*
Arena::CreateMaybeMessage< ::ResOneKeyOptMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResOneKeyOptMail >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyAddNewMail*
Arena::CreateMaybeMessage< ::NotifyAddNewMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyAddNewMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqMasterSendMail*
Arena::CreateMaybeMessage< ::ReqMasterSendMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqMasterSendMail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
