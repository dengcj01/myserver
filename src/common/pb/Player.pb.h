// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Player_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Player_2eproto;
class NotifyPlayerBaseData;
struct NotifyPlayerBaseDataDefaultTypeInternal;
extern NotifyPlayerBaseDataDefaultTypeInternal _NotifyPlayerBaseData_default_instance_;
class PayerBaseInfo;
struct PayerBaseInfoDefaultTypeInternal;
extern PayerBaseInfoDefaultTypeInternal _PayerBaseInfo_default_instance_;
class PlayerBaseData;
struct PlayerBaseDataDefaultTypeInternal;
extern PlayerBaseDataDefaultTypeInternal _PlayerBaseData_default_instance_;
class ReqChangeName;
struct ReqChangeNameDefaultTypeInternal;
extern ReqChangeNameDefaultTypeInternal _ReqChangeName_default_instance_;
class ReqHeartTick;
struct ReqHeartTickDefaultTypeInternal;
extern ReqHeartTickDefaultTypeInternal _ReqHeartTick_default_instance_;
class ReqPlayerChangeNameInfo;
struct ReqPlayerChangeNameInfoDefaultTypeInternal;
extern ReqPlayerChangeNameInfoDefaultTypeInternal _ReqPlayerChangeNameInfo_default_instance_;
class ReqServerGm;
struct ReqServerGmDefaultTypeInternal;
extern ReqServerGmDefaultTypeInternal _ReqServerGm_default_instance_;
class ResChangeName;
struct ResChangeNameDefaultTypeInternal;
extern ResChangeNameDefaultTypeInternal _ResChangeName_default_instance_;
class ResHeartTick;
struct ResHeartTickDefaultTypeInternal;
extern ResHeartTickDefaultTypeInternal _ResHeartTick_default_instance_;
class ResPlayerChangeNameInfo;
struct ResPlayerChangeNameInfoDefaultTypeInternal;
extern ResPlayerChangeNameInfoDefaultTypeInternal _ResPlayerChangeNameInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NotifyPlayerBaseData* Arena::CreateMaybeMessage<::NotifyPlayerBaseData>(Arena*);
template<> ::PayerBaseInfo* Arena::CreateMaybeMessage<::PayerBaseInfo>(Arena*);
template<> ::PlayerBaseData* Arena::CreateMaybeMessage<::PlayerBaseData>(Arena*);
template<> ::ReqChangeName* Arena::CreateMaybeMessage<::ReqChangeName>(Arena*);
template<> ::ReqHeartTick* Arena::CreateMaybeMessage<::ReqHeartTick>(Arena*);
template<> ::ReqPlayerChangeNameInfo* Arena::CreateMaybeMessage<::ReqPlayerChangeNameInfo>(Arena*);
template<> ::ReqServerGm* Arena::CreateMaybeMessage<::ReqServerGm>(Arena*);
template<> ::ResChangeName* Arena::CreateMaybeMessage<::ResChangeName>(Arena*);
template<> ::ResHeartTick* Arena::CreateMaybeMessage<::ResHeartTick>(Arena*);
template<> ::ResPlayerChangeNameInfo* Arena::CreateMaybeMessage<::ResPlayerChangeNameInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PlayerBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerBaseData) */ {
 public:
  inline PlayerBaseData() : PlayerBaseData(nullptr) {}
  ~PlayerBaseData() override;
  explicit PROTOBUF_CONSTEXPR PlayerBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerBaseData(const PlayerBaseData& from);
  PlayerBaseData(PlayerBaseData&& from) noexcept
    : PlayerBaseData() {
    *this = ::std::move(from);
  }

  inline PlayerBaseData& operator=(const PlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBaseData& operator=(PlayerBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerBaseData* internal_default_instance() {
    return reinterpret_cast<const PlayerBaseData*>(
               &_PlayerBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerBaseData& a, PlayerBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerBaseData";
  }
  protected:
  explicit PlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kAccountFieldNumber = 4,
    kPfFieldNumber = 5,
    kExtraFieldNumber = 22,
    kBanreasonFieldNumber = 24,
    kPidFieldNumber = 1,
    kPowerFieldNumber = 7,
    kCreateTimeFieldNumber = 6,
    kLevelFieldNumber = 8,
    kVipFieldNumber = 9,
    kLoginTimeFieldNumber = 10,
    kGuildIdFieldNumber = 11,
    kChargeValFieldNumber = 12,
    kTitleFieldNumber = 13,
    kHeadIconFieldNumber = 14,
    kSkinFieldNumber = 15,
    kServerIdFieldNumber = 16,
    kGmlvFieldNumber = 17,
    kSexFieldNumber = 18,
    kLogoutTimeFieldNumber = 19,
    kSessionIdFieldNumber = 21,
    kExpFieldNumber = 20,
    kBantimeFieldNumber = 23,
    kFirstLoginTimeFieldNumber = 25,
    kFromServerIdFieldNumber = 26,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string account = 4;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string pf = 5;
  void clear_pf();
  const std::string& pf() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pf(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pf();
  PROTOBUF_NODISCARD std::string* release_pf();
  void set_allocated_pf(std::string* pf);
  private:
  const std::string& _internal_pf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pf(const std::string& value);
  std::string* _internal_mutable_pf();
  public:

  // string extra = 22;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // string banreason = 24;
  void clear_banreason();
  const std::string& banreason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_banreason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_banreason();
  PROTOBUF_NODISCARD std::string* release_banreason();
  void set_allocated_banreason(std::string* banreason);
  private:
  const std::string& _internal_banreason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_banreason(const std::string& value);
  std::string* _internal_mutable_banreason();
  public:

  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 power = 7;
  void clear_power();
  uint64_t power() const;
  void set_power(uint64_t value);
  private:
  uint64_t _internal_power() const;
  void _internal_set_power(uint64_t value);
  public:

  // uint32 createTime = 6;
  void clear_createtime();
  uint32_t createtime() const;
  void set_createtime(uint32_t value);
  private:
  uint32_t _internal_createtime() const;
  void _internal_set_createtime(uint32_t value);
  public:

  // uint32 level = 8;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 vip = 9;
  void clear_vip();
  uint32_t vip() const;
  void set_vip(uint32_t value);
  private:
  uint32_t _internal_vip() const;
  void _internal_set_vip(uint32_t value);
  public:

  // uint32 loginTime = 10;
  void clear_logintime();
  uint32_t logintime() const;
  void set_logintime(uint32_t value);
  private:
  uint32_t _internal_logintime() const;
  void _internal_set_logintime(uint32_t value);
  public:

  // uint64 guildId = 11;
  void clear_guildid();
  uint64_t guildid() const;
  void set_guildid(uint64_t value);
  private:
  uint64_t _internal_guildid() const;
  void _internal_set_guildid(uint64_t value);
  public:

  // uint32 chargeVal = 12;
  void clear_chargeval();
  uint32_t chargeval() const;
  void set_chargeval(uint32_t value);
  private:
  uint32_t _internal_chargeval() const;
  void _internal_set_chargeval(uint32_t value);
  public:

  // uint32 title = 13;
  void clear_title();
  uint32_t title() const;
  void set_title(uint32_t value);
  private:
  uint32_t _internal_title() const;
  void _internal_set_title(uint32_t value);
  public:

  // uint32 headIcon = 14;
  void clear_headicon();
  uint32_t headicon() const;
  void set_headicon(uint32_t value);
  private:
  uint32_t _internal_headicon() const;
  void _internal_set_headicon(uint32_t value);
  public:

  // uint32 skin = 15;
  void clear_skin();
  uint32_t skin() const;
  void set_skin(uint32_t value);
  private:
  uint32_t _internal_skin() const;
  void _internal_set_skin(uint32_t value);
  public:

  // uint32 serverId = 16;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // int32 gmlv = 17;
  void clear_gmlv();
  int32_t gmlv() const;
  void set_gmlv(int32_t value);
  private:
  int32_t _internal_gmlv() const;
  void _internal_set_gmlv(int32_t value);
  public:

  // int32 sex = 18;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // uint32 logoutTime = 19;
  void clear_logouttime();
  uint32_t logouttime() const;
  void set_logouttime(uint32_t value);
  private:
  uint32_t _internal_logouttime() const;
  void _internal_set_logouttime(uint32_t value);
  public:

  // uint64 sessionId = 21;
  void clear_sessionid();
  uint64_t sessionid() const;
  void set_sessionid(uint64_t value);
  private:
  uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(uint64_t value);
  public:

  // uint32 exp = 20;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 bantime = 23;
  void clear_bantime();
  uint32_t bantime() const;
  void set_bantime(uint32_t value);
  private:
  uint32_t _internal_bantime() const;
  void _internal_set_bantime(uint32_t value);
  public:

  // uint32 firstLoginTime = 25;
  void clear_firstlogintime();
  uint32_t firstlogintime() const;
  void set_firstlogintime(uint32_t value);
  private:
  uint32_t _internal_firstlogintime() const;
  void _internal_set_firstlogintime(uint32_t value);
  public:

  // uint32 fromServerId = 26;
  void clear_fromserverid();
  uint32_t fromserverid() const;
  void set_fromserverid(uint32_t value);
  private:
  uint32_t _internal_fromserverid() const;
  void _internal_set_fromserverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr banreason_;
  uint64_t pid_;
  uint64_t power_;
  uint32_t createtime_;
  uint32_t level_;
  uint32_t vip_;
  uint32_t logintime_;
  uint64_t guildid_;
  uint32_t chargeval_;
  uint32_t title_;
  uint32_t headicon_;
  uint32_t skin_;
  uint32_t serverid_;
  int32_t gmlv_;
  int32_t sex_;
  uint32_t logouttime_;
  uint64_t sessionid_;
  uint32_t exp_;
  uint32_t bantime_;
  uint32_t firstlogintime_;
  uint32_t fromserverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class NotifyPlayerBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyPlayerBaseData) */ {
 public:
  inline NotifyPlayerBaseData() : NotifyPlayerBaseData(nullptr) {}
  ~NotifyPlayerBaseData() override;
  explicit PROTOBUF_CONSTEXPR NotifyPlayerBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyPlayerBaseData(const NotifyPlayerBaseData& from);
  NotifyPlayerBaseData(NotifyPlayerBaseData&& from) noexcept
    : NotifyPlayerBaseData() {
    *this = ::std::move(from);
  }

  inline NotifyPlayerBaseData& operator=(const NotifyPlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyPlayerBaseData& operator=(NotifyPlayerBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyPlayerBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyPlayerBaseData* internal_default_instance() {
    return reinterpret_cast<const NotifyPlayerBaseData*>(
               &_NotifyPlayerBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotifyPlayerBaseData& a, NotifyPlayerBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyPlayerBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyPlayerBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyPlayerBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyPlayerBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyPlayerBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyPlayerBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyPlayerBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyPlayerBaseData";
  }
  protected:
  explicit NotifyPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .PlayerBaseData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PlayerBaseData& data() const;
  PROTOBUF_NODISCARD ::PlayerBaseData* release_data();
  ::PlayerBaseData* mutable_data();
  void set_allocated_data(::PlayerBaseData* data);
  private:
  const ::PlayerBaseData& _internal_data() const;
  ::PlayerBaseData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PlayerBaseData* data);
  ::PlayerBaseData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:NotifyPlayerBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerBaseData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class PayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PayerBaseInfo) */ {
 public:
  inline PayerBaseInfo() : PayerBaseInfo(nullptr) {}
  ~PayerBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR PayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayerBaseInfo(const PayerBaseInfo& from);
  PayerBaseInfo(PayerBaseInfo&& from) noexcept
    : PayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline PayerBaseInfo& operator=(const PayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayerBaseInfo& operator=(PayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const PayerBaseInfo*>(
               &_PayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PayerBaseInfo& a, PayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PayerBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayerBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayerBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PayerBaseInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayerBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PayerBaseInfo";
  }
  protected:
  explicit PayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kPidFieldNumber = 1,
    kLevelFieldNumber = 4,
    kVipFieldNumber = 5,
    kGuildIdFieldNumber = 6,
    kPowerFieldNumber = 7,
    kTitleFieldNumber = 8,
    kHeadIconFieldNumber = 9,
    kSkinFieldNumber = 10,
    kServerIdFieldNumber = 11,
    kLogoutTimeFieldNumber = 12,
    kDayShareFieldNumber = 13,
    kAllShareFieldNumber = 14,
    kEnterTimeFieldNumber = 15,
    kSexFieldNumber = 16,
    kApplyTimeFieldNumber = 17,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string icon = 3;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // uint64 pid = 1;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 vip = 5;
  void clear_vip();
  uint32_t vip() const;
  void set_vip(uint32_t value);
  private:
  uint32_t _internal_vip() const;
  void _internal_set_vip(uint32_t value);
  public:

  // uint64 guildId = 6;
  void clear_guildid();
  uint64_t guildid() const;
  void set_guildid(uint64_t value);
  private:
  uint64_t _internal_guildid() const;
  void _internal_set_guildid(uint64_t value);
  public:

  // uint64 power = 7;
  void clear_power();
  uint64_t power() const;
  void set_power(uint64_t value);
  private:
  uint64_t _internal_power() const;
  void _internal_set_power(uint64_t value);
  public:

  // uint32 title = 8;
  void clear_title();
  uint32_t title() const;
  void set_title(uint32_t value);
  private:
  uint32_t _internal_title() const;
  void _internal_set_title(uint32_t value);
  public:

  // uint32 headIcon = 9;
  void clear_headicon();
  uint32_t headicon() const;
  void set_headicon(uint32_t value);
  private:
  uint32_t _internal_headicon() const;
  void _internal_set_headicon(uint32_t value);
  public:

  // uint32 skin = 10;
  void clear_skin();
  uint32_t skin() const;
  void set_skin(uint32_t value);
  private:
  uint32_t _internal_skin() const;
  void _internal_set_skin(uint32_t value);
  public:

  // uint32 serverId = 11;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // uint32 logoutTime = 12;
  void clear_logouttime();
  uint32_t logouttime() const;
  void set_logouttime(uint32_t value);
  private:
  uint32_t _internal_logouttime() const;
  void _internal_set_logouttime(uint32_t value);
  public:

  // int32 dayShare = 13;
  void clear_dayshare();
  int32_t dayshare() const;
  void set_dayshare(int32_t value);
  private:
  int32_t _internal_dayshare() const;
  void _internal_set_dayshare(int32_t value);
  public:

  // int32 allShare = 14;
  void clear_allshare();
  int32_t allshare() const;
  void set_allshare(int32_t value);
  private:
  int32_t _internal_allshare() const;
  void _internal_set_allshare(int32_t value);
  public:

  // uint32 enterTime = 15;
  void clear_entertime();
  uint32_t entertime() const;
  void set_entertime(uint32_t value);
  private:
  uint32_t _internal_entertime() const;
  void _internal_set_entertime(uint32_t value);
  public:

  // int32 sex = 16;
  void clear_sex();
  int32_t sex() const;
  void set_sex(int32_t value);
  private:
  int32_t _internal_sex() const;
  void _internal_set_sex(int32_t value);
  public:

  // uint32 applyTime = 17;
  void clear_applytime();
  uint32_t applytime() const;
  void set_applytime(uint32_t value);
  private:
  uint32_t _internal_applytime() const;
  void _internal_set_applytime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  uint64_t pid_;
  uint32_t level_;
  uint32_t vip_;
  uint64_t guildid_;
  uint64_t power_;
  uint32_t title_;
  uint32_t headicon_;
  uint32_t skin_;
  uint32_t serverid_;
  uint32_t logouttime_;
  int32_t dayshare_;
  int32_t allshare_;
  uint32_t entertime_;
  int32_t sex_;
  uint32_t applytime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ReqHeartTick final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqHeartTick) */ {
 public:
  inline ReqHeartTick() : ReqHeartTick(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqHeartTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHeartTick(const ReqHeartTick& from);
  ReqHeartTick(ReqHeartTick&& from) noexcept
    : ReqHeartTick() {
    *this = ::std::move(from);
  }

  inline ReqHeartTick& operator=(const ReqHeartTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeartTick& operator=(ReqHeartTick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHeartTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHeartTick* internal_default_instance() {
    return reinterpret_cast<const ReqHeartTick*>(
               &_ReqHeartTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqHeartTick& a, ReqHeartTick& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHeartTick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHeartTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqHeartTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqHeartTick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqHeartTick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqHeartTick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqHeartTick";
  }
  protected:
  explicit ReqHeartTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqHeartTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ResHeartTick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResHeartTick) */ {
 public:
  inline ResHeartTick() : ResHeartTick(nullptr) {}
  ~ResHeartTick() override;
  explicit PROTOBUF_CONSTEXPR ResHeartTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResHeartTick(const ResHeartTick& from);
  ResHeartTick(ResHeartTick&& from) noexcept
    : ResHeartTick() {
    *this = ::std::move(from);
  }

  inline ResHeartTick& operator=(const ResHeartTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHeartTick& operator=(ResHeartTick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResHeartTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResHeartTick* internal_default_instance() {
    return reinterpret_cast<const ResHeartTick*>(
               &_ResHeartTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResHeartTick& a, ResHeartTick& b) {
    a.Swap(&b);
  }
  inline void Swap(ResHeartTick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResHeartTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResHeartTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResHeartTick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResHeartTick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResHeartTick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHeartTick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResHeartTick";
  }
  protected:
  explicit ResHeartTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNowTimeFieldNumber = 1,
  };
  // uint32 nowTime = 1;
  void clear_nowtime();
  uint32_t nowtime() const;
  void set_nowtime(uint32_t value);
  private:
  uint32_t _internal_nowtime() const;
  void _internal_set_nowtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResHeartTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t nowtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ReqServerGm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqServerGm) */ {
 public:
  inline ReqServerGm() : ReqServerGm(nullptr) {}
  ~ReqServerGm() override;
  explicit PROTOBUF_CONSTEXPR ReqServerGm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqServerGm(const ReqServerGm& from);
  ReqServerGm(ReqServerGm&& from) noexcept
    : ReqServerGm() {
    *this = ::std::move(from);
  }

  inline ReqServerGm& operator=(const ReqServerGm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqServerGm& operator=(ReqServerGm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqServerGm& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqServerGm* internal_default_instance() {
    return reinterpret_cast<const ReqServerGm*>(
               &_ReqServerGm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqServerGm& a, ReqServerGm& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqServerGm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqServerGm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqServerGm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqServerGm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqServerGm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqServerGm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqServerGm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqServerGm";
  }
  protected:
  explicit ReqServerGm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kArgsFieldNumber = 2,
  };
  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string args = 2;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:ReqServerGm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ReqChangeName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqChangeName) */ {
 public:
  inline ReqChangeName() : ReqChangeName(nullptr) {}
  ~ReqChangeName() override;
  explicit PROTOBUF_CONSTEXPR ReqChangeName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqChangeName(const ReqChangeName& from);
  ReqChangeName(ReqChangeName&& from) noexcept
    : ReqChangeName() {
    *this = ::std::move(from);
  }

  inline ReqChangeName& operator=(const ReqChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqChangeName& operator=(ReqChangeName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqChangeName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqChangeName* internal_default_instance() {
    return reinterpret_cast<const ReqChangeName*>(
               &_ReqChangeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqChangeName& a, ReqChangeName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqChangeName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqChangeName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqChangeName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqChangeName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqChangeName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqChangeName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqChangeName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqChangeName";
  }
  protected:
  explicit ReqChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ReqChangeName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ResChangeName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResChangeName) */ {
 public:
  inline ResChangeName() : ResChangeName(nullptr) {}
  ~ResChangeName() override;
  explicit PROTOBUF_CONSTEXPR ResChangeName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResChangeName(const ResChangeName& from);
  ResChangeName(ResChangeName&& from) noexcept
    : ResChangeName() {
    *this = ::std::move(from);
  }

  inline ResChangeName& operator=(const ResChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResChangeName& operator=(ResChangeName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResChangeName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResChangeName* internal_default_instance() {
    return reinterpret_cast<const ResChangeName*>(
               &_ResChangeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResChangeName& a, ResChangeName& b) {
    a.Swap(&b);
  }
  inline void Swap(ResChangeName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResChangeName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResChangeName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResChangeName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResChangeName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResChangeName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResChangeName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResChangeName";
  }
  protected:
  explicit ResChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCntFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 cnt = 2;
  void clear_cnt();
  uint32_t cnt() const;
  void set_cnt(uint32_t value);
  private:
  uint32_t _internal_cnt() const;
  void _internal_set_cnt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResChangeName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ReqPlayerChangeNameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqPlayerChangeNameInfo) */ {
 public:
  inline ReqPlayerChangeNameInfo() : ReqPlayerChangeNameInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqPlayerChangeNameInfo(const ReqPlayerChangeNameInfo& from);
  ReqPlayerChangeNameInfo(ReqPlayerChangeNameInfo&& from) noexcept
    : ReqPlayerChangeNameInfo() {
    *this = ::std::move(from);
  }

  inline ReqPlayerChangeNameInfo& operator=(const ReqPlayerChangeNameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPlayerChangeNameInfo& operator=(ReqPlayerChangeNameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqPlayerChangeNameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqPlayerChangeNameInfo* internal_default_instance() {
    return reinterpret_cast<const ReqPlayerChangeNameInfo*>(
               &_ReqPlayerChangeNameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqPlayerChangeNameInfo& a, ReqPlayerChangeNameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqPlayerChangeNameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqPlayerChangeNameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqPlayerChangeNameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqPlayerChangeNameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqPlayerChangeNameInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqPlayerChangeNameInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqPlayerChangeNameInfo";
  }
  protected:
  explicit ReqPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqPlayerChangeNameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class ResPlayerChangeNameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResPlayerChangeNameInfo) */ {
 public:
  inline ResPlayerChangeNameInfo() : ResPlayerChangeNameInfo(nullptr) {}
  ~ResPlayerChangeNameInfo() override;
  explicit PROTOBUF_CONSTEXPR ResPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResPlayerChangeNameInfo(const ResPlayerChangeNameInfo& from);
  ResPlayerChangeNameInfo(ResPlayerChangeNameInfo&& from) noexcept
    : ResPlayerChangeNameInfo() {
    *this = ::std::move(from);
  }

  inline ResPlayerChangeNameInfo& operator=(const ResPlayerChangeNameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerChangeNameInfo& operator=(ResPlayerChangeNameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResPlayerChangeNameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResPlayerChangeNameInfo* internal_default_instance() {
    return reinterpret_cast<const ResPlayerChangeNameInfo*>(
               &_ResPlayerChangeNameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResPlayerChangeNameInfo& a, ResPlayerChangeNameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResPlayerChangeNameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResPlayerChangeNameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResPlayerChangeNameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResPlayerChangeNameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResPlayerChangeNameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResPlayerChangeNameInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerChangeNameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResPlayerChangeNameInfo";
  }
  protected:
  explicit ResPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCntFieldNumber = 1,
  };
  // uint32 cnt = 1;
  void clear_cnt();
  uint32_t cnt() const;
  void set_cnt(uint32_t value);
  private:
  uint32_t _internal_cnt() const;
  void _internal_set_cnt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResPlayerChangeNameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerBaseData

// uint64 pid = 1;
inline void PlayerBaseData::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t PlayerBaseData::_internal_pid() const {
  return pid_;
}
inline uint64_t PlayerBaseData::pid() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.pid)
  return _internal_pid();
}
inline void PlayerBaseData::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void PlayerBaseData::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.pid)
}

// string name = 2;
inline void PlayerBaseData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::name() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.name)
}
inline std::string* PlayerBaseData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.name)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_name() const {
  return name_.Get();
}
inline void PlayerBaseData::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_name() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.name)
  return name_.Release();
}
inline void PlayerBaseData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.name)
}

// string icon = 3;
inline void PlayerBaseData::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::icon() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.icon)
}
inline std::string* PlayerBaseData::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.icon)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_icon() const {
  return icon_.Get();
}
inline void PlayerBaseData::_internal_set_icon(const std::string& value) {
  
  icon_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_icon() {
  
  return icon_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_icon() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.icon)
  return icon_.Release();
}
inline void PlayerBaseData::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.icon)
}

// string account = 4;
inline void PlayerBaseData::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::account() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.account)
}
inline std::string* PlayerBaseData::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.account)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_account() const {
  return account_.Get();
}
inline void PlayerBaseData::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_account() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.account)
  return account_.Release();
}
inline void PlayerBaseData::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.account)
}

// string pf = 5;
inline void PlayerBaseData::clear_pf() {
  pf_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::pf() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.pf)
  return _internal_pf();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_pf(ArgT0&& arg0, ArgT... args) {
 
 pf_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.pf)
}
inline std::string* PlayerBaseData::mutable_pf() {
  std::string* _s = _internal_mutable_pf();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.pf)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_pf() const {
  return pf_.Get();
}
inline void PlayerBaseData::_internal_set_pf(const std::string& value) {
  
  pf_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_pf() {
  
  return pf_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_pf() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.pf)
  return pf_.Release();
}
inline void PlayerBaseData::set_allocated_pf(std::string* pf) {
  if (pf != nullptr) {
    
  } else {
    
  }
  pf_.SetAllocated(pf, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pf_.IsDefault()) {
    pf_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.pf)
}

// uint32 createTime = 6;
inline void PlayerBaseData::clear_createtime() {
  createtime_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_createtime() const {
  return createtime_;
}
inline uint32_t PlayerBaseData::createtime() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.createTime)
  return _internal_createtime();
}
inline void PlayerBaseData::_internal_set_createtime(uint32_t value) {
  
  createtime_ = value;
}
inline void PlayerBaseData::set_createtime(uint32_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.createTime)
}

// uint64 power = 7;
inline void PlayerBaseData::clear_power() {
  power_ = uint64_t{0u};
}
inline uint64_t PlayerBaseData::_internal_power() const {
  return power_;
}
inline uint64_t PlayerBaseData::power() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.power)
  return _internal_power();
}
inline void PlayerBaseData::_internal_set_power(uint64_t value) {
  
  power_ = value;
}
inline void PlayerBaseData::set_power(uint64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.power)
}

// uint32 level = 8;
inline void PlayerBaseData::clear_level() {
  level_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_level() const {
  return level_;
}
inline uint32_t PlayerBaseData::level() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.level)
  return _internal_level();
}
inline void PlayerBaseData::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void PlayerBaseData::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.level)
}

// uint32 vip = 9;
inline void PlayerBaseData::clear_vip() {
  vip_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_vip() const {
  return vip_;
}
inline uint32_t PlayerBaseData::vip() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.vip)
  return _internal_vip();
}
inline void PlayerBaseData::_internal_set_vip(uint32_t value) {
  
  vip_ = value;
}
inline void PlayerBaseData::set_vip(uint32_t value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.vip)
}

// uint32 loginTime = 10;
inline void PlayerBaseData::clear_logintime() {
  logintime_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_logintime() const {
  return logintime_;
}
inline uint32_t PlayerBaseData::logintime() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.loginTime)
  return _internal_logintime();
}
inline void PlayerBaseData::_internal_set_logintime(uint32_t value) {
  
  logintime_ = value;
}
inline void PlayerBaseData::set_logintime(uint32_t value) {
  _internal_set_logintime(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.loginTime)
}

// uint64 guildId = 11;
inline void PlayerBaseData::clear_guildid() {
  guildid_ = uint64_t{0u};
}
inline uint64_t PlayerBaseData::_internal_guildid() const {
  return guildid_;
}
inline uint64_t PlayerBaseData::guildid() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.guildId)
  return _internal_guildid();
}
inline void PlayerBaseData::_internal_set_guildid(uint64_t value) {
  
  guildid_ = value;
}
inline void PlayerBaseData::set_guildid(uint64_t value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.guildId)
}

// uint32 chargeVal = 12;
inline void PlayerBaseData::clear_chargeval() {
  chargeval_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_chargeval() const {
  return chargeval_;
}
inline uint32_t PlayerBaseData::chargeval() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.chargeVal)
  return _internal_chargeval();
}
inline void PlayerBaseData::_internal_set_chargeval(uint32_t value) {
  
  chargeval_ = value;
}
inline void PlayerBaseData::set_chargeval(uint32_t value) {
  _internal_set_chargeval(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.chargeVal)
}

// uint32 title = 13;
inline void PlayerBaseData::clear_title() {
  title_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_title() const {
  return title_;
}
inline uint32_t PlayerBaseData::title() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.title)
  return _internal_title();
}
inline void PlayerBaseData::_internal_set_title(uint32_t value) {
  
  title_ = value;
}
inline void PlayerBaseData::set_title(uint32_t value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.title)
}

// uint32 headIcon = 14;
inline void PlayerBaseData::clear_headicon() {
  headicon_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_headicon() const {
  return headicon_;
}
inline uint32_t PlayerBaseData::headicon() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.headIcon)
  return _internal_headicon();
}
inline void PlayerBaseData::_internal_set_headicon(uint32_t value) {
  
  headicon_ = value;
}
inline void PlayerBaseData::set_headicon(uint32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.headIcon)
}

// uint32 skin = 15;
inline void PlayerBaseData::clear_skin() {
  skin_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_skin() const {
  return skin_;
}
inline uint32_t PlayerBaseData::skin() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.skin)
  return _internal_skin();
}
inline void PlayerBaseData::_internal_set_skin(uint32_t value) {
  
  skin_ = value;
}
inline void PlayerBaseData::set_skin(uint32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.skin)
}

// uint32 serverId = 16;
inline void PlayerBaseData::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_serverid() const {
  return serverid_;
}
inline uint32_t PlayerBaseData::serverid() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.serverId)
  return _internal_serverid();
}
inline void PlayerBaseData::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void PlayerBaseData::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.serverId)
}

// int32 gmlv = 17;
inline void PlayerBaseData::clear_gmlv() {
  gmlv_ = 0;
}
inline int32_t PlayerBaseData::_internal_gmlv() const {
  return gmlv_;
}
inline int32_t PlayerBaseData::gmlv() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.gmlv)
  return _internal_gmlv();
}
inline void PlayerBaseData::_internal_set_gmlv(int32_t value) {
  
  gmlv_ = value;
}
inline void PlayerBaseData::set_gmlv(int32_t value) {
  _internal_set_gmlv(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.gmlv)
}

// int32 sex = 18;
inline void PlayerBaseData::clear_sex() {
  sex_ = 0;
}
inline int32_t PlayerBaseData::_internal_sex() const {
  return sex_;
}
inline int32_t PlayerBaseData::sex() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.sex)
  return _internal_sex();
}
inline void PlayerBaseData::_internal_set_sex(int32_t value) {
  
  sex_ = value;
}
inline void PlayerBaseData::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.sex)
}

// uint32 logoutTime = 19;
inline void PlayerBaseData::clear_logouttime() {
  logouttime_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_logouttime() const {
  return logouttime_;
}
inline uint32_t PlayerBaseData::logouttime() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.logoutTime)
  return _internal_logouttime();
}
inline void PlayerBaseData::_internal_set_logouttime(uint32_t value) {
  
  logouttime_ = value;
}
inline void PlayerBaseData::set_logouttime(uint32_t value) {
  _internal_set_logouttime(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.logoutTime)
}

// uint32 exp = 20;
inline void PlayerBaseData::clear_exp() {
  exp_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_exp() const {
  return exp_;
}
inline uint32_t PlayerBaseData::exp() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.exp)
  return _internal_exp();
}
inline void PlayerBaseData::_internal_set_exp(uint32_t value) {
  
  exp_ = value;
}
inline void PlayerBaseData::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.exp)
}

// uint64 sessionId = 21;
inline void PlayerBaseData::clear_sessionid() {
  sessionid_ = uint64_t{0u};
}
inline uint64_t PlayerBaseData::_internal_sessionid() const {
  return sessionid_;
}
inline uint64_t PlayerBaseData::sessionid() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.sessionId)
  return _internal_sessionid();
}
inline void PlayerBaseData::_internal_set_sessionid(uint64_t value) {
  
  sessionid_ = value;
}
inline void PlayerBaseData::set_sessionid(uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.sessionId)
}

// string extra = 22;
inline void PlayerBaseData::clear_extra() {
  extra_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::extra() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_extra(ArgT0&& arg0, ArgT... args) {
 
 extra_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.extra)
}
inline std::string* PlayerBaseData::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.extra)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_extra() const {
  return extra_.Get();
}
inline void PlayerBaseData::_internal_set_extra(const std::string& value) {
  
  extra_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_extra() {
  
  return extra_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_extra() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.extra)
  return extra_.Release();
}
inline void PlayerBaseData::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extra_.IsDefault()) {
    extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.extra)
}

// uint32 bantime = 23;
inline void PlayerBaseData::clear_bantime() {
  bantime_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_bantime() const {
  return bantime_;
}
inline uint32_t PlayerBaseData::bantime() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.bantime)
  return _internal_bantime();
}
inline void PlayerBaseData::_internal_set_bantime(uint32_t value) {
  
  bantime_ = value;
}
inline void PlayerBaseData::set_bantime(uint32_t value) {
  _internal_set_bantime(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.bantime)
}

// string banreason = 24;
inline void PlayerBaseData::clear_banreason() {
  banreason_.ClearToEmpty();
}
inline const std::string& PlayerBaseData::banreason() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.banreason)
  return _internal_banreason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseData::set_banreason(ArgT0&& arg0, ArgT... args) {
 
 banreason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerBaseData.banreason)
}
inline std::string* PlayerBaseData::mutable_banreason() {
  std::string* _s = _internal_mutable_banreason();
  // @@protoc_insertion_point(field_mutable:PlayerBaseData.banreason)
  return _s;
}
inline const std::string& PlayerBaseData::_internal_banreason() const {
  return banreason_.Get();
}
inline void PlayerBaseData::_internal_set_banreason(const std::string& value) {
  
  banreason_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerBaseData::_internal_mutable_banreason() {
  
  return banreason_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerBaseData::release_banreason() {
  // @@protoc_insertion_point(field_release:PlayerBaseData.banreason)
  return banreason_.Release();
}
inline void PlayerBaseData::set_allocated_banreason(std::string* banreason) {
  if (banreason != nullptr) {
    
  } else {
    
  }
  banreason_.SetAllocated(banreason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (banreason_.IsDefault()) {
    banreason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerBaseData.banreason)
}

// uint32 firstLoginTime = 25;
inline void PlayerBaseData::clear_firstlogintime() {
  firstlogintime_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_firstlogintime() const {
  return firstlogintime_;
}
inline uint32_t PlayerBaseData::firstlogintime() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.firstLoginTime)
  return _internal_firstlogintime();
}
inline void PlayerBaseData::_internal_set_firstlogintime(uint32_t value) {
  
  firstlogintime_ = value;
}
inline void PlayerBaseData::set_firstlogintime(uint32_t value) {
  _internal_set_firstlogintime(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.firstLoginTime)
}

// uint32 fromServerId = 26;
inline void PlayerBaseData::clear_fromserverid() {
  fromserverid_ = 0u;
}
inline uint32_t PlayerBaseData::_internal_fromserverid() const {
  return fromserverid_;
}
inline uint32_t PlayerBaseData::fromserverid() const {
  // @@protoc_insertion_point(field_get:PlayerBaseData.fromServerId)
  return _internal_fromserverid();
}
inline void PlayerBaseData::_internal_set_fromserverid(uint32_t value) {
  
  fromserverid_ = value;
}
inline void PlayerBaseData::set_fromserverid(uint32_t value) {
  _internal_set_fromserverid(value);
  // @@protoc_insertion_point(field_set:PlayerBaseData.fromServerId)
}

// -------------------------------------------------------------------

// NotifyPlayerBaseData

// .PlayerBaseData data = 1;
inline bool NotifyPlayerBaseData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool NotifyPlayerBaseData::has_data() const {
  return _internal_has_data();
}
inline void NotifyPlayerBaseData::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::PlayerBaseData& NotifyPlayerBaseData::_internal_data() const {
  const ::PlayerBaseData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerBaseData&>(
      ::_PlayerBaseData_default_instance_);
}
inline const ::PlayerBaseData& NotifyPlayerBaseData::data() const {
  // @@protoc_insertion_point(field_get:NotifyPlayerBaseData.data)
  return _internal_data();
}
inline void NotifyPlayerBaseData::unsafe_arena_set_allocated_data(
    ::PlayerBaseData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NotifyPlayerBaseData.data)
}
inline ::PlayerBaseData* NotifyPlayerBaseData::release_data() {
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerBaseData* NotifyPlayerBaseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:NotifyPlayerBaseData.data)
  
  ::PlayerBaseData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PlayerBaseData* NotifyPlayerBaseData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerBaseData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PlayerBaseData* NotifyPlayerBaseData::mutable_data() {
  ::PlayerBaseData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NotifyPlayerBaseData.data)
  return _msg;
}
inline void NotifyPlayerBaseData::set_allocated_data(::PlayerBaseData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NotifyPlayerBaseData.data)
}

// -------------------------------------------------------------------

// PayerBaseInfo

// uint64 pid = 1;
inline void PayerBaseInfo::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t PayerBaseInfo::_internal_pid() const {
  return pid_;
}
inline uint64_t PayerBaseInfo::pid() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.pid)
  return _internal_pid();
}
inline void PayerBaseInfo::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void PayerBaseInfo::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.pid)
}

// string name = 2;
inline void PayerBaseInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PayerBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayerBaseInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PayerBaseInfo.name)
}
inline std::string* PayerBaseInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PayerBaseInfo.name)
  return _s;
}
inline const std::string& PayerBaseInfo::_internal_name() const {
  return name_.Get();
}
inline void PayerBaseInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PayerBaseInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PayerBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:PayerBaseInfo.name)
  return name_.Release();
}
inline void PayerBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PayerBaseInfo.name)
}

// string icon = 3;
inline void PayerBaseInfo::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& PayerBaseInfo::icon() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayerBaseInfo::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PayerBaseInfo.icon)
}
inline std::string* PayerBaseInfo::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:PayerBaseInfo.icon)
  return _s;
}
inline const std::string& PayerBaseInfo::_internal_icon() const {
  return icon_.Get();
}
inline void PayerBaseInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(value, GetArenaForAllocation());
}
inline std::string* PayerBaseInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(GetArenaForAllocation());
}
inline std::string* PayerBaseInfo::release_icon() {
  // @@protoc_insertion_point(field_release:PayerBaseInfo.icon)
  return icon_.Release();
}
inline void PayerBaseInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PayerBaseInfo.icon)
}

// uint32 level = 4;
inline void PayerBaseInfo::clear_level() {
  level_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_level() const {
  return level_;
}
inline uint32_t PayerBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.level)
  return _internal_level();
}
inline void PayerBaseInfo::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void PayerBaseInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.level)
}

// uint32 vip = 5;
inline void PayerBaseInfo::clear_vip() {
  vip_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_vip() const {
  return vip_;
}
inline uint32_t PayerBaseInfo::vip() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.vip)
  return _internal_vip();
}
inline void PayerBaseInfo::_internal_set_vip(uint32_t value) {
  
  vip_ = value;
}
inline void PayerBaseInfo::set_vip(uint32_t value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.vip)
}

// uint64 guildId = 6;
inline void PayerBaseInfo::clear_guildid() {
  guildid_ = uint64_t{0u};
}
inline uint64_t PayerBaseInfo::_internal_guildid() const {
  return guildid_;
}
inline uint64_t PayerBaseInfo::guildid() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.guildId)
  return _internal_guildid();
}
inline void PayerBaseInfo::_internal_set_guildid(uint64_t value) {
  
  guildid_ = value;
}
inline void PayerBaseInfo::set_guildid(uint64_t value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.guildId)
}

// uint64 power = 7;
inline void PayerBaseInfo::clear_power() {
  power_ = uint64_t{0u};
}
inline uint64_t PayerBaseInfo::_internal_power() const {
  return power_;
}
inline uint64_t PayerBaseInfo::power() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.power)
  return _internal_power();
}
inline void PayerBaseInfo::_internal_set_power(uint64_t value) {
  
  power_ = value;
}
inline void PayerBaseInfo::set_power(uint64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.power)
}

// uint32 title = 8;
inline void PayerBaseInfo::clear_title() {
  title_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_title() const {
  return title_;
}
inline uint32_t PayerBaseInfo::title() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.title)
  return _internal_title();
}
inline void PayerBaseInfo::_internal_set_title(uint32_t value) {
  
  title_ = value;
}
inline void PayerBaseInfo::set_title(uint32_t value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.title)
}

// uint32 headIcon = 9;
inline void PayerBaseInfo::clear_headicon() {
  headicon_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_headicon() const {
  return headicon_;
}
inline uint32_t PayerBaseInfo::headicon() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.headIcon)
  return _internal_headicon();
}
inline void PayerBaseInfo::_internal_set_headicon(uint32_t value) {
  
  headicon_ = value;
}
inline void PayerBaseInfo::set_headicon(uint32_t value) {
  _internal_set_headicon(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.headIcon)
}

// uint32 skin = 10;
inline void PayerBaseInfo::clear_skin() {
  skin_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_skin() const {
  return skin_;
}
inline uint32_t PayerBaseInfo::skin() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.skin)
  return _internal_skin();
}
inline void PayerBaseInfo::_internal_set_skin(uint32_t value) {
  
  skin_ = value;
}
inline void PayerBaseInfo::set_skin(uint32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.skin)
}

// uint32 serverId = 11;
inline void PayerBaseInfo::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_serverid() const {
  return serverid_;
}
inline uint32_t PayerBaseInfo::serverid() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.serverId)
  return _internal_serverid();
}
inline void PayerBaseInfo::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void PayerBaseInfo::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.serverId)
}

// uint32 logoutTime = 12;
inline void PayerBaseInfo::clear_logouttime() {
  logouttime_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_logouttime() const {
  return logouttime_;
}
inline uint32_t PayerBaseInfo::logouttime() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.logoutTime)
  return _internal_logouttime();
}
inline void PayerBaseInfo::_internal_set_logouttime(uint32_t value) {
  
  logouttime_ = value;
}
inline void PayerBaseInfo::set_logouttime(uint32_t value) {
  _internal_set_logouttime(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.logoutTime)
}

// int32 dayShare = 13;
inline void PayerBaseInfo::clear_dayshare() {
  dayshare_ = 0;
}
inline int32_t PayerBaseInfo::_internal_dayshare() const {
  return dayshare_;
}
inline int32_t PayerBaseInfo::dayshare() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.dayShare)
  return _internal_dayshare();
}
inline void PayerBaseInfo::_internal_set_dayshare(int32_t value) {
  
  dayshare_ = value;
}
inline void PayerBaseInfo::set_dayshare(int32_t value) {
  _internal_set_dayshare(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.dayShare)
}

// int32 allShare = 14;
inline void PayerBaseInfo::clear_allshare() {
  allshare_ = 0;
}
inline int32_t PayerBaseInfo::_internal_allshare() const {
  return allshare_;
}
inline int32_t PayerBaseInfo::allshare() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.allShare)
  return _internal_allshare();
}
inline void PayerBaseInfo::_internal_set_allshare(int32_t value) {
  
  allshare_ = value;
}
inline void PayerBaseInfo::set_allshare(int32_t value) {
  _internal_set_allshare(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.allShare)
}

// uint32 enterTime = 15;
inline void PayerBaseInfo::clear_entertime() {
  entertime_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_entertime() const {
  return entertime_;
}
inline uint32_t PayerBaseInfo::entertime() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.enterTime)
  return _internal_entertime();
}
inline void PayerBaseInfo::_internal_set_entertime(uint32_t value) {
  
  entertime_ = value;
}
inline void PayerBaseInfo::set_entertime(uint32_t value) {
  _internal_set_entertime(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.enterTime)
}

// int32 sex = 16;
inline void PayerBaseInfo::clear_sex() {
  sex_ = 0;
}
inline int32_t PayerBaseInfo::_internal_sex() const {
  return sex_;
}
inline int32_t PayerBaseInfo::sex() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.sex)
  return _internal_sex();
}
inline void PayerBaseInfo::_internal_set_sex(int32_t value) {
  
  sex_ = value;
}
inline void PayerBaseInfo::set_sex(int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.sex)
}

// uint32 applyTime = 17;
inline void PayerBaseInfo::clear_applytime() {
  applytime_ = 0u;
}
inline uint32_t PayerBaseInfo::_internal_applytime() const {
  return applytime_;
}
inline uint32_t PayerBaseInfo::applytime() const {
  // @@protoc_insertion_point(field_get:PayerBaseInfo.applyTime)
  return _internal_applytime();
}
inline void PayerBaseInfo::_internal_set_applytime(uint32_t value) {
  
  applytime_ = value;
}
inline void PayerBaseInfo::set_applytime(uint32_t value) {
  _internal_set_applytime(value);
  // @@protoc_insertion_point(field_set:PayerBaseInfo.applyTime)
}

// -------------------------------------------------------------------

// ReqHeartTick

// -------------------------------------------------------------------

// ResHeartTick

// uint32 nowTime = 1;
inline void ResHeartTick::clear_nowtime() {
  nowtime_ = 0u;
}
inline uint32_t ResHeartTick::_internal_nowtime() const {
  return nowtime_;
}
inline uint32_t ResHeartTick::nowtime() const {
  // @@protoc_insertion_point(field_get:ResHeartTick.nowTime)
  return _internal_nowtime();
}
inline void ResHeartTick::_internal_set_nowtime(uint32_t value) {
  
  nowtime_ = value;
}
inline void ResHeartTick::set_nowtime(uint32_t value) {
  _internal_set_nowtime(value);
  // @@protoc_insertion_point(field_set:ResHeartTick.nowTime)
}

// -------------------------------------------------------------------

// ReqServerGm

// string cmd = 1;
inline void ReqServerGm::clear_cmd() {
  cmd_.ClearToEmpty();
}
inline const std::string& ReqServerGm::cmd() const {
  // @@protoc_insertion_point(field_get:ReqServerGm.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqServerGm::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 cmd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqServerGm.cmd)
}
inline std::string* ReqServerGm::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:ReqServerGm.cmd)
  return _s;
}
inline const std::string& ReqServerGm::_internal_cmd() const {
  return cmd_.Get();
}
inline void ReqServerGm::_internal_set_cmd(const std::string& value) {
  
  cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqServerGm::_internal_mutable_cmd() {
  
  return cmd_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqServerGm::release_cmd() {
  // @@protoc_insertion_point(field_release:ReqServerGm.cmd)
  return cmd_.Release();
}
inline void ReqServerGm::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocated(cmd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cmd_.IsDefault()) {
    cmd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqServerGm.cmd)
}

// string args = 2;
inline void ReqServerGm::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& ReqServerGm::args() const {
  // @@protoc_insertion_point(field_get:ReqServerGm.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqServerGm::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqServerGm.args)
}
inline std::string* ReqServerGm::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:ReqServerGm.args)
  return _s;
}
inline const std::string& ReqServerGm::_internal_args() const {
  return args_.Get();
}
inline void ReqServerGm::_internal_set_args(const std::string& value) {
  
  args_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqServerGm::_internal_mutable_args() {
  
  return args_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqServerGm::release_args() {
  // @@protoc_insertion_point(field_release:ReqServerGm.args)
  return args_.Release();
}
inline void ReqServerGm::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(args, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault()) {
    args_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqServerGm.args)
}

// -------------------------------------------------------------------

// ReqChangeName

// string name = 1;
inline void ReqChangeName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqChangeName::name() const {
  // @@protoc_insertion_point(field_get:ReqChangeName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqChangeName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqChangeName.name)
}
inline std::string* ReqChangeName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ReqChangeName.name)
  return _s;
}
inline const std::string& ReqChangeName::_internal_name() const {
  return name_.Get();
}
inline void ReqChangeName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqChangeName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqChangeName::release_name() {
  // @@protoc_insertion_point(field_release:ReqChangeName.name)
  return name_.Release();
}
inline void ReqChangeName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqChangeName.name)
}

// -------------------------------------------------------------------

// ResChangeName

// string name = 1;
inline void ResChangeName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResChangeName::name() const {
  // @@protoc_insertion_point(field_get:ResChangeName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResChangeName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ResChangeName.name)
}
inline std::string* ResChangeName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ResChangeName.name)
  return _s;
}
inline const std::string& ResChangeName::_internal_name() const {
  return name_.Get();
}
inline void ResChangeName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResChangeName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResChangeName::release_name() {
  // @@protoc_insertion_point(field_release:ResChangeName.name)
  return name_.Release();
}
inline void ResChangeName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResChangeName.name)
}

// uint32 cnt = 2;
inline void ResChangeName::clear_cnt() {
  cnt_ = 0u;
}
inline uint32_t ResChangeName::_internal_cnt() const {
  return cnt_;
}
inline uint32_t ResChangeName::cnt() const {
  // @@protoc_insertion_point(field_get:ResChangeName.cnt)
  return _internal_cnt();
}
inline void ResChangeName::_internal_set_cnt(uint32_t value) {
  
  cnt_ = value;
}
inline void ResChangeName::set_cnt(uint32_t value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:ResChangeName.cnt)
}

// -------------------------------------------------------------------

// ReqPlayerChangeNameInfo

// -------------------------------------------------------------------

// ResPlayerChangeNameInfo

// uint32 cnt = 1;
inline void ResPlayerChangeNameInfo::clear_cnt() {
  cnt_ = 0u;
}
inline uint32_t ResPlayerChangeNameInfo::_internal_cnt() const {
  return cnt_;
}
inline uint32_t ResPlayerChangeNameInfo::cnt() const {
  // @@protoc_insertion_point(field_get:ResPlayerChangeNameInfo.cnt)
  return _internal_cnt();
}
inline void ResPlayerChangeNameInfo::_internal_set_cnt(uint32_t value) {
  
  cnt_ = value;
}
inline void ResPlayerChangeNameInfo::set_cnt(uint32_t value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:ResPlayerChangeNameInfo.cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
