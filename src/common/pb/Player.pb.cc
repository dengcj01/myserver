// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#include "Player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PlayerBaseData::PlayerBaseData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , banreason_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , power_(uint64_t{0u})
  , createtime_(0u)
  , level_(0u)
  , vip_(0u)
  , logintime_(0u)
  , guildid_(uint64_t{0u})
  , chargeval_(0u)
  , title_(0u)
  , headicon_(0u)
  , skin_(0u)
  , serverid_(0u)
  , gmlv_(0)
  , sex_(0)
  , logouttime_(0u)
  , sessionid_(uint64_t{0u})
  , exp_(0u)
  , bantime_(0u)
  , firstlogintime_(0u)
  , fromserverid_(0u){}
struct PlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerBaseDataDefaultTypeInternal() {}
  union {
    PlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerBaseDataDefaultTypeInternal _PlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR NotifyPlayerBaseData::NotifyPlayerBaseData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr){}
struct NotifyPlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyPlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyPlayerBaseDataDefaultTypeInternal() {}
  union {
    NotifyPlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyPlayerBaseDataDefaultTypeInternal _NotifyPlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR PayerBaseInfo::PayerBaseInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , level_(0u)
  , vip_(0u)
  , guildid_(uint64_t{0u})
  , power_(uint64_t{0u})
  , title_(0u)
  , headicon_(0u)
  , skin_(0u)
  , serverid_(0u)
  , logouttime_(0u)
  , dayshare_(0)
  , allshare_(0)
  , entertime_(0u)
  , sex_(0)
  , applytime_(0u){}
struct PayerBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PayerBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PayerBaseInfoDefaultTypeInternal() {}
  union {
    PayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PayerBaseInfoDefaultTypeInternal _PayerBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR ReqHeartTick::ReqHeartTick(
    ::_pbi::ConstantInitialized){}
struct ReqHeartTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqHeartTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqHeartTickDefaultTypeInternal() {}
  union {
    ReqHeartTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqHeartTickDefaultTypeInternal _ReqHeartTick_default_instance_;
PROTOBUF_CONSTEXPR ResHeartTick::ResHeartTick(
    ::_pbi::ConstantInitialized)
  : nowtime_(0u){}
struct ResHeartTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResHeartTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResHeartTickDefaultTypeInternal() {}
  union {
    ResHeartTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResHeartTickDefaultTypeInternal _ResHeartTick_default_instance_;
PROTOBUF_CONSTEXPR ReqServerGm::ReqServerGm(
    ::_pbi::ConstantInitialized)
  : cmd_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , args_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ReqServerGmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqServerGmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqServerGmDefaultTypeInternal() {}
  union {
    ReqServerGm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqServerGmDefaultTypeInternal _ReqServerGm_default_instance_;
PROTOBUF_CONSTEXPR ReqChangeName::ReqChangeName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ReqChangeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqChangeNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqChangeNameDefaultTypeInternal() {}
  union {
    ReqChangeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqChangeNameDefaultTypeInternal _ReqChangeName_default_instance_;
PROTOBUF_CONSTEXPR ResChangeName::ResChangeName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cnt_(0u){}
struct ResChangeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResChangeNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResChangeNameDefaultTypeInternal() {}
  union {
    ResChangeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResChangeNameDefaultTypeInternal _ResChangeName_default_instance_;
PROTOBUF_CONSTEXPR ReqPlayerChangeNameInfo::ReqPlayerChangeNameInfo(
    ::_pbi::ConstantInitialized){}
struct ReqPlayerChangeNameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqPlayerChangeNameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqPlayerChangeNameInfoDefaultTypeInternal() {}
  union {
    ReqPlayerChangeNameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqPlayerChangeNameInfoDefaultTypeInternal _ReqPlayerChangeNameInfo_default_instance_;
PROTOBUF_CONSTEXPR ResPlayerChangeNameInfo::ResPlayerChangeNameInfo(
    ::_pbi::ConstantInitialized)
  : cnt_(0u){}
struct ResPlayerChangeNameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResPlayerChangeNameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResPlayerChangeNameInfoDefaultTypeInternal() {}
  union {
    ResPlayerChangeNameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResPlayerChangeNameInfoDefaultTypeInternal _ResPlayerChangeNameInfo_default_instance_;
static ::_pb::Metadata file_level_metadata_Player_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Player_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Player_2eproto = nullptr;

const uint32_t TableStruct_Player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, name_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, icon_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, account_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, pf_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, createtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, power_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, level_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, vip_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, logintime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, guildid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, chargeval_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, title_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, headicon_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, skin_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, serverid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, gmlv_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, sex_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, logouttime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, exp_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, sessionid_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, extra_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, bantime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, banreason_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, firstlogintime_),
  PROTOBUF_FIELD_OFFSET(::PlayerBaseData, fromserverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyPlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyPlayerBaseData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, level_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, vip_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, guildid_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, power_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, title_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, headicon_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, skin_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, serverid_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, logouttime_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, dayshare_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, allshare_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, entertime_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::PayerBaseInfo, applytime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqHeartTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResHeartTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResHeartTick, nowtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqServerGm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqServerGm, cmd_),
  PROTOBUF_FIELD_OFFSET(::ReqServerGm, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqChangeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqChangeName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResChangeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResChangeName, name_),
  PROTOBUF_FIELD_OFFSET(::ResChangeName, cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqPlayerChangeNameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResPlayerChangeNameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResPlayerChangeNameInfo, cnt_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PlayerBaseData)},
  { 32, -1, -1, sizeof(::NotifyPlayerBaseData)},
  { 39, -1, -1, sizeof(::PayerBaseInfo)},
  { 62, -1, -1, sizeof(::ReqHeartTick)},
  { 68, -1, -1, sizeof(::ResHeartTick)},
  { 75, -1, -1, sizeof(::ReqServerGm)},
  { 83, -1, -1, sizeof(::ReqChangeName)},
  { 90, -1, -1, sizeof(::ResChangeName)},
  { 98, -1, -1, sizeof(::ReqPlayerChangeNameInfo)},
  { 104, -1, -1, sizeof(::ResPlayerChangeNameInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PlayerBaseData_default_instance_._instance,
  &::_NotifyPlayerBaseData_default_instance_._instance,
  &::_PayerBaseInfo_default_instance_._instance,
  &::_ReqHeartTick_default_instance_._instance,
  &::_ResHeartTick_default_instance_._instance,
  &::_ReqServerGm_default_instance_._instance,
  &::_ReqChangeName_default_instance_._instance,
  &::_ResChangeName_default_instance_._instance,
  &::_ReqPlayerChangeNameInfo_default_instance_._instance,
  &::_ResPlayerChangeNameInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Player_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Player.proto\"\275\003\n\016PlayerBaseData\022\013\n\003pid"
  "\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\017\n\007ac"
  "count\030\004 \001(\t\022\n\n\002pf\030\005 \001(\t\022\022\n\ncreateTime\030\006 "
  "\001(\r\022\r\n\005power\030\007 \001(\004\022\r\n\005level\030\010 \001(\r\022\013\n\003vip"
  "\030\t \001(\r\022\021\n\tloginTime\030\n \001(\r\022\017\n\007guildId\030\013 \001"
  "(\004\022\021\n\tchargeVal\030\014 \001(\r\022\r\n\005title\030\r \001(\r\022\020\n\010"
  "headIcon\030\016 \001(\r\022\014\n\004skin\030\017 \001(\r\022\020\n\010serverId"
  "\030\020 \001(\r\022\014\n\004gmlv\030\021 \001(\005\022\013\n\003sex\030\022 \001(\005\022\022\n\nlog"
  "outTime\030\023 \001(\r\022\013\n\003exp\030\024 \001(\r\022\021\n\tsessionId\030"
  "\025 \001(\004\022\r\n\005extra\030\026 \001(\t\022\017\n\007bantime\030\027 \001(\r\022\021\n"
  "\tbanreason\030\030 \001(\t\022\026\n\016firstLoginTime\030\031 \001(\r"
  "\022\024\n\014fromServerId\030\032 \001(\r\"5\n\024NotifyPlayerBa"
  "seData\022\035\n\004data\030\001 \001(\0132\017.PlayerBaseData\"\240\002"
  "\n\rPayerBaseInfo\022\013\n\003pid\030\001 \001(\004\022\014\n\004name\030\002 \001"
  "(\t\022\014\n\004icon\030\003 \001(\t\022\r\n\005level\030\004 \001(\r\022\013\n\003vip\030\005"
  " \001(\r\022\017\n\007guildId\030\006 \001(\004\022\r\n\005power\030\007 \001(\004\022\r\n\005"
  "title\030\010 \001(\r\022\020\n\010headIcon\030\t \001(\r\022\014\n\004skin\030\n "
  "\001(\r\022\020\n\010serverId\030\013 \001(\r\022\022\n\nlogoutTime\030\014 \001("
  "\r\022\020\n\010dayShare\030\r \001(\005\022\020\n\010allShare\030\016 \001(\005\022\021\n"
  "\tenterTime\030\017 \001(\r\022\013\n\003sex\030\020 \001(\005\022\021\n\tapplyTi"
  "me\030\021 \001(\r\"\016\n\014ReqHeartTick\"\037\n\014ResHeartTick"
  "\022\017\n\007nowTime\030\001 \001(\r\"(\n\013ReqServerGm\022\013\n\003cmd\030"
  "\001 \001(\t\022\014\n\004args\030\002 \001(\t\"\035\n\rReqChangeName\022\014\n\004"
  "name\030\001 \001(\t\"*\n\rResChangeName\022\014\n\004name\030\001 \001("
  "\t\022\013\n\003cnt\030\002 \001(\r\"\031\n\027ReqPlayerChangeNameInf"
  "o\"&\n\027ResPlayerChangeNameInfo\022\013\n\003cnt\030\001 \001("
  "\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Player_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Player_2eproto = {
    false, false, 1049, descriptor_table_protodef_Player_2eproto,
    "Player.proto",
    &descriptor_table_Player_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_Player_2eproto::offsets,
    file_level_metadata_Player_2eproto, file_level_enum_descriptors_Player_2eproto,
    file_level_service_descriptors_Player_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Player_2eproto_getter() {
  return &descriptor_table_Player_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Player_2eproto(&descriptor_table_Player_2eproto);

// ===================================================================

class PlayerBaseData::_Internal {
 public:
};

PlayerBaseData::PlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PlayerBaseData)
}
PlayerBaseData::PlayerBaseData(const PlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    extra_.Set(from._internal_extra(), 
      GetArenaForAllocation());
  }
  banreason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    banreason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_banreason().empty()) {
    banreason_.Set(from._internal_banreason(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(fromserverid_));
  // @@protoc_insertion_point(copy_constructor:PlayerBaseData)
}

inline void PlayerBaseData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
banreason_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  banreason_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(fromserverid_));
}

PlayerBaseData::~PlayerBaseData() {
  // @@protoc_insertion_point(destructor:PlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_.Destroy();
  account_.Destroy();
  pf_.Destroy();
  extra_.Destroy();
  banreason_.Destroy();
}

void PlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  icon_.ClearToEmpty();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  extra_.ClearToEmpty();
  banreason_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(fromserverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.name"));
        } else
          goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.icon"));
        } else
          goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.pf"));
        } else
          goto handle_unusual;
        continue;
      // uint32 createTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 loginTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guildId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chargeVal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          chargeval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 title = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headIcon = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gmlv = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          gmlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoutTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extra = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.extra"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bantime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          bantime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string banreason = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_banreason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PlayerBaseData.banreason"));
        } else
          goto handle_unusual;
        continue;
      // uint32 firstLoginTime = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          firstlogintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromServerId = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string pf = 5;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.pf");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pf(), target);
  }

  // uint32 createTime = 6;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_createtime(), target);
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_power(), target);
  }

  // uint32 level = 8;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_level(), target);
  }

  // uint32 vip = 9;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_vip(), target);
  }

  // uint32 loginTime = 10;
  if (this->_internal_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_logintime(), target);
  }

  // uint64 guildId = 11;
  if (this->_internal_guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_guildid(), target);
  }

  // uint32 chargeVal = 12;
  if (this->_internal_chargeval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_chargeval(), target);
  }

  // uint32 title = 13;
  if (this->_internal_title() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_title(), target);
  }

  // uint32 headIcon = 14;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_headicon(), target);
  }

  // uint32 skin = 15;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_skin(), target);
  }

  // uint32 serverId = 16;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_serverid(), target);
  }

  // int32 gmlv = 17;
  if (this->_internal_gmlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_gmlv(), target);
  }

  // int32 sex = 18;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_sex(), target);
  }

  // uint32 logoutTime = 19;
  if (this->_internal_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_logouttime(), target);
  }

  // uint32 exp = 20;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_exp(), target);
  }

  // uint64 sessionId = 21;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_sessionid(), target);
  }

  // string extra = 22;
  if (!this->_internal_extra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.extra");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_extra(), target);
  }

  // uint32 bantime = 23;
  if (this->_internal_bantime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_bantime(), target);
  }

  // string banreason = 24;
  if (!this->_internal_banreason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_banreason().data(), static_cast<int>(this->_internal_banreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerBaseData.banreason");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_banreason(), target);
  }

  // uint32 firstLoginTime = 25;
  if (this->_internal_firstlogintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_firstlogintime(), target);
  }

  // uint32 fromServerId = 26;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_fromserverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerBaseData)
  return target;
}

size_t PlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string account = 4;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 5;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // string extra = 22;
  if (!this->_internal_extra().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // string banreason = 24;
  if (!this->_internal_banreason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_banreason());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_power());
  }

  // uint32 createTime = 6;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_createtime());
  }

  // uint32 level = 8;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 vip = 9;
  if (this->_internal_vip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vip());
  }

  // uint32 loginTime = 10;
  if (this->_internal_logintime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logintime());
  }

  // uint64 guildId = 11;
  if (this->_internal_guildid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guildid());
  }

  // uint32 chargeVal = 12;
  if (this->_internal_chargeval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chargeval());
  }

  // uint32 title = 13;
  if (this->_internal_title() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_title());
  }

  // uint32 headIcon = 14;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
  }

  // uint32 skin = 15;
  if (this->_internal_skin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skin());
  }

  // uint32 serverId = 16;
  if (this->_internal_serverid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_serverid());
  }

  // int32 gmlv = 17;
  if (this->_internal_gmlv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gmlv());
  }

  // int32 sex = 18;
  if (this->_internal_sex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  // uint32 logoutTime = 19;
  if (this->_internal_logouttime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_logouttime());
  }

  // uint64 sessionId = 21;
  if (this->_internal_sessionid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint32 exp = 20;
  if (this->_internal_exp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_exp());
  }

  // uint32 bantime = 23;
  if (this->_internal_bantime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_bantime());
  }

  // uint32 firstLoginTime = 25;
  if (this->_internal_firstlogintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_firstlogintime());
  }

  // uint32 fromServerId = 26;
  if (this->_internal_fromserverid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fromserverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerBaseData::GetClassData() const { return &_class_data_; }

void PlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerBaseData *>(to)->MergeFrom(
      static_cast<const PlayerBaseData &>(from));
}


void PlayerBaseData::MergeFrom(const PlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (!from._internal_extra().empty()) {
    _internal_set_extra(from._internal_extra());
  }
  if (!from._internal_banreason().empty()) {
    _internal_set_banreason(from._internal_banreason());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from._internal_createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from._internal_logintime() != 0) {
    _internal_set_logintime(from._internal_logintime());
  }
  if (from._internal_guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from._internal_chargeval() != 0) {
    _internal_set_chargeval(from._internal_chargeval());
  }
  if (from._internal_title() != 0) {
    _internal_set_title(from._internal_title());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_skin() != 0) {
    _internal_set_skin(from._internal_skin());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_gmlv() != 0) {
    _internal_set_gmlv(from._internal_gmlv());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_logouttime() != 0) {
    _internal_set_logouttime(from._internal_logouttime());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_bantime() != 0) {
    _internal_set_bantime(from._internal_bantime());
  }
  if (from._internal_firstlogintime() != 0) {
    _internal_set_firstlogintime(from._internal_firstlogintime());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerBaseData::CopyFrom(const PlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseData::IsInitialized() const {
  return true;
}

void PlayerBaseData::InternalSwap(PlayerBaseData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extra_, lhs_arena,
      &other->extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &banreason_, lhs_arena,
      &other->banreason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerBaseData, fromserverid_)
      + sizeof(PlayerBaseData::fromserverid_)
      - PROTOBUF_FIELD_OFFSET(PlayerBaseData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[0]);
}

// ===================================================================

class NotifyPlayerBaseData::_Internal {
 public:
  static const ::PlayerBaseData& data(const NotifyPlayerBaseData* msg);
};

const ::PlayerBaseData&
NotifyPlayerBaseData::_Internal::data(const NotifyPlayerBaseData* msg) {
  return *msg->data_;
}
NotifyPlayerBaseData::NotifyPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NotifyPlayerBaseData)
}
NotifyPlayerBaseData::NotifyPlayerBaseData(const NotifyPlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerBaseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NotifyPlayerBaseData)
}

inline void NotifyPlayerBaseData::SharedCtor() {
data_ = nullptr;
}

NotifyPlayerBaseData::~NotifyPlayerBaseData() {
  // @@protoc_insertion_point(destructor:NotifyPlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyPlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void NotifyPlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyPlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyPlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyPlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlayerBaseData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyPlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyPlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayerBaseData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyPlayerBaseData)
  return target;
}

size_t NotifyPlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyPlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerBaseData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyPlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyPlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyPlayerBaseData::GetClassData() const { return &_class_data_; }

void NotifyPlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyPlayerBaseData *>(to)->MergeFrom(
      static_cast<const NotifyPlayerBaseData &>(from));
}


void NotifyPlayerBaseData::MergeFrom(const NotifyPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotifyPlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerBaseData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyPlayerBaseData::CopyFrom(const NotifyPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyPlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerBaseData::IsInitialized() const {
  return true;
}

void NotifyPlayerBaseData::InternalSwap(NotifyPlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyPlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[1]);
}

// ===================================================================

class PayerBaseInfo::_Internal {
 public:
};

PayerBaseInfo::PayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PayerBaseInfo)
}
PayerBaseInfo::PayerBaseInfo(const PayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&applytime_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(applytime_));
  // @@protoc_insertion_point(copy_constructor:PayerBaseInfo)
}

inline void PayerBaseInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&applytime_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(applytime_));
}

PayerBaseInfo::~PayerBaseInfo() {
  // @@protoc_insertion_point(destructor:PayerBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PayerBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_.Destroy();
}

void PayerBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayerBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PayerBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytime_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(applytime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayerBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PayerBaseInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PayerBaseInfo.icon"));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guildId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 headIcon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          headicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoutTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dayShare = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          dayshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 allShare = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          allshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enterTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          entertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 applyTime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          applytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayerBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PayerBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PayerBaseInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PayerBaseInfo.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 vip = 5;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_vip(), target);
  }

  // uint64 guildId = 6;
  if (this->_internal_guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_guildid(), target);
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_power(), target);
  }

  // uint32 title = 8;
  if (this->_internal_title() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_title(), target);
  }

  // uint32 headIcon = 9;
  if (this->_internal_headicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_headicon(), target);
  }

  // uint32 skin = 10;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_skin(), target);
  }

  // uint32 serverId = 11;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_serverid(), target);
  }

  // uint32 logoutTime = 12;
  if (this->_internal_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_logouttime(), target);
  }

  // int32 dayShare = 13;
  if (this->_internal_dayshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_dayshare(), target);
  }

  // int32 allShare = 14;
  if (this->_internal_allshare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_allshare(), target);
  }

  // uint32 enterTime = 15;
  if (this->_internal_entertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_entertime(), target);
  }

  // int32 sex = 16;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_sex(), target);
  }

  // uint32 applyTime = 17;
  if (this->_internal_applytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_applytime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayerBaseInfo)
  return target;
}

size_t PayerBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PayerBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 vip = 5;
  if (this->_internal_vip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vip());
  }

  // uint64 guildId = 6;
  if (this->_internal_guildid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guildid());
  }

  // uint64 power = 7;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_power());
  }

  // uint32 title = 8;
  if (this->_internal_title() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_title());
  }

  // uint32 headIcon = 9;
  if (this->_internal_headicon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headicon());
  }

  // uint32 skin = 10;
  if (this->_internal_skin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skin());
  }

  // uint32 serverId = 11;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  // uint32 logoutTime = 12;
  if (this->_internal_logouttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logouttime());
  }

  // int32 dayShare = 13;
  if (this->_internal_dayshare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dayshare());
  }

  // int32 allShare = 14;
  if (this->_internal_allshare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_allshare());
  }

  // uint32 enterTime = 15;
  if (this->_internal_entertime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entertime());
  }

  // int32 sex = 16;
  if (this->_internal_sex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  // uint32 applyTime = 17;
  if (this->_internal_applytime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_applytime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayerBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayerBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayerBaseInfo::GetClassData() const { return &_class_data_; }

void PayerBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayerBaseInfo *>(to)->MergeFrom(
      static_cast<const PayerBaseInfo &>(from));
}


void PayerBaseInfo::MergeFrom(const PayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from._internal_guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from._internal_title() != 0) {
    _internal_set_title(from._internal_title());
  }
  if (from._internal_headicon() != 0) {
    _internal_set_headicon(from._internal_headicon());
  }
  if (from._internal_skin() != 0) {
    _internal_set_skin(from._internal_skin());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_logouttime() != 0) {
    _internal_set_logouttime(from._internal_logouttime());
  }
  if (from._internal_dayshare() != 0) {
    _internal_set_dayshare(from._internal_dayshare());
  }
  if (from._internal_allshare() != 0) {
    _internal_set_allshare(from._internal_allshare());
  }
  if (from._internal_entertime() != 0) {
    _internal_set_entertime(from._internal_entertime());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_applytime() != 0) {
    _internal_set_applytime(from._internal_applytime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayerBaseInfo::CopyFrom(const PayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayerBaseInfo::IsInitialized() const {
  return true;
}

void PayerBaseInfo::InternalSwap(PayerBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayerBaseInfo, applytime_)
      + sizeof(PayerBaseInfo::applytime_)
      - PROTOBUF_FIELD_OFFSET(PayerBaseInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayerBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[2]);
}

// ===================================================================

class ReqHeartTick::_Internal {
 public:
};

ReqHeartTick::ReqHeartTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqHeartTick)
}
ReqHeartTick::ReqHeartTick(const ReqHeartTick& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqHeartTick)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqHeartTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqHeartTick::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqHeartTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[3]);
}

// ===================================================================

class ResHeartTick::_Internal {
 public:
};

ResHeartTick::ResHeartTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResHeartTick)
}
ResHeartTick::ResHeartTick(const ResHeartTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nowtime_ = from.nowtime_;
  // @@protoc_insertion_point(copy_constructor:ResHeartTick)
}

inline void ResHeartTick::SharedCtor() {
nowtime_ = 0u;
}

ResHeartTick::~ResHeartTick() {
  // @@protoc_insertion_point(destructor:ResHeartTick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResHeartTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResHeartTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResHeartTick::Clear() {
// @@protoc_insertion_point(message_clear_start:ResHeartTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nowtime_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResHeartTick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nowTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nowtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResHeartTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResHeartTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nowTime = 1;
  if (this->_internal_nowtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nowtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResHeartTick)
  return target;
}

size_t ResHeartTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResHeartTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 nowTime = 1;
  if (this->_internal_nowtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nowtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResHeartTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResHeartTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResHeartTick::GetClassData() const { return &_class_data_; }

void ResHeartTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResHeartTick *>(to)->MergeFrom(
      static_cast<const ResHeartTick &>(from));
}


void ResHeartTick::MergeFrom(const ResHeartTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResHeartTick)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nowtime() != 0) {
    _internal_set_nowtime(from._internal_nowtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResHeartTick::CopyFrom(const ResHeartTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResHeartTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeartTick::IsInitialized() const {
  return true;
}

void ResHeartTick::InternalSwap(ResHeartTick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nowtime_, other->nowtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResHeartTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[4]);
}

// ===================================================================

class ReqServerGm::_Internal {
 public:
};

ReqServerGm::ReqServerGm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqServerGm)
}
ReqServerGm::ReqServerGm(const ReqServerGm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd().empty()) {
    cmd_.Set(from._internal_cmd(), 
      GetArenaForAllocation());
  }
  args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    args_.Set(from._internal_args(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ReqServerGm)
}

inline void ReqServerGm::SharedCtor() {
cmd_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cmd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
args_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  args_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqServerGm::~ReqServerGm() {
  // @@protoc_insertion_point(destructor:ReqServerGm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqServerGm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cmd_.Destroy();
  args_.Destroy();
}

void ReqServerGm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqServerGm::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqServerGm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmpty();
  args_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqServerGm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqServerGm.cmd"));
        } else
          goto handle_unusual;
        continue;
      // string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqServerGm.args"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqServerGm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqServerGm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (!this->_internal_cmd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqServerGm.cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmd(), target);
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqServerGm.args");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqServerGm)
  return target;
}

size_t ReqServerGm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqServerGm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqServerGm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqServerGm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqServerGm::GetClassData() const { return &_class_data_; }

void ReqServerGm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqServerGm *>(to)->MergeFrom(
      static_cast<const ReqServerGm &>(from));
}


void ReqServerGm::MergeFrom(const ReqServerGm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqServerGm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd().empty()) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqServerGm::CopyFrom(const ReqServerGm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqServerGm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServerGm::IsInitialized() const {
  return true;
}

void ReqServerGm::InternalSwap(ReqServerGm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cmd_, lhs_arena,
      &other->cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &args_, lhs_arena,
      &other->args_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqServerGm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[5]);
}

// ===================================================================

class ReqChangeName::_Internal {
 public:
};

ReqChangeName::ReqChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqChangeName)
}
ReqChangeName::ReqChangeName(const ReqChangeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ReqChangeName)
}

inline void ReqChangeName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReqChangeName::~ReqChangeName() {
  // @@protoc_insertion_point(destructor:ReqChangeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqChangeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ReqChangeName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChangeName::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqChangeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChangeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqChangeName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChangeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqChangeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqChangeName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqChangeName)
  return target;
}

size_t ReqChangeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqChangeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChangeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChangeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChangeName::GetClassData() const { return &_class_data_; }

void ReqChangeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChangeName *>(to)->MergeFrom(
      static_cast<const ReqChangeName &>(from));
}


void ReqChangeName::MergeFrom(const ReqChangeName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqChangeName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChangeName::CopyFrom(const ReqChangeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqChangeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeName::IsInitialized() const {
  return true;
}

void ReqChangeName::InternalSwap(ReqChangeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChangeName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[6]);
}

// ===================================================================

class ResChangeName::_Internal {
 public:
};

ResChangeName::ResChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResChangeName)
}
ResChangeName::ResChangeName(const ResChangeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:ResChangeName)
}

inline void ResChangeName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cnt_ = 0u;
}

ResChangeName::~ResChangeName() {
  // @@protoc_insertion_point(destructor:ResChangeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResChangeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResChangeName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResChangeName::Clear() {
// @@protoc_insertion_point(message_clear_start:ResChangeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cnt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResChangeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResChangeName.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResChangeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResChangeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResChangeName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResChangeName)
  return target;
}

size_t ResChangeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResChangeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResChangeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResChangeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResChangeName::GetClassData() const { return &_class_data_; }

void ResChangeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResChangeName *>(to)->MergeFrom(
      static_cast<const ResChangeName &>(from));
}


void ResChangeName::MergeFrom(const ResChangeName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResChangeName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResChangeName::CopyFrom(const ResChangeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResChangeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangeName::IsInitialized() const {
  return true;
}

void ResChangeName::InternalSwap(ResChangeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(cnt_, other->cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResChangeName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[7]);
}

// ===================================================================

class ReqPlayerChangeNameInfo::_Internal {
 public:
};

ReqPlayerChangeNameInfo::ReqPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqPlayerChangeNameInfo)
}
ReqPlayerChangeNameInfo::ReqPlayerChangeNameInfo(const ReqPlayerChangeNameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqPlayerChangeNameInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPlayerChangeNameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPlayerChangeNameInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqPlayerChangeNameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[8]);
}

// ===================================================================

class ResPlayerChangeNameInfo::_Internal {
 public:
};

ResPlayerChangeNameInfo::ResPlayerChangeNameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResPlayerChangeNameInfo)
}
ResPlayerChangeNameInfo::ResPlayerChangeNameInfo(const ResPlayerChangeNameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:ResPlayerChangeNameInfo)
}

inline void ResPlayerChangeNameInfo::SharedCtor() {
cnt_ = 0u;
}

ResPlayerChangeNameInfo::~ResPlayerChangeNameInfo() {
  // @@protoc_insertion_point(destructor:ResPlayerChangeNameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResPlayerChangeNameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResPlayerChangeNameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResPlayerChangeNameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ResPlayerChangeNameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cnt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResPlayerChangeNameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResPlayerChangeNameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResPlayerChangeNameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResPlayerChangeNameInfo)
  return target;
}

size_t ResPlayerChangeNameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResPlayerChangeNameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResPlayerChangeNameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResPlayerChangeNameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResPlayerChangeNameInfo::GetClassData() const { return &_class_data_; }

void ResPlayerChangeNameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResPlayerChangeNameInfo *>(to)->MergeFrom(
      static_cast<const ResPlayerChangeNameInfo &>(from));
}


void ResPlayerChangeNameInfo::MergeFrom(const ResPlayerChangeNameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResPlayerChangeNameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResPlayerChangeNameInfo::CopyFrom(const ResPlayerChangeNameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResPlayerChangeNameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerChangeNameInfo::IsInitialized() const {
  return true;
}

void ResPlayerChangeNameInfo::InternalSwap(ResPlayerChangeNameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cnt_, other->cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerChangeNameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Player_2eproto_getter, &descriptor_table_Player_2eproto_once,
      file_level_metadata_Player_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerBaseData*
Arena::CreateMaybeMessage< ::PlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyPlayerBaseData*
Arena::CreateMaybeMessage< ::NotifyPlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyPlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::PayerBaseInfo*
Arena::CreateMaybeMessage< ::PayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqHeartTick*
Arena::CreateMaybeMessage< ::ReqHeartTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqHeartTick >(arena);
}
template<> PROTOBUF_NOINLINE ::ResHeartTick*
Arena::CreateMaybeMessage< ::ResHeartTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResHeartTick >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqServerGm*
Arena::CreateMaybeMessage< ::ReqServerGm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqServerGm >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqChangeName*
Arena::CreateMaybeMessage< ::ReqChangeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqChangeName >(arena);
}
template<> PROTOBUF_NOINLINE ::ResChangeName*
Arena::CreateMaybeMessage< ::ResChangeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResChangeName >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqPlayerChangeNameInfo*
Arena::CreateMaybeMessage< ::ReqPlayerChangeNameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqPlayerChangeNameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ResPlayerChangeNameInfo*
Arena::CreateMaybeMessage< ::ResPlayerChangeNameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResPlayerChangeNameInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
