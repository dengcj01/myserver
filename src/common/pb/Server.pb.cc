// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#include "Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ReqDbSelectPlayer::ReqDbSelectPlayer(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , fromserverid_(0u){}
struct ReqDbSelectPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbSelectPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbSelectPlayerDefaultTypeInternal() {}
  union {
    ReqDbSelectPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbSelectPlayerDefaultTypeInternal _ReqDbSelectPlayer_default_instance_;
PROTOBUF_CONSTEXPR ResDbSelectPlayer::ResDbSelectPlayer(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , code_(0u){}
struct ResDbSelectPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbSelectPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbSelectPlayerDefaultTypeInternal() {}
  union {
    ResDbSelectPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbSelectPlayerDefaultTypeInternal _ResDbSelectPlayer_default_instance_;
PROTOBUF_CONSTEXPR ReqDbCreatePlayer::ReqDbCreatePlayer(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pf_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sex_(0u)
  , fromserverid_(0u)
  , sessionid_(uint64_t{0u})
  , serverid_(0u){}
struct ReqDbCreatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbCreatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbCreatePlayerDefaultTypeInternal() {}
  union {
    ReqDbCreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbCreatePlayerDefaultTypeInternal _ReqDbCreatePlayer_default_instance_;
PROTOBUF_CONSTEXPR ResDbCreatePlayer::ResDbCreatePlayer(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sex_(0u)
  , code_(0u)
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResDbCreatePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbCreatePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbCreatePlayerDefaultTypeInternal() {}
  union {
    ResDbCreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbCreatePlayerDefaultTypeInternal _ResDbCreatePlayer_default_instance_;
PROTOBUF_CONSTEXPR ReqDbEnterGame::ReqDbEnterGame(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ReqDbEnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbEnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbEnterGameDefaultTypeInternal() {}
  union {
    ReqDbEnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbEnterGameDefaultTypeInternal _ReqDbEnterGame_default_instance_;
PROTOBUF_CONSTEXPR ResDbEnterGame::ResDbEnterGame(
    ::_pbi::ConstantInitialized)
  : pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , code_(0u){}
struct ResDbEnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbEnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbEnterGameDefaultTypeInternal() {}
  union {
    ResDbEnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbEnterGameDefaultTypeInternal _ResDbEnterGame_default_instance_;
PROTOBUF_CONSTEXPR ResReturnPlayerBaseData::ResReturnPlayerBaseData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , pid_(uint64_t{0u})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u}){}
struct ResReturnPlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnPlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnPlayerBaseDataDefaultTypeInternal() {}
  union {
    ResReturnPlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnPlayerBaseDataDefaultTypeInternal _ResReturnPlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR ResReturnPlayerModuleData::ResReturnPlayerModuleData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , csessionid_(uint64_t{0u})
  , sessionid_(uint64_t{0u})
  , moduleid_(0u){}
struct ResReturnPlayerModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResReturnPlayerModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResReturnPlayerModuleDataDefaultTypeInternal() {}
  union {
    ResReturnPlayerModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResReturnPlayerModuleDataDefaultTypeInternal _ResReturnPlayerModuleData_default_instance_;
PROTOBUF_CONSTEXPR ReqSavePlayerBaseData::ReqSavePlayerBaseData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , pid_(uint64_t{0u})
  , opt_(0){}
struct ReqSavePlayerBaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSavePlayerBaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSavePlayerBaseDataDefaultTypeInternal() {}
  union {
    ReqSavePlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSavePlayerBaseDataDefaultTypeInternal _ReqSavePlayerBaseData_default_instance_;
PROTOBUF_CONSTEXPR ReqSavePlayerModuleData::ReqSavePlayerModuleData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , moduleid_(0u)
  , serverid_(0u){}
struct ReqSavePlayerModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSavePlayerModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSavePlayerModuleDataDefaultTypeInternal() {}
  union {
    ReqSavePlayerModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSavePlayerModuleDataDefaultTypeInternal _ReqSavePlayerModuleData_default_instance_;
PROTOBUF_CONSTEXPR ReqGameReport::ReqGameReport(
    ::_pbi::ConstantInitialized)
  : serverid_(0u){}
struct ReqGameReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqGameReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqGameReportDefaultTypeInternal() {}
  union {
    ReqGameReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqGameReportDefaultTypeInternal _ReqGameReport_default_instance_;
PROTOBUF_CONSTEXPR ReqGameQuit::ReqGameQuit(
    ::_pbi::ConstantInitialized){}
struct ReqGameQuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqGameQuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqGameQuitDefaultTypeInternal() {}
  union {
    ReqGameQuit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqGameQuitDefaultTypeInternal _ReqGameQuit_default_instance_;
PROTOBUF_CONSTEXPR ReqSaveRankData::ReqSaveRankData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serverid_(0u)
  , ranklen_(0u){}
struct ReqSaveRankDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSaveRankDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSaveRankDataDefaultTypeInternal() {}
  union {
    ReqSaveRankData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSaveRankDataDefaultTypeInternal _ReqSaveRankData_default_instance_;
PROTOBUF_CONSTEXPR ReqSaveGlobalData::ReqSaveGlobalData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , moduleid_(0u)
  , serverid_(0u){}
struct ReqSaveGlobalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSaveGlobalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSaveGlobalDataDefaultTypeInternal() {}
  union {
    ReqSaveGlobalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSaveGlobalDataDefaultTypeInternal _ReqSaveGlobalData_default_instance_;
PROTOBUF_CONSTEXPR ReqDelRankData::ReqDelRankData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serverid_(0u){}
struct ReqDelRankDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDelRankDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDelRankDataDefaultTypeInternal() {}
  union {
    ReqDelRankData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDelRankDataDefaultTypeInternal _ReqDelRankData_default_instance_;
PROTOBUF_CONSTEXPR ReqDelGlobalData::ReqDelGlobalData(
    ::_pbi::ConstantInitialized)
  : moduleid_(0u){}
struct ReqDelGlobalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDelGlobalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDelGlobalDataDefaultTypeInternal() {}
  union {
    ReqDelGlobalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDelGlobalDataDefaultTypeInternal _ReqDelGlobalData_default_instance_;
PROTOBUF_CONSTEXPR ReqRegPlayerBaseInfo::ReqRegPlayerBaseInfo(
    ::_pbi::ConstantInitialized){}
struct ReqRegPlayerBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqRegPlayerBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqRegPlayerBaseInfoDefaultTypeInternal() {}
  union {
    ReqRegPlayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqRegPlayerBaseInfoDefaultTypeInternal _ReqRegPlayerBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR ReqUpdatePlayerBaseInfo::ReqUpdatePlayerBaseInfo(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u}){}
struct ReqUpdatePlayerBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqUpdatePlayerBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqUpdatePlayerBaseInfoDefaultTypeInternal() {}
  union {
    ReqUpdatePlayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqUpdatePlayerBaseInfoDefaultTypeInternal _ReqUpdatePlayerBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR ReqDbUpdatePlayerName::ReqDbUpdatePlayerName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u}){}
struct ReqDbUpdatePlayerNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqDbUpdatePlayerNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqDbUpdatePlayerNameDefaultTypeInternal() {}
  union {
    ReqDbUpdatePlayerName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqDbUpdatePlayerNameDefaultTypeInternal _ReqDbUpdatePlayerName_default_instance_;
PROTOBUF_CONSTEXPR ResDbUpdatePlayerName::ResDbUpdatePlayerName(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(uint64_t{0u})
  , code_(0u){}
struct ResDbUpdatePlayerNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResDbUpdatePlayerNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResDbUpdatePlayerNameDefaultTypeInternal() {}
  union {
    ResDbUpdatePlayerName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResDbUpdatePlayerNameDefaultTypeInternal _ResDbUpdatePlayerName_default_instance_;
PROTOBUF_CONSTEXPR ReqCloseDbServer::ReqCloseDbServer(
    ::_pbi::ConstantInitialized){}
struct ReqCloseDbServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqCloseDbServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqCloseDbServerDefaultTypeInternal() {}
  union {
    ReqCloseDbServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqCloseDbServerDefaultTypeInternal _ReqCloseDbServer_default_instance_;
static ::_pb::Metadata file_level_metadata_Server_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Server_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Server_2eproto = nullptr;

const uint32_t TableStruct_Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, account_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, pf_),
  PROTOBUF_FIELD_OFFSET(::ReqDbSelectPlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbSelectPlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, sex_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, name_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, account_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, pf_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, fromserverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, serverid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbCreatePlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, sex_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, name_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbCreatePlayer, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ReqDbEnterGame, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, code_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResDbEnterGame, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, data_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerBaseData, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, moduleid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, data_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, csessionid_),
  PROTOBUF_FIELD_OFFSET(::ResReturnPlayerModuleData, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, data_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerBaseData, opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, moduleid_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, data_),
  PROTOBUF_FIELD_OFFSET(::ReqSavePlayerModuleData, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqGameReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqGameReport, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqGameQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSaveRankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSaveRankData, name_),
  PROTOBUF_FIELD_OFFSET(::ReqSaveRankData, data_),
  PROTOBUF_FIELD_OFFSET(::ReqSaveRankData, serverid_),
  PROTOBUF_FIELD_OFFSET(::ReqSaveRankData, ranklen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSaveGlobalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSaveGlobalData, moduleid_),
  PROTOBUF_FIELD_OFFSET(::ReqSaveGlobalData, serverid_),
  PROTOBUF_FIELD_OFFSET(::ReqSaveGlobalData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDelRankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDelRankData, name_),
  PROTOBUF_FIELD_OFFSET(::ReqDelRankData, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDelGlobalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDelGlobalData, moduleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqRegPlayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqUpdatePlayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqUpdatePlayerBaseInfo, data_),
  PROTOBUF_FIELD_OFFSET(::ReqUpdatePlayerBaseInfo, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqDbUpdatePlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqDbUpdatePlayerName, name_),
  PROTOBUF_FIELD_OFFSET(::ReqDbUpdatePlayerName, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResDbUpdatePlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResDbUpdatePlayerName, name_),
  PROTOBUF_FIELD_OFFSET(::ResDbUpdatePlayerName, pid_),
  PROTOBUF_FIELD_OFFSET(::ResDbUpdatePlayerName, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqCloseDbServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ReqDbSelectPlayer)},
  { 11, -1, -1, sizeof(::ResDbSelectPlayer)},
  { 21, -1, -1, sizeof(::ReqDbCreatePlayer)},
  { 36, -1, -1, sizeof(::ResDbCreatePlayer)},
  { 48, -1, -1, sizeof(::ReqDbEnterGame)},
  { 57, -1, -1, sizeof(::ResDbEnterGame)},
  { 67, -1, -1, sizeof(::ResReturnPlayerBaseData)},
  { 77, -1, -1, sizeof(::ResReturnPlayerModuleData)},
  { 87, -1, -1, sizeof(::ReqSavePlayerBaseData)},
  { 96, -1, -1, sizeof(::ReqSavePlayerModuleData)},
  { 106, -1, -1, sizeof(::ReqGameReport)},
  { 113, -1, -1, sizeof(::ReqGameQuit)},
  { 119, -1, -1, sizeof(::ReqSaveRankData)},
  { 129, -1, -1, sizeof(::ReqSaveGlobalData)},
  { 138, -1, -1, sizeof(::ReqDelRankData)},
  { 146, -1, -1, sizeof(::ReqDelGlobalData)},
  { 153, -1, -1, sizeof(::ReqRegPlayerBaseInfo)},
  { 159, -1, -1, sizeof(::ReqUpdatePlayerBaseInfo)},
  { 167, -1, -1, sizeof(::ReqDbUpdatePlayerName)},
  { 175, -1, -1, sizeof(::ResDbUpdatePlayerName)},
  { 184, -1, -1, sizeof(::ReqCloseDbServer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ReqDbSelectPlayer_default_instance_._instance,
  &::_ResDbSelectPlayer_default_instance_._instance,
  &::_ReqDbCreatePlayer_default_instance_._instance,
  &::_ResDbCreatePlayer_default_instance_._instance,
  &::_ReqDbEnterGame_default_instance_._instance,
  &::_ResDbEnterGame_default_instance_._instance,
  &::_ResReturnPlayerBaseData_default_instance_._instance,
  &::_ResReturnPlayerModuleData_default_instance_._instance,
  &::_ReqSavePlayerBaseData_default_instance_._instance,
  &::_ReqSavePlayerModuleData_default_instance_._instance,
  &::_ReqGameReport_default_instance_._instance,
  &::_ReqGameQuit_default_instance_._instance,
  &::_ReqSaveRankData_default_instance_._instance,
  &::_ReqSaveGlobalData_default_instance_._instance,
  &::_ReqDelRankData_default_instance_._instance,
  &::_ReqDelGlobalData_default_instance_._instance,
  &::_ReqRegPlayerBaseInfo_default_instance_._instance,
  &::_ReqUpdatePlayerBaseInfo_default_instance_._instance,
  &::_ReqDbUpdatePlayerName_default_instance_._instance,
  &::_ResDbUpdatePlayerName_default_instance_._instance,
  &::_ReqCloseDbServer_default_instance_._instance,
};

const char descriptor_table_protodef_Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Server.proto\032\014Player.proto\"m\n\021ReqDbSel"
  "ectPlayer\022\022\n\ncsessionId\030\001 \001(\004\022\024\n\014fromSer"
  "verId\030\002 \001(\r\022\017\n\007account\030\003 \001(\t\022\n\n\002pf\030\004 \001(\t"
  "\022\021\n\tsessionId\030\005 \001(\004\"U\n\021ResDbSelectPlayer"
  "\022\013\n\003pid\030\001 \001(\004\022\022\n\ncsessionId\030\002 \001(\004\022\014\n\004cod"
  "e\030\003 \001(\r\022\021\n\tsessionId\030\004 \001(\004\"\247\001\n\021ReqDbCrea"
  "tePlayer\022\013\n\003sex\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003p"
  "id\030\003 \001(\004\022\022\n\ncsessionId\030\004 \001(\004\022\017\n\007account\030"
  "\005 \001(\t\022\n\n\002pf\030\006 \001(\t\022\024\n\014fromServerId\030\007 \001(\r\022"
  "\020\n\010serverId\030\010 \001(\r\022\021\n\tsessionId\030\t \001(\004\"p\n\021"
  "ResDbCreatePlayer\022\013\n\003sex\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\t\022\013\n\003pid\030\003 \001(\004\022\014\n\004code\030\004 \001(\r\022\022\n\ncsess"
  "ionId\030\005 \001(\004\022\021\n\tsessionId\030\007 \001(\004\"D\n\016ReqDbE"
  "nterGame\022\013\n\003pid\030\001 \001(\004\022\022\n\ncsessionId\030\002 \001("
  "\004\022\021\n\tsessionId\030\003 \001(\004\"R\n\016ResDbEnterGame\022\013"
  "\n\003pid\030\001 \001(\004\022\014\n\004code\030\002 \001(\r\022\022\n\ncsessionId\030"
  "\003 \001(\004\022\021\n\tsessionId\030\004 \001(\004\"l\n\027ResReturnPla"
  "yerBaseData\022\013\n\003pid\030\001 \001(\004\022\035\n\004data\030\002 \001(\0132\017"
  ".PlayerBaseData\022\022\n\ncsessionId\030\003 \001(\004\022\021\n\ts"
  "essionId\030\004 \001(\004\"b\n\031ResReturnPlayerModuleD"
  "ata\022\020\n\010moduleId\030\001 \001(\r\022\014\n\004data\030\002 \001(\t\022\022\n\nc"
  "sessionId\030\003 \001(\004\022\021\n\tsessionId\030\004 \001(\004\"P\n\025Re"
  "qSavePlayerBaseData\022\013\n\003pid\030\001 \001(\004\022\035\n\004data"
  "\030\002 \001(\0132\017.PlayerBaseData\022\013\n\003opt\030\003 \001(\005\"X\n\027"
  "ReqSavePlayerModuleData\022\013\n\003pid\030\001 \001(\004\022\020\n\010"
  "moduleId\030\002 \001(\r\022\014\n\004data\030\003 \001(\t\022\020\n\010serverId"
  "\030\004 \001(\r\"!\n\rReqGameReport\022\020\n\010serverId\030\001 \001("
  "\r\"\r\n\013ReqGameQuit\"P\n\017ReqSaveRankData\022\014\n\004n"
  "ame\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\022\020\n\010serverId\030\003 \001("
  "\r\022\017\n\007rankLen\030\004 \001(\r\"E\n\021ReqSaveGlobalData\022"
  "\020\n\010moduleId\030\001 \001(\r\022\020\n\010serverId\030\002 \001(\r\022\014\n\004d"
  "ata\030\003 \001(\t\"0\n\016ReqDelRankData\022\014\n\004name\030\001 \001("
  "\t\022\020\n\010serverid\030\002 \001(\r\"$\n\020ReqDelGlobalData\022"
  "\020\n\010moduleId\030\001 \001(\r\"\026\n\024ReqRegPlayerBaseInf"
  "o\"4\n\027ReqUpdatePlayerBaseInfo\022\014\n\004data\030\001 \001"
  "(\t\022\013\n\003pid\030\002 \001(\004\"2\n\025ReqDbUpdatePlayerName"
  "\022\014\n\004name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\004\"@\n\025ResDbUpda"
  "tePlayerName\022\014\n\004name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\004\022"
  "\014\n\004code\030\003 \001(\r\"\022\n\020ReqCloseDbServer*\264\004\n\017Se"
  "rverErrorCode\022\013\n\007Success\020\000\022\013\n\007NoMatch\020\001\022"
  "\014\n\010IsOnline\020\002\022\021\n\rPasswordError\020\003\022\021\n\rBann"
  "edAccount\020\004\022\017\n\013DbAuthError\020\005\022\021\n\rDbSelect"
  "Error\020\006\022\021\n\rDbCreateError\020\007\022\r\n\tNoAccount\020"
  "\010\022\014\n\010BannedIp\020\t\022\020\n\014NameRepeated\020\n\022\r\n\tNam"
  "eError\020\013\022\n\n\006NoAuth\020\014\022\017\n\013PidRepeated\020\r\022\022\n"
  "\016PlayerIsOnline\020\016\022\025\n\021PlayerIsNotOnline\020\017"
  "\022\021\n\rAccountExists\020\020\022\023\n\017AccountExistsDb\020\021"
  "\022\017\n\013DbErrorBase\020\022\022\021\n\rNoFindSession\020\023\022\025\n\021"
  "ReAccountNoPlayer\020\024\022\020\n\014NoAuthCreate\020\025\022\017\n"
  "\013NoAuthEnter\020\026\022\027\n\023LoadModuleDataError\020\027\022"
  "\023\n\017UpdateTimeError\020\030\022\022\n\016CreateSqlError\020\031"
  "\022\022\n\016NoRegEnterGame\020\032\022\021\n\rHavePidCreate\020\033\022"
  "\023\n\017NameToLongError\020\034\022\022\n\016AccountIllegal\020\035"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Server_2eproto_deps[1] = {
  &::descriptor_table_Player_2eproto,
};
static ::_pbi::once_flag descriptor_table_Server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Server_2eproto = {
    false, false, 2128, descriptor_table_protodef_Server_2eproto,
    "Server.proto",
    &descriptor_table_Server_2eproto_once, descriptor_table_Server_2eproto_deps, 1, 21,
    schemas, file_default_instances, TableStruct_Server_2eproto::offsets,
    file_level_metadata_Server_2eproto, file_level_enum_descriptors_Server_2eproto,
    file_level_service_descriptors_Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Server_2eproto_getter() {
  return &descriptor_table_Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Server_2eproto(&descriptor_table_Server_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Server_2eproto);
  return file_level_enum_descriptors_Server_2eproto[0];
}
bool ServerErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ReqDbSelectPlayer::_Internal {
 public:
};

ReqDbSelectPlayer::ReqDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbSelectPlayer)
}
ReqDbSelectPlayer::ReqDbSelectPlayer(const ReqDbSelectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&csessionid_, &from.csessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbSelectPlayer)
}

inline void ReqDbSelectPlayer::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&csessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserverid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
}

ReqDbSelectPlayer::~ReqDbSelectPlayer() {
  // @@protoc_insertion_point(destructor:ReqDbSelectPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbSelectPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  pf_.Destroy();
}

void ReqDbSelectPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbSelectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&csessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserverid_) -
      reinterpret_cast<char*>(&csessionid_)) + sizeof(fromserverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbSelectPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 csessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromServerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbSelectPlayer.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbSelectPlayer.pf"));
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbSelectPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 csessionId = 1;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_csessionid(), target);
  }

  // uint32 fromServerId = 2;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fromserverid(), target);
  }

  // string account = 3;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbSelectPlayer.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  // string pf = 4;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbSelectPlayer.pf");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pf(), target);
  }

  // uint64 sessionId = 5;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbSelectPlayer)
  return target;
}

size_t ReqDbSelectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbSelectPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 4;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // uint64 csessionId = 1;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 5;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint32 fromServerId = 2;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromserverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbSelectPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbSelectPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbSelectPlayer::GetClassData() const { return &_class_data_; }

void ReqDbSelectPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbSelectPlayer *>(to)->MergeFrom(
      static_cast<const ReqDbSelectPlayer &>(from));
}


void ReqDbSelectPlayer::MergeFrom(const ReqDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbSelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbSelectPlayer::CopyFrom(const ReqDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbSelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbSelectPlayer::IsInitialized() const {
  return true;
}

void ReqDbSelectPlayer::InternalSwap(ReqDbSelectPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbSelectPlayer, fromserverid_)
      + sizeof(ReqDbSelectPlayer::fromserverid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbSelectPlayer, csessionid_)>(
          reinterpret_cast<char*>(&csessionid_),
          reinterpret_cast<char*>(&other->csessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbSelectPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[0]);
}

// ===================================================================

class ResDbSelectPlayer::_Internal {
 public:
};

ResDbSelectPlayer::ResDbSelectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbSelectPlayer)
}
ResDbSelectPlayer::ResDbSelectPlayer(const ResDbSelectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:ResDbSelectPlayer)
}

inline void ResDbSelectPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
}

ResDbSelectPlayer::~ResDbSelectPlayer() {
  // @@protoc_insertion_point(destructor:ResDbSelectPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbSelectPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResDbSelectPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbSelectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbSelectPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbSelectPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbSelectPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_csessionid(), target);
  }

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_code(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbSelectPlayer)
  return target;
}

size_t ResDbSelectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbSelectPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbSelectPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbSelectPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbSelectPlayer::GetClassData() const { return &_class_data_; }

void ResDbSelectPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbSelectPlayer *>(to)->MergeFrom(
      static_cast<const ResDbSelectPlayer &>(from));
}


void ResDbSelectPlayer::MergeFrom(const ResDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbSelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbSelectPlayer::CopyFrom(const ResDbSelectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbSelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbSelectPlayer::IsInitialized() const {
  return true;
}

void ResDbSelectPlayer::InternalSwap(ResDbSelectPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbSelectPlayer, code_)
      + sizeof(ResDbSelectPlayer::code_)
      - PROTOBUF_FIELD_OFFSET(ResDbSelectPlayer, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbSelectPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[1]);
}

// ===================================================================

class ReqDbCreatePlayer::_Internal {
 public:
};

ReqDbCreatePlayer::ReqDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbCreatePlayer)
}
ReqDbCreatePlayer::ReqDbCreatePlayer(const ReqDbCreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  pf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pf().empty()) {
    pf_.Set(from._internal_pf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbCreatePlayer)
}

inline void ReqDbCreatePlayer::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pf_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pf_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

ReqDbCreatePlayer::~ReqDbCreatePlayer() {
  // @@protoc_insertion_point(destructor:ReqDbCreatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbCreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  account_.Destroy();
  pf_.Destroy();
}

void ReqDbCreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  account_.ClearToEmpty();
  pf_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbCreatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbCreatePlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbCreatePlayer.account"));
        } else
          goto handle_unusual;
        continue;
      // string pf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbCreatePlayer.pf"));
        } else
          goto handle_unusual;
        continue;
      // uint32 fromServerId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          fromserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbCreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sex = 1;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sex(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbCreatePlayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pid(), target);
  }

  // uint64 csessionId = 4;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_csessionid(), target);
  }

  // string account = 5;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbCreatePlayer.account");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_account(), target);
  }

  // string pf = 6;
  if (!this->_internal_pf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pf().data(), static_cast<int>(this->_internal_pf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbCreatePlayer.pf");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pf(), target);
  }

  // uint32 fromServerId = 7;
  if (this->_internal_fromserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fromserverid(), target);
  }

  // uint32 serverId = 8;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_serverid(), target);
  }

  // uint64 sessionId = 9;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbCreatePlayer)
  return target;
}

size_t ReqDbCreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbCreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string account = 5;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string pf = 6;
  if (!this->_internal_pf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pf());
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 4;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint32 sex = 1;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
  }

  // uint32 fromServerId = 7;
  if (this->_internal_fromserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromserverid());
  }

  // uint64 sessionId = 9;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint32 serverId = 8;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbCreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbCreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbCreatePlayer::GetClassData() const { return &_class_data_; }

void ReqDbCreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbCreatePlayer *>(to)->MergeFrom(
      static_cast<const ReqDbCreatePlayer &>(from));
}


void ReqDbCreatePlayer::MergeFrom(const ReqDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_pf().empty()) {
    _internal_set_pf(from._internal_pf());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_fromserverid() != 0) {
    _internal_set_fromserverid(from._internal_fromserverid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbCreatePlayer::CopyFrom(const ReqDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbCreatePlayer::IsInitialized() const {
  return true;
}

void ReqDbCreatePlayer::InternalSwap(ReqDbCreatePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pf_, lhs_arena,
      &other->pf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbCreatePlayer, serverid_)
      + sizeof(ReqDbCreatePlayer::serverid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbCreatePlayer, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbCreatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[2]);
}

// ===================================================================

class ResDbCreatePlayer::_Internal {
 public:
};

ResDbCreatePlayer::ResDbCreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbCreatePlayer)
}
ResDbCreatePlayer::ResDbCreatePlayer(const ResDbCreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sex_, &from.sex_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResDbCreatePlayer)
}

inline void ResDbCreatePlayer::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
}

ResDbCreatePlayer::~ResDbCreatePlayer() {
  // @@protoc_insertion_point(destructor:ResDbCreatePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbCreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResDbCreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&sex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&sex_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbCreatePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResDbCreatePlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbCreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbCreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sex = 1;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sex(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResDbCreatePlayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pid(), target);
  }

  // uint32 code = 4;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_code(), target);
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 7;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbCreatePlayer)
  return target;
}

size_t ResDbCreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbCreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 sex = 1;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sex());
  }

  // uint32 code = 4;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  // uint64 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 5;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 7;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbCreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbCreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbCreatePlayer::GetClassData() const { return &_class_data_; }

void ResDbCreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbCreatePlayer *>(to)->MergeFrom(
      static_cast<const ResDbCreatePlayer &>(from));
}


void ResDbCreatePlayer::MergeFrom(const ResDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbCreatePlayer::CopyFrom(const ResDbCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbCreatePlayer::IsInitialized() const {
  return true;
}

void ResDbCreatePlayer::InternalSwap(ResDbCreatePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbCreatePlayer, sessionid_)
      + sizeof(ResDbCreatePlayer::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResDbCreatePlayer, sex_)>(
          reinterpret_cast<char*>(&sex_),
          reinterpret_cast<char*>(&other->sex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbCreatePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[3]);
}

// ===================================================================

class ReqDbEnterGame::_Internal {
 public:
};

ReqDbEnterGame::ReqDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbEnterGame)
}
ReqDbEnterGame::ReqDbEnterGame(const ReqDbEnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ReqDbEnterGame)
}

inline void ReqDbEnterGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
}

ReqDbEnterGame::~ReqDbEnterGame() {
  // @@protoc_insertion_point(destructor:ReqDbEnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbEnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqDbEnterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbEnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbEnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbEnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbEnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbEnterGame)
  return target;
}

size_t ReqDbEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbEnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 2;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 3;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbEnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbEnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbEnterGame::GetClassData() const { return &_class_data_; }

void ReqDbEnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbEnterGame *>(to)->MergeFrom(
      static_cast<const ReqDbEnterGame &>(from));
}


void ReqDbEnterGame::MergeFrom(const ReqDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbEnterGame::CopyFrom(const ReqDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbEnterGame::IsInitialized() const {
  return true;
}

void ReqDbEnterGame::InternalSwap(ReqDbEnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDbEnterGame, sessionid_)
      + sizeof(ReqDbEnterGame::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ReqDbEnterGame, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbEnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[4]);
}

// ===================================================================

class ResDbEnterGame::_Internal {
 public:
};

ResDbEnterGame::ResDbEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbEnterGame)
}
ResDbEnterGame::ResDbEnterGame(const ResDbEnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:ResDbEnterGame)
}

inline void ResDbEnterGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
}

ResDbEnterGame::~ResDbEnterGame() {
  // @@protoc_insertion_point(destructor:ResDbEnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbEnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResDbEnterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbEnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbEnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbEnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbEnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbEnterGame)
  return target;
}

size_t ResDbEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbEnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbEnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbEnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbEnterGame::GetClassData() const { return &_class_data_; }

void ResDbEnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbEnterGame *>(to)->MergeFrom(
      static_cast<const ResDbEnterGame &>(from));
}


void ResDbEnterGame::MergeFrom(const ResDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbEnterGame::CopyFrom(const ResDbEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbEnterGame::IsInitialized() const {
  return true;
}

void ResDbEnterGame::InternalSwap(ResDbEnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbEnterGame, code_)
      + sizeof(ResDbEnterGame::code_)
      - PROTOBUF_FIELD_OFFSET(ResDbEnterGame, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbEnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[5]);
}

// ===================================================================

class ResReturnPlayerBaseData::_Internal {
 public:
  static const ::PlayerBaseData& data(const ResReturnPlayerBaseData* msg);
};

const ::PlayerBaseData&
ResReturnPlayerBaseData::_Internal::data(const ResReturnPlayerBaseData* msg) {
  return *msg->data_;
}
void ResReturnPlayerBaseData::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
ResReturnPlayerBaseData::ResReturnPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnPlayerBaseData)
}
ResReturnPlayerBaseData::ResReturnPlayerBaseData(const ResReturnPlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerBaseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:ResReturnPlayerBaseData)
}

inline void ResReturnPlayerBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&data_)) + sizeof(sessionid_));
}

ResReturnPlayerBaseData::~ResReturnPlayerBaseData() {
  // @@protoc_insertion_point(destructor:ResReturnPlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnPlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ResReturnPlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnPlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnPlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnPlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlayerBaseData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnPlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnPlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnPlayerBaseData)
  return target;
}

size_t ResReturnPlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnPlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnPlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnPlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnPlayerBaseData::GetClassData() const { return &_class_data_; }

void ResReturnPlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnPlayerBaseData *>(to)->MergeFrom(
      static_cast<const ResReturnPlayerBaseData &>(from));
}


void ResReturnPlayerBaseData::MergeFrom(const ResReturnPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnPlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerBaseData::MergeFrom(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnPlayerBaseData::CopyFrom(const ResReturnPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnPlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnPlayerBaseData::IsInitialized() const {
  return true;
}

void ResReturnPlayerBaseData::InternalSwap(ResReturnPlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResReturnPlayerBaseData, sessionid_)
      + sizeof(ResReturnPlayerBaseData::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ResReturnPlayerBaseData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnPlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[6]);
}

// ===================================================================

class ResReturnPlayerModuleData::_Internal {
 public:
};

ResReturnPlayerModuleData::ResReturnPlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResReturnPlayerModuleData)
}
ResReturnPlayerModuleData::ResReturnPlayerModuleData(const ResReturnPlayerModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&csessionid_, &from.csessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
  // @@protoc_insertion_point(copy_constructor:ResReturnPlayerModuleData)
}

inline void ResReturnPlayerModuleData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&csessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
}

ResReturnPlayerModuleData::~ResReturnPlayerModuleData() {
  // @@protoc_insertion_point(destructor:ResReturnPlayerModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResReturnPlayerModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ResReturnPlayerModuleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResReturnPlayerModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:ResReturnPlayerModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&csessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moduleid_) -
      reinterpret_cast<char*>(&csessionid_)) + sizeof(moduleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResReturnPlayerModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 moduleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResReturnPlayerModuleData.data"));
        } else
          goto handle_unusual;
        continue;
      // uint64 csessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          csessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResReturnPlayerModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResReturnPlayerModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_moduleid(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResReturnPlayerModuleData.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_csessionid(), target);
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResReturnPlayerModuleData)
  return target;
}

size_t ResReturnPlayerModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResReturnPlayerModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint64 csessionId = 3;
  if (this->_internal_csessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_csessionid());
  }

  // uint64 sessionId = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moduleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResReturnPlayerModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResReturnPlayerModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResReturnPlayerModuleData::GetClassData() const { return &_class_data_; }

void ResReturnPlayerModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResReturnPlayerModuleData *>(to)->MergeFrom(
      static_cast<const ResReturnPlayerModuleData &>(from));
}


void ResReturnPlayerModuleData::MergeFrom(const ResReturnPlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResReturnPlayerModuleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_csessionid() != 0) {
    _internal_set_csessionid(from._internal_csessionid());
  }
  if (from._internal_sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResReturnPlayerModuleData::CopyFrom(const ResReturnPlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResReturnPlayerModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReturnPlayerModuleData::IsInitialized() const {
  return true;
}

void ResReturnPlayerModuleData::InternalSwap(ResReturnPlayerModuleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResReturnPlayerModuleData, moduleid_)
      + sizeof(ResReturnPlayerModuleData::moduleid_)
      - PROTOBUF_FIELD_OFFSET(ResReturnPlayerModuleData, csessionid_)>(
          reinterpret_cast<char*>(&csessionid_),
          reinterpret_cast<char*>(&other->csessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReturnPlayerModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[7]);
}

// ===================================================================

class ReqSavePlayerBaseData::_Internal {
 public:
  static const ::PlayerBaseData& data(const ReqSavePlayerBaseData* msg);
};

const ::PlayerBaseData&
ReqSavePlayerBaseData::_Internal::data(const ReqSavePlayerBaseData* msg) {
  return *msg->data_;
}
void ReqSavePlayerBaseData::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
ReqSavePlayerBaseData::ReqSavePlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSavePlayerBaseData)
}
ReqSavePlayerBaseData::ReqSavePlayerBaseData(const ReqSavePlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerBaseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(opt_));
  // @@protoc_insertion_point(copy_constructor:ReqSavePlayerBaseData)
}

inline void ReqSavePlayerBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_) -
    reinterpret_cast<char*>(&data_)) + sizeof(opt_));
}

ReqSavePlayerBaseData::~ReqSavePlayerBaseData() {
  // @@protoc_insertion_point(destructor:ReqSavePlayerBaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSavePlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ReqSavePlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSavePlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSavePlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSavePlayerBaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlayerBaseData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 opt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSavePlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSavePlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // int32 opt = 3;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSavePlayerBaseData)
  return target;
}

size_t ReqSavePlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSavePlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlayerBaseData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // int32 opt = 3;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSavePlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSavePlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSavePlayerBaseData::GetClassData() const { return &_class_data_; }

void ReqSavePlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSavePlayerBaseData *>(to)->MergeFrom(
      static_cast<const ReqSavePlayerBaseData &>(from));
}


void ReqSavePlayerBaseData::MergeFrom(const ReqSavePlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSavePlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerBaseData::MergeFrom(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_opt() != 0) {
    _internal_set_opt(from._internal_opt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSavePlayerBaseData::CopyFrom(const ReqSavePlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSavePlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSavePlayerBaseData::IsInitialized() const {
  return true;
}

void ReqSavePlayerBaseData::InternalSwap(ReqSavePlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSavePlayerBaseData, opt_)
      + sizeof(ReqSavePlayerBaseData::opt_)
      - PROTOBUF_FIELD_OFFSET(ReqSavePlayerBaseData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSavePlayerBaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[8]);
}

// ===================================================================

class ReqSavePlayerModuleData::_Internal {
 public:
};

ReqSavePlayerModuleData::ReqSavePlayerModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSavePlayerModuleData)
}
ReqSavePlayerModuleData::ReqSavePlayerModuleData(const ReqSavePlayerModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ReqSavePlayerModuleData)
}

inline void ReqSavePlayerModuleData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
}

ReqSavePlayerModuleData::~ReqSavePlayerModuleData() {
  // @@protoc_insertion_point(destructor:ReqSavePlayerModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSavePlayerModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ReqSavePlayerModuleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSavePlayerModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSavePlayerModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSavePlayerModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moduleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSavePlayerModuleData.data"));
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSavePlayerModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSavePlayerModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint32 moduleId = 2;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moduleid(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSavePlayerModuleData.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSavePlayerModuleData)
  return target;
}

size_t ReqSavePlayerModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSavePlayerModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint32 moduleId = 2;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moduleid());
  }

  // uint32 serverId = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSavePlayerModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSavePlayerModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSavePlayerModuleData::GetClassData() const { return &_class_data_; }

void ReqSavePlayerModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSavePlayerModuleData *>(to)->MergeFrom(
      static_cast<const ReqSavePlayerModuleData &>(from));
}


void ReqSavePlayerModuleData::MergeFrom(const ReqSavePlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSavePlayerModuleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSavePlayerModuleData::CopyFrom(const ReqSavePlayerModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSavePlayerModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSavePlayerModuleData::IsInitialized() const {
  return true;
}

void ReqSavePlayerModuleData::InternalSwap(ReqSavePlayerModuleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSavePlayerModuleData, serverid_)
      + sizeof(ReqSavePlayerModuleData::serverid_)
      - PROTOBUF_FIELD_OFFSET(ReqSavePlayerModuleData, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSavePlayerModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[9]);
}

// ===================================================================

class ReqGameReport::_Internal {
 public:
};

ReqGameReport::ReqGameReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqGameReport)
}
ReqGameReport::ReqGameReport(const ReqGameReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:ReqGameReport)
}

inline void ReqGameReport::SharedCtor() {
serverid_ = 0u;
}

ReqGameReport::~ReqGameReport() {
  // @@protoc_insertion_point(destructor:ReqGameReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqGameReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGameReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGameReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqGameReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGameReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGameReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqGameReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqGameReport)
  return target;
}

size_t ReqGameReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqGameReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGameReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGameReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGameReport::GetClassData() const { return &_class_data_; }

void ReqGameReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGameReport *>(to)->MergeFrom(
      static_cast<const ReqGameReport &>(from));
}


void ReqGameReport::MergeFrom(const ReqGameReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqGameReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGameReport::CopyFrom(const ReqGameReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqGameReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameReport::IsInitialized() const {
  return true;
}

void ReqGameReport::InternalSwap(ReqGameReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGameReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[10]);
}

// ===================================================================

class ReqGameQuit::_Internal {
 public:
};

ReqGameQuit::ReqGameQuit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqGameQuit)
}
ReqGameQuit::ReqGameQuit(const ReqGameQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqGameQuit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGameQuit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGameQuit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqGameQuit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[11]);
}

// ===================================================================

class ReqSaveRankData::_Internal {
 public:
};

ReqSaveRankData::ReqSaveRankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSaveRankData)
}
ReqSaveRankData::ReqSaveRankData(const ReqSaveRankData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranklen_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(ranklen_));
  // @@protoc_insertion_point(copy_constructor:ReqSaveRankData)
}

inline void ReqSaveRankData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serverid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ranklen_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(ranklen_));
}

ReqSaveRankData::~ReqSaveRankData() {
  // @@protoc_insertion_point(destructor:ReqSaveRankData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSaveRankData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  data_.Destroy();
}

void ReqSaveRankData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSaveRankData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSaveRankData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranklen_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(ranklen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSaveRankData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSaveRankData.name"));
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSaveRankData.data"));
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rankLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ranklen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSaveRankData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSaveRankData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSaveRankData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSaveRankData.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 serverId = 3;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serverid(), target);
  }

  // uint32 rankLen = 4;
  if (this->_internal_ranklen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ranklen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSaveRankData)
  return target;
}

size_t ReqSaveRankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSaveRankData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 serverId = 3;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  // uint32 rankLen = 4;
  if (this->_internal_ranklen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ranklen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSaveRankData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSaveRankData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSaveRankData::GetClassData() const { return &_class_data_; }

void ReqSaveRankData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSaveRankData *>(to)->MergeFrom(
      static_cast<const ReqSaveRankData &>(from));
}


void ReqSaveRankData::MergeFrom(const ReqSaveRankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSaveRankData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_ranklen() != 0) {
    _internal_set_ranklen(from._internal_ranklen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSaveRankData::CopyFrom(const ReqSaveRankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSaveRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSaveRankData::IsInitialized() const {
  return true;
}

void ReqSaveRankData::InternalSwap(ReqSaveRankData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSaveRankData, ranklen_)
      + sizeof(ReqSaveRankData::ranklen_)
      - PROTOBUF_FIELD_OFFSET(ReqSaveRankData, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSaveRankData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[12]);
}

// ===================================================================

class ReqSaveGlobalData::_Internal {
 public:
};

ReqSaveGlobalData::ReqSaveGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSaveGlobalData)
}
ReqSaveGlobalData::ReqSaveGlobalData(const ReqSaveGlobalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&moduleid_, &from.moduleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&moduleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:ReqSaveGlobalData)
}

inline void ReqSaveGlobalData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&moduleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&moduleid_)) + sizeof(serverid_));
}

ReqSaveGlobalData::~ReqSaveGlobalData() {
  // @@protoc_insertion_point(destructor:ReqSaveGlobalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSaveGlobalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ReqSaveGlobalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSaveGlobalData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSaveGlobalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&moduleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&moduleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSaveGlobalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 moduleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSaveGlobalData.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSaveGlobalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSaveGlobalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_moduleid(), target);
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverid(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSaveGlobalData.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSaveGlobalData)
  return target;
}

size_t ReqSaveGlobalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSaveGlobalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moduleid());
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSaveGlobalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSaveGlobalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSaveGlobalData::GetClassData() const { return &_class_data_; }

void ReqSaveGlobalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSaveGlobalData *>(to)->MergeFrom(
      static_cast<const ReqSaveGlobalData &>(from));
}


void ReqSaveGlobalData::MergeFrom(const ReqSaveGlobalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSaveGlobalData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSaveGlobalData::CopyFrom(const ReqSaveGlobalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSaveGlobalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSaveGlobalData::IsInitialized() const {
  return true;
}

void ReqSaveGlobalData::InternalSwap(ReqSaveGlobalData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSaveGlobalData, serverid_)
      + sizeof(ReqSaveGlobalData::serverid_)
      - PROTOBUF_FIELD_OFFSET(ReqSaveGlobalData, moduleid_)>(
          reinterpret_cast<char*>(&moduleid_),
          reinterpret_cast<char*>(&other->moduleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSaveGlobalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[13]);
}

// ===================================================================

class ReqDelRankData::_Internal {
 public:
};

ReqDelRankData::ReqDelRankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDelRankData)
}
ReqDelRankData::ReqDelRankData(const ReqDelRankData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:ReqDelRankData)
}

inline void ReqDelRankData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serverid_ = 0u;
}

ReqDelRankData::~ReqDelRankData() {
  // @@protoc_insertion_point(destructor:ReqDelRankData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDelRankData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ReqDelRankData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDelRankData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDelRankData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  serverid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDelRankData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDelRankData.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 serverid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDelRankData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDelRankData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDelRankData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 serverid = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDelRankData)
  return target;
}

size_t ReqDelRankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDelRankData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 serverid = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDelRankData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDelRankData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDelRankData::GetClassData() const { return &_class_data_; }

void ReqDelRankData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDelRankData *>(to)->MergeFrom(
      static_cast<const ReqDelRankData &>(from));
}


void ReqDelRankData::MergeFrom(const ReqDelRankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDelRankData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDelRankData::CopyFrom(const ReqDelRankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDelRankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDelRankData::IsInitialized() const {
  return true;
}

void ReqDelRankData::InternalSwap(ReqDelRankData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDelRankData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[14]);
}

// ===================================================================

class ReqDelGlobalData::_Internal {
 public:
};

ReqDelGlobalData::ReqDelGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDelGlobalData)
}
ReqDelGlobalData::ReqDelGlobalData(const ReqDelGlobalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  moduleid_ = from.moduleid_;
  // @@protoc_insertion_point(copy_constructor:ReqDelGlobalData)
}

inline void ReqDelGlobalData::SharedCtor() {
moduleid_ = 0u;
}

ReqDelGlobalData::~ReqDelGlobalData() {
  // @@protoc_insertion_point(destructor:ReqDelGlobalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDelGlobalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqDelGlobalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDelGlobalData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDelGlobalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moduleid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDelGlobalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 moduleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          moduleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDelGlobalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDelGlobalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_moduleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDelGlobalData)
  return target;
}

size_t ReqDelGlobalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDelGlobalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 moduleId = 1;
  if (this->_internal_moduleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moduleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDelGlobalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDelGlobalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDelGlobalData::GetClassData() const { return &_class_data_; }

void ReqDelGlobalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDelGlobalData *>(to)->MergeFrom(
      static_cast<const ReqDelGlobalData &>(from));
}


void ReqDelGlobalData::MergeFrom(const ReqDelGlobalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDelGlobalData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDelGlobalData::CopyFrom(const ReqDelGlobalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDelGlobalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDelGlobalData::IsInitialized() const {
  return true;
}

void ReqDelGlobalData::InternalSwap(ReqDelGlobalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(moduleid_, other->moduleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDelGlobalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[15]);
}

// ===================================================================

class ReqRegPlayerBaseInfo::_Internal {
 public:
};

ReqRegPlayerBaseInfo::ReqRegPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqRegPlayerBaseInfo)
}
ReqRegPlayerBaseInfo::ReqRegPlayerBaseInfo(const ReqRegPlayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqRegPlayerBaseInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqRegPlayerBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqRegPlayerBaseInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqRegPlayerBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[16]);
}

// ===================================================================

class ReqUpdatePlayerBaseInfo::_Internal {
 public:
};

ReqUpdatePlayerBaseInfo::ReqUpdatePlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqUpdatePlayerBaseInfo)
}
ReqUpdatePlayerBaseInfo::ReqUpdatePlayerBaseInfo(const ReqUpdatePlayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ReqUpdatePlayerBaseInfo)
}

inline void ReqUpdatePlayerBaseInfo::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = uint64_t{0u};
}

ReqUpdatePlayerBaseInfo::~ReqUpdatePlayerBaseInfo() {
  // @@protoc_insertion_point(destructor:ReqUpdatePlayerBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqUpdatePlayerBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void ReqUpdatePlayerBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePlayerBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqUpdatePlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePlayerBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqUpdatePlayerBaseInfo.data"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqUpdatePlayerBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqUpdatePlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqUpdatePlayerBaseInfo.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqUpdatePlayerBaseInfo)
  return target;
}

size_t ReqUpdatePlayerBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqUpdatePlayerBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqUpdatePlayerBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqUpdatePlayerBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqUpdatePlayerBaseInfo::GetClassData() const { return &_class_data_; }

void ReqUpdatePlayerBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqUpdatePlayerBaseInfo *>(to)->MergeFrom(
      static_cast<const ReqUpdatePlayerBaseInfo &>(from));
}


void ReqUpdatePlayerBaseInfo::MergeFrom(const ReqUpdatePlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqUpdatePlayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqUpdatePlayerBaseInfo::CopyFrom(const ReqUpdatePlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqUpdatePlayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePlayerBaseInfo::IsInitialized() const {
  return true;
}

void ReqUpdatePlayerBaseInfo::InternalSwap(ReqUpdatePlayerBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePlayerBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[17]);
}

// ===================================================================

class ReqDbUpdatePlayerName::_Internal {
 public:
};

ReqDbUpdatePlayerName::ReqDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqDbUpdatePlayerName)
}
ReqDbUpdatePlayerName::ReqDbUpdatePlayerName(const ReqDbUpdatePlayerName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ReqDbUpdatePlayerName)
}

inline void ReqDbUpdatePlayerName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = uint64_t{0u};
}

ReqDbUpdatePlayerName::~ReqDbUpdatePlayerName() {
  // @@protoc_insertion_point(destructor:ReqDbUpdatePlayerName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqDbUpdatePlayerName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ReqDbUpdatePlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDbUpdatePlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqDbUpdatePlayerName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  pid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDbUpdatePlayerName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqDbUpdatePlayerName.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqDbUpdatePlayerName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqDbUpdatePlayerName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqDbUpdatePlayerName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqDbUpdatePlayerName)
  return target;
}

size_t ReqDbUpdatePlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqDbUpdatePlayerName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqDbUpdatePlayerName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqDbUpdatePlayerName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqDbUpdatePlayerName::GetClassData() const { return &_class_data_; }

void ReqDbUpdatePlayerName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqDbUpdatePlayerName *>(to)->MergeFrom(
      static_cast<const ReqDbUpdatePlayerName &>(from));
}


void ReqDbUpdatePlayerName::MergeFrom(const ReqDbUpdatePlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqDbUpdatePlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqDbUpdatePlayerName::CopyFrom(const ReqDbUpdatePlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqDbUpdatePlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDbUpdatePlayerName::IsInitialized() const {
  return true;
}

void ReqDbUpdatePlayerName::InternalSwap(ReqDbUpdatePlayerName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDbUpdatePlayerName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[18]);
}

// ===================================================================

class ResDbUpdatePlayerName::_Internal {
 public:
};

ResDbUpdatePlayerName::ResDbUpdatePlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResDbUpdatePlayerName)
}
ResDbUpdatePlayerName::ResDbUpdatePlayerName(const ResDbUpdatePlayerName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:ResDbUpdatePlayerName)
}

inline void ResDbUpdatePlayerName::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(code_));
}

ResDbUpdatePlayerName::~ResDbUpdatePlayerName() {
  // @@protoc_insertion_point(destructor:ResDbUpdatePlayerName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResDbUpdatePlayerName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ResDbUpdatePlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDbUpdatePlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:ResDbUpdatePlayerName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDbUpdatePlayerName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResDbUpdatePlayerName.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResDbUpdatePlayerName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResDbUpdatePlayerName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResDbUpdatePlayerName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pid(), target);
  }

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResDbUpdatePlayerName)
  return target;
}

size_t ResDbUpdatePlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResDbUpdatePlayerName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
  }

  // uint32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResDbUpdatePlayerName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResDbUpdatePlayerName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResDbUpdatePlayerName::GetClassData() const { return &_class_data_; }

void ResDbUpdatePlayerName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResDbUpdatePlayerName *>(to)->MergeFrom(
      static_cast<const ResDbUpdatePlayerName &>(from));
}


void ResDbUpdatePlayerName::MergeFrom(const ResDbUpdatePlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResDbUpdatePlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResDbUpdatePlayerName::CopyFrom(const ResDbUpdatePlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResDbUpdatePlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDbUpdatePlayerName::IsInitialized() const {
  return true;
}

void ResDbUpdatePlayerName::InternalSwap(ResDbUpdatePlayerName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResDbUpdatePlayerName, code_)
      + sizeof(ResDbUpdatePlayerName::code_)
      - PROTOBUF_FIELD_OFFSET(ResDbUpdatePlayerName, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDbUpdatePlayerName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[19]);
}

// ===================================================================

class ReqCloseDbServer::_Internal {
 public:
};

ReqCloseDbServer::ReqCloseDbServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ReqCloseDbServer)
}
ReqCloseDbServer::ReqCloseDbServer(const ReqCloseDbServer& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReqCloseDbServer)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqCloseDbServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqCloseDbServer::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReqCloseDbServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server_2eproto_getter, &descriptor_table_Server_2eproto_once,
      file_level_metadata_Server_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReqDbSelectPlayer*
Arena::CreateMaybeMessage< ::ReqDbSelectPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbSelectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbSelectPlayer*
Arena::CreateMaybeMessage< ::ResDbSelectPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbSelectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbCreatePlayer*
Arena::CreateMaybeMessage< ::ReqDbCreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbCreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbCreatePlayer*
Arena::CreateMaybeMessage< ::ResDbCreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbCreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbEnterGame*
Arena::CreateMaybeMessage< ::ReqDbEnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbEnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbEnterGame*
Arena::CreateMaybeMessage< ::ResDbEnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbEnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnPlayerBaseData*
Arena::CreateMaybeMessage< ::ResReturnPlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnPlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResReturnPlayerModuleData*
Arena::CreateMaybeMessage< ::ResReturnPlayerModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResReturnPlayerModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSavePlayerBaseData*
Arena::CreateMaybeMessage< ::ReqSavePlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSavePlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSavePlayerModuleData*
Arena::CreateMaybeMessage< ::ReqSavePlayerModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSavePlayerModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqGameReport*
Arena::CreateMaybeMessage< ::ReqGameReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqGameReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqGameQuit*
Arena::CreateMaybeMessage< ::ReqGameQuit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqGameQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSaveRankData*
Arena::CreateMaybeMessage< ::ReqSaveRankData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSaveRankData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSaveGlobalData*
Arena::CreateMaybeMessage< ::ReqSaveGlobalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSaveGlobalData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDelRankData*
Arena::CreateMaybeMessage< ::ReqDelRankData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDelRankData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDelGlobalData*
Arena::CreateMaybeMessage< ::ReqDelGlobalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDelGlobalData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqRegPlayerBaseInfo*
Arena::CreateMaybeMessage< ::ReqRegPlayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqRegPlayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqUpdatePlayerBaseInfo*
Arena::CreateMaybeMessage< ::ReqUpdatePlayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqUpdatePlayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqDbUpdatePlayerName*
Arena::CreateMaybeMessage< ::ReqDbUpdatePlayerName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqDbUpdatePlayerName >(arena);
}
template<> PROTOBUF_NOINLINE ::ResDbUpdatePlayerName*
Arena::CreateMaybeMessage< ::ResDbUpdatePlayerName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResDbUpdatePlayerName >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqCloseDbServer*
Arena::CreateMaybeMessage< ::ReqCloseDbServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqCloseDbServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
