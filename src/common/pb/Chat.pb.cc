// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChatData::ChatData(
    ::_pbi::ConstantInitialized)
  : pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sendtime_(0u){}
struct ChatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDataDefaultTypeInternal() {}
  union {
    ChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDataDefaultTypeInternal _ChatData_default_instance_;
PROTOBUF_CONSTEXPR AllChatData::AllChatData(
    ::_pbi::ConstantInitialized)
  : data_()
  , pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AllChatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllChatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllChatDataDefaultTypeInternal() {}
  union {
    AllChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllChatDataDefaultTypeInternal _AllChatData_default_instance_;
PROTOBUF_CONSTEXPR ReqChatInfo::ReqChatInfo(
    ::_pbi::ConstantInitialized)
  : channel_(0){}
struct ReqChatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqChatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqChatInfoDefaultTypeInternal() {}
  union {
    ReqChatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqChatInfoDefaultTypeInternal _ReqChatInfo_default_instance_;
PROTOBUF_CONSTEXPR ResChatInfo::ResChatInfo(
    ::_pbi::ConstantInitialized)
  : baseinfo_()
  , data_()
  , channel_(0){}
struct ResChatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResChatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResChatInfoDefaultTypeInternal() {}
  union {
    ResChatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResChatInfoDefaultTypeInternal _ResChatInfo_default_instance_;
PROTOBUF_CONSTEXPR ReqSendChat::ReqSendChat(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , otherpid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_(0){}
struct ReqSendChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSendChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSendChatDefaultTypeInternal() {}
  union {
    ReqSendChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSendChatDefaultTypeInternal _ReqSendChat_default_instance_;
PROTOBUF_CONSTEXPR NotifyAddNewChat::NotifyAddNewChat(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , baseinfo_(nullptr)
  , channel_(0){}
struct NotifyAddNewChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyAddNewChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyAddNewChatDefaultTypeInternal() {}
  union {
    NotifyAddNewChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyAddNewChatDefaultTypeInternal _NotifyAddNewChat_default_instance_;
PROTOBUF_CONSTEXPR ReqGetCrossChatData::ReqGetCrossChatData(
    ::_pbi::ConstantInitialized)
  : pids_()
  , pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_(0){}
struct ReqGetCrossChatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqGetCrossChatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqGetCrossChatDataDefaultTypeInternal() {}
  union {
    ReqGetCrossChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqGetCrossChatDataDefaultTypeInternal _ReqGetCrossChatData_default_instance_;
PROTOBUF_CONSTEXPR ResCrossPlayerBaseInfo::ResCrossPlayerBaseInfo(
    ::_pbi::ConstantInitialized)
  : baseinfo_()
  , pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_(0){}
struct ResCrossPlayerBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResCrossPlayerBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResCrossPlayerBaseInfoDefaultTypeInternal() {}
  union {
    ResCrossPlayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResCrossPlayerBaseInfoDefaultTypeInternal _ResCrossPlayerBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR ReqCrossSendChat::ReqCrossSendChat(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , otherpid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_(0){}
struct ReqCrossSendChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqCrossSendChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqCrossSendChatDefaultTypeInternal() {}
  union {
    ReqCrossSendChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqCrossSendChatDefaultTypeInternal _ReqCrossSendChat_default_instance_;
PROTOBUF_CONSTEXPR ResCrossSendChat::ResCrossSendChat(
    ::_pbi::ConstantInitialized)
  : baseinfo_()
  , data_(nullptr)
  , channel_(0){}
struct ResCrossSendChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResCrossSendChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResCrossSendChatDefaultTypeInternal() {}
  union {
    ResCrossSendChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResCrossSendChatDefaultTypeInternal _ResCrossSendChat_default_instance_;
PROTOBUF_CONSTEXPR ReqAddNewChatData::ReqAddNewChatData(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , otherpid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_(0){}
struct ReqAddNewChatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqAddNewChatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqAddNewChatDataDefaultTypeInternal() {}
  union {
    ReqAddNewChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqAddNewChatDataDefaultTypeInternal _ReqAddNewChatData_default_instance_;
static ::_pb::Metadata file_level_metadata_Chat_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Chat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Chat_2eproto = nullptr;

const uint32_t TableStruct_Chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatData, pid_),
  PROTOBUF_FIELD_OFFSET(::ChatData, content_),
  PROTOBUF_FIELD_OFFSET(::ChatData, sendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AllChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AllChatData, pid_),
  PROTOBUF_FIELD_OFFSET(::AllChatData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqChatInfo, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResChatInfo, channel_),
  PROTOBUF_FIELD_OFFSET(::ResChatInfo, baseinfo_),
  PROTOBUF_FIELD_OFFSET(::ResChatInfo, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqSendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqSendChat, channel_),
  PROTOBUF_FIELD_OFFSET(::ReqSendChat, content_),
  PROTOBUF_FIELD_OFFSET(::ReqSendChat, otherpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewChat, channel_),
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewChat, data_),
  PROTOBUF_FIELD_OFFSET(::NotifyAddNewChat, baseinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqGetCrossChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqGetCrossChatData, channel_),
  PROTOBUF_FIELD_OFFSET(::ReqGetCrossChatData, pid_),
  PROTOBUF_FIELD_OFFSET(::ReqGetCrossChatData, pids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResCrossPlayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResCrossPlayerBaseInfo, baseinfo_),
  PROTOBUF_FIELD_OFFSET(::ResCrossPlayerBaseInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::ResCrossPlayerBaseInfo, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqCrossSendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqCrossSendChat, channel_),
  PROTOBUF_FIELD_OFFSET(::ReqCrossSendChat, content_),
  PROTOBUF_FIELD_OFFSET(::ReqCrossSendChat, otherpid_),
  PROTOBUF_FIELD_OFFSET(::ReqCrossSendChat, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResCrossSendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResCrossSendChat, channel_),
  PROTOBUF_FIELD_OFFSET(::ResCrossSendChat, data_),
  PROTOBUF_FIELD_OFFSET(::ResCrossSendChat, baseinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReqAddNewChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReqAddNewChatData, channel_),
  PROTOBUF_FIELD_OFFSET(::ReqAddNewChatData, content_),
  PROTOBUF_FIELD_OFFSET(::ReqAddNewChatData, otherpid_),
  PROTOBUF_FIELD_OFFSET(::ReqAddNewChatData, pid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChatData)},
  { 9, -1, -1, sizeof(::AllChatData)},
  { 17, -1, -1, sizeof(::ReqChatInfo)},
  { 24, -1, -1, sizeof(::ResChatInfo)},
  { 33, -1, -1, sizeof(::ReqSendChat)},
  { 42, -1, -1, sizeof(::NotifyAddNewChat)},
  { 51, -1, -1, sizeof(::ReqGetCrossChatData)},
  { 60, -1, -1, sizeof(::ResCrossPlayerBaseInfo)},
  { 69, -1, -1, sizeof(::ReqCrossSendChat)},
  { 79, -1, -1, sizeof(::ResCrossSendChat)},
  { 88, -1, -1, sizeof(::ReqAddNewChatData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ChatData_default_instance_._instance,
  &::_AllChatData_default_instance_._instance,
  &::_ReqChatInfo_default_instance_._instance,
  &::_ResChatInfo_default_instance_._instance,
  &::_ReqSendChat_default_instance_._instance,
  &::_NotifyAddNewChat_default_instance_._instance,
  &::_ReqGetCrossChatData_default_instance_._instance,
  &::_ResCrossPlayerBaseInfo_default_instance_._instance,
  &::_ReqCrossSendChat_default_instance_._instance,
  &::_ResCrossSendChat_default_instance_._instance,
  &::_ReqAddNewChatData_default_instance_._instance,
};

const char descriptor_table_protodef_Chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nChat.proto\032\014Player.proto\":\n\010ChatData\022\013"
  "\n\003pid\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\020\n\010sendTime"
  "\030\003 \001(\r\"3\n\013AllChatData\022\013\n\003pid\030\001 \001(\t\022\027\n\004da"
  "ta\030\002 \003(\0132\t.ChatData\"\036\n\013ReqChatInfo\022\017\n\007ch"
  "annel\030\001 \001(\005\"\\\n\013ResChatInfo\022\017\n\007channel\030\001 "
  "\001(\005\022 \n\010baseInfo\030\002 \003(\0132\016.PayerBaseInfo\022\032\n"
  "\004data\030\003 \003(\0132\014.AllChatData\"A\n\013ReqSendChat"
  "\022\017\n\007channel\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\022\020\n\010ot"
  "herPid\030\003 \001(\t\"^\n\020NotifyAddNewChat\022\017\n\007chan"
  "nel\030\001 \001(\005\022\027\n\004data\030\002 \001(\0132\t.ChatData\022 \n\010ba"
  "seInfo\030\003 \001(\0132\016.PayerBaseInfo\"A\n\023ReqGetCr"
  "ossChatData\022\017\n\007channel\030\001 \001(\005\022\013\n\003pid\030\002 \001("
  "\t\022\014\n\004pids\030\003 \003(\t\"X\n\026ResCrossPlayerBaseInf"
  "o\022 \n\010baseInfo\030\001 \003(\0132\016.PayerBaseInfo\022\013\n\003p"
  "id\030\002 \001(\t\022\017\n\007channel\030\003 \001(\005\"S\n\020ReqCrossSen"
  "dChat\022\017\n\007channel\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\022"
  "\020\n\010otherPid\030\003 \001(\t\022\013\n\003pid\030\004 \001(\t\"^\n\020ResCro"
  "ssSendChat\022\017\n\007channel\030\001 \001(\005\022\027\n\004data\030\002 \001("
  "\0132\t.ChatData\022 \n\010baseInfo\030\003 \003(\0132\016.PayerBa"
  "seInfo\"T\n\021ReqAddNewChatData\022\017\n\007channel\030\001"
  " \001(\005\022\017\n\007content\030\002 \001(\t\022\020\n\010otherPid\030\003 \001(\t\022"
  "\013\n\003pid\030\004 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Chat_2eproto_deps[1] = {
  &::descriptor_table_Player_2eproto,
};
static ::_pbi::once_flag descriptor_table_Chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Chat_2eproto = {
    false, false, 860, descriptor_table_protodef_Chat_2eproto,
    "Chat.proto",
    &descriptor_table_Chat_2eproto_once, descriptor_table_Chat_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_Chat_2eproto::offsets,
    file_level_metadata_Chat_2eproto, file_level_enum_descriptors_Chat_2eproto,
    file_level_service_descriptors_Chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Chat_2eproto_getter() {
  return &descriptor_table_Chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Chat_2eproto(&descriptor_table_Chat_2eproto);

// ===================================================================

class ChatData::_Internal {
 public:
};

ChatData::ChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChatData)
}
ChatData::ChatData(const ChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  sendtime_ = from.sendtime_;
  // @@protoc_insertion_point(copy_constructor:ChatData)
}

inline void ChatData::SharedCtor() {
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendtime_ = 0u;
}

ChatData::~ChatData() {
  // @@protoc_insertion_point(destructor:ChatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pid_.Destroy();
  content_.Destroy();
}

void ChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.ClearToEmpty();
  content_.ClearToEmpty();
  sendtime_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatData.pid"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatData.content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sendTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatData.pid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatData.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint32 sendTime = 3;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatData)
  return target;
}

size_t ChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 sendTime = 3;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatData::GetClassData() const { return &_class_data_; }

void ChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatData *>(to)->MergeFrom(
      static_cast<const ChatData &>(from));
}


void ChatData::MergeFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatData::CopyFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatData::IsInitialized() const {
  return true;
}

void ChatData::InternalSwap(ChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(sendtime_, other->sendtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[0]);
}

// ===================================================================

class AllChatData::_Internal {
 public:
};

AllChatData::AllChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AllChatData)
}
AllChatData::AllChatData(const AllChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AllChatData)
}

inline void AllChatData::SharedCtor() {
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllChatData::~AllChatData() {
  // @@protoc_insertion_point(destructor:AllChatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pid_.Destroy();
}

void AllChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:AllChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  pid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllChatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AllChatData.pid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ChatData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AllChatData.pid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid(), target);
  }

  // repeated .ChatData data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllChatData)
  return target;
}

size_t AllChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatData data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllChatData::GetClassData() const { return &_class_data_; }

void AllChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllChatData *>(to)->MergeFrom(
      static_cast<const AllChatData &>(from));
}


void AllChatData::MergeFrom(const AllChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllChatData::CopyFrom(const AllChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllChatData::IsInitialized() const {
  return true;
}

void AllChatData::InternalSwap(AllChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AllChatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[1]);
}

// ===================================================================

class ReqChatInfo::_Internal {
 public:
};

ReqChatInfo::ReqChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqChatInfo)
}
ReqChatInfo::ReqChatInfo(const ReqChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ReqChatInfo)
}

inline void ReqChatInfo::SharedCtor() {
channel_ = 0;
}

ReqChatInfo::~ReqChatInfo() {
  // @@protoc_insertion_point(destructor:ReqChatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqChatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqChatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqChatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqChatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqChatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqChatInfo)
  return target;
}

size_t ReqChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqChatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqChatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqChatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqChatInfo::GetClassData() const { return &_class_data_; }

void ReqChatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqChatInfo *>(to)->MergeFrom(
      static_cast<const ReqChatInfo &>(from));
}


void ReqChatInfo::MergeFrom(const ReqChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqChatInfo::CopyFrom(const ReqChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChatInfo::IsInitialized() const {
  return true;
}

void ReqChatInfo::InternalSwap(ReqChatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[2]);
}

// ===================================================================

class ResChatInfo::_Internal {
 public:
};

void ResChatInfo::clear_baseinfo() {
  baseinfo_.Clear();
}
ResChatInfo::ResChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  baseinfo_(arena),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResChatInfo)
}
ResChatInfo::ResChatInfo(const ResChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      baseinfo_(from.baseinfo_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ResChatInfo)
}

inline void ResChatInfo::SharedCtor() {
channel_ = 0;
}

ResChatInfo::~ResChatInfo() {
  // @@protoc_insertion_point(destructor:ResChatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResChatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResChatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ResChatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baseinfo_.Clear();
  data_.Clear();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResChatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PayerBaseInfo baseInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_baseinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AllChatData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResChatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResChatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // repeated .PayerBaseInfo baseInfo = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_baseinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_baseinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AllChatData data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResChatInfo)
  return target;
}

size_t ResChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResChatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PayerBaseInfo baseInfo = 2;
  total_size += 1UL * this->_internal_baseinfo_size();
  for (const auto& msg : this->baseinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AllChatData data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResChatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResChatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResChatInfo::GetClassData() const { return &_class_data_; }

void ResChatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResChatInfo *>(to)->MergeFrom(
      static_cast<const ResChatInfo &>(from));
}


void ResChatInfo::MergeFrom(const ResChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  baseinfo_.MergeFrom(from.baseinfo_);
  data_.MergeFrom(from.data_);
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResChatInfo::CopyFrom(const ResChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChatInfo::IsInitialized() const {
  return true;
}

void ResChatInfo::InternalSwap(ResChatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  baseinfo_.InternalSwap(&other->baseinfo_);
  data_.InternalSwap(&other->data_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResChatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[3]);
}

// ===================================================================

class ReqSendChat::_Internal {
 public:
};

ReqSendChat::ReqSendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqSendChat)
}
ReqSendChat::ReqSendChat(const ReqSendChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  otherpid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otherpid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_otherpid().empty()) {
    otherpid_.Set(from._internal_otherpid(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ReqSendChat)
}

inline void ReqSendChat::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otherpid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otherpid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0;
}

ReqSendChat::~ReqSendChat() {
  // @@protoc_insertion_point(destructor:ReqSendChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSendChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
  otherpid_.Destroy();
}

void ReqSendChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqSendChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  otherpid_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSendChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSendChat.content"));
        } else
          goto handle_unusual;
        continue;
      // string otherPid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_otherpid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqSendChat.otherPid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSendChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqSendChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSendChat.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otherpid().data(), static_cast<int>(this->_internal_otherpid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqSendChat.otherPid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otherpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqSendChat)
  return target;
}

size_t ReqSendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqSendChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otherpid());
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSendChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqSendChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSendChat::GetClassData() const { return &_class_data_; }

void ReqSendChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqSendChat *>(to)->MergeFrom(
      static_cast<const ReqSendChat &>(from));
}


void ReqSendChat::MergeFrom(const ReqSendChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqSendChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_otherpid().empty()) {
    _internal_set_otherpid(from._internal_otherpid());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSendChat::CopyFrom(const ReqSendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqSendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendChat::IsInitialized() const {
  return true;
}

void ReqSendChat::InternalSwap(ReqSendChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &otherpid_, lhs_arena,
      &other->otherpid_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSendChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[4]);
}

// ===================================================================

class NotifyAddNewChat::_Internal {
 public:
  static const ::ChatData& data(const NotifyAddNewChat* msg);
  static const ::PayerBaseInfo& baseinfo(const NotifyAddNewChat* msg);
};

const ::ChatData&
NotifyAddNewChat::_Internal::data(const NotifyAddNewChat* msg) {
  return *msg->data_;
}
const ::PayerBaseInfo&
NotifyAddNewChat::_Internal::baseinfo(const NotifyAddNewChat* msg) {
  return *msg->baseinfo_;
}
void NotifyAddNewChat::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && baseinfo_ != nullptr) {
    delete baseinfo_;
  }
  baseinfo_ = nullptr;
}
NotifyAddNewChat::NotifyAddNewChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NotifyAddNewChat)
}
NotifyAddNewChat::NotifyAddNewChat(const NotifyAddNewChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::ChatData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_baseinfo()) {
    baseinfo_ = new ::PayerBaseInfo(*from.baseinfo_);
  } else {
    baseinfo_ = nullptr;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:NotifyAddNewChat)
}

inline void NotifyAddNewChat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&data_)) + sizeof(channel_));
}

NotifyAddNewChat::~NotifyAddNewChat() {
  // @@protoc_insertion_point(destructor:NotifyAddNewChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyAddNewChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete baseinfo_;
}

void NotifyAddNewChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyAddNewChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyAddNewChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && baseinfo_ != nullptr) {
    delete baseinfo_;
  }
  baseinfo_ = nullptr;
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyAddNewChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChatData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PayerBaseInfo baseInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyAddNewChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyAddNewChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // .ChatData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .PayerBaseInfo baseInfo = 3;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyAddNewChat)
  return target;
}

size_t NotifyAddNewChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyAddNewChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .PayerBaseInfo baseInfo = 3;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseinfo_);
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyAddNewChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyAddNewChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyAddNewChat::GetClassData() const { return &_class_data_; }

void NotifyAddNewChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyAddNewChat *>(to)->MergeFrom(
      static_cast<const NotifyAddNewChat &>(from));
}


void NotifyAddNewChat::MergeFrom(const NotifyAddNewChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotifyAddNewChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::ChatData::MergeFrom(from._internal_data());
  }
  if (from._internal_has_baseinfo()) {
    _internal_mutable_baseinfo()->::PayerBaseInfo::MergeFrom(from._internal_baseinfo());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyAddNewChat::CopyFrom(const NotifyAddNewChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyAddNewChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAddNewChat::IsInitialized() const {
  return true;
}

void NotifyAddNewChat::InternalSwap(NotifyAddNewChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyAddNewChat, channel_)
      + sizeof(NotifyAddNewChat::channel_)
      - PROTOBUF_FIELD_OFFSET(NotifyAddNewChat, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyAddNewChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[5]);
}

// ===================================================================

class ReqGetCrossChatData::_Internal {
 public:
};

ReqGetCrossChatData::ReqGetCrossChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqGetCrossChatData)
}
ReqGetCrossChatData::ReqGetCrossChatData(const ReqGetCrossChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pids_(from.pids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ReqGetCrossChatData)
}

inline void ReqGetCrossChatData::SharedCtor() {
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0;
}

ReqGetCrossChatData::~ReqGetCrossChatData() {
  // @@protoc_insertion_point(destructor:ReqGetCrossChatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqGetCrossChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pid_.Destroy();
}

void ReqGetCrossChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetCrossChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqGetCrossChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pids_.Clear();
  pid_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetCrossChatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqGetCrossChatData.pid"));
        } else
          goto handle_unusual;
        continue;
      // repeated string pids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ReqGetCrossChatData.pids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGetCrossChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqGetCrossChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqGetCrossChatData.pid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pid(), target);
  }

  // repeated string pids = 3;
  for (int i = 0, n = this->_internal_pids_size(); i < n; i++) {
    const auto& s = this->_internal_pids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqGetCrossChatData.pids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqGetCrossChatData)
  return target;
}

size_t ReqGetCrossChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqGetCrossChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pids_.size());
  for (int i = 0, n = pids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pids_.Get(i));
  }

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGetCrossChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGetCrossChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGetCrossChatData::GetClassData() const { return &_class_data_; }

void ReqGetCrossChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGetCrossChatData *>(to)->MergeFrom(
      static_cast<const ReqGetCrossChatData &>(from));
}


void ReqGetCrossChatData::MergeFrom(const ReqGetCrossChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqGetCrossChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pids_.MergeFrom(from.pids_);
  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGetCrossChatData::CopyFrom(const ReqGetCrossChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqGetCrossChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetCrossChatData::IsInitialized() const {
  return true;
}

void ReqGetCrossChatData::InternalSwap(ReqGetCrossChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pids_.InternalSwap(&other->pids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetCrossChatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[6]);
}

// ===================================================================

class ResCrossPlayerBaseInfo::_Internal {
 public:
};

void ResCrossPlayerBaseInfo::clear_baseinfo() {
  baseinfo_.Clear();
}
ResCrossPlayerBaseInfo::ResCrossPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  baseinfo_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResCrossPlayerBaseInfo)
}
ResCrossPlayerBaseInfo::ResCrossPlayerBaseInfo(const ResCrossPlayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      baseinfo_(from.baseinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ResCrossPlayerBaseInfo)
}

inline void ResCrossPlayerBaseInfo::SharedCtor() {
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0;
}

ResCrossPlayerBaseInfo::~ResCrossPlayerBaseInfo() {
  // @@protoc_insertion_point(destructor:ResCrossPlayerBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResCrossPlayerBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pid_.Destroy();
}

void ResCrossPlayerBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResCrossPlayerBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ResCrossPlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baseinfo_.Clear();
  pid_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResCrossPlayerBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PayerBaseInfo baseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_baseinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResCrossPlayerBaseInfo.pid"));
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResCrossPlayerBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResCrossPlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PayerBaseInfo baseInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_baseinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_baseinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResCrossPlayerBaseInfo.pid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pid(), target);
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResCrossPlayerBaseInfo)
  return target;
}

size_t ResCrossPlayerBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResCrossPlayerBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PayerBaseInfo baseInfo = 1;
  total_size += 1UL * this->_internal_baseinfo_size();
  for (const auto& msg : this->baseinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResCrossPlayerBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResCrossPlayerBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResCrossPlayerBaseInfo::GetClassData() const { return &_class_data_; }

void ResCrossPlayerBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResCrossPlayerBaseInfo *>(to)->MergeFrom(
      static_cast<const ResCrossPlayerBaseInfo &>(from));
}


void ResCrossPlayerBaseInfo::MergeFrom(const ResCrossPlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResCrossPlayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  baseinfo_.MergeFrom(from.baseinfo_);
  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResCrossPlayerBaseInfo::CopyFrom(const ResCrossPlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResCrossPlayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCrossPlayerBaseInfo::IsInitialized() const {
  return true;
}

void ResCrossPlayerBaseInfo::InternalSwap(ResCrossPlayerBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  baseinfo_.InternalSwap(&other->baseinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCrossPlayerBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[7]);
}

// ===================================================================

class ReqCrossSendChat::_Internal {
 public:
};

ReqCrossSendChat::ReqCrossSendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqCrossSendChat)
}
ReqCrossSendChat::ReqCrossSendChat(const ReqCrossSendChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  otherpid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otherpid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_otherpid().empty()) {
    otherpid_.Set(from._internal_otherpid(), 
      GetArenaForAllocation());
  }
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ReqCrossSendChat)
}

inline void ReqCrossSendChat::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otherpid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otherpid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0;
}

ReqCrossSendChat::~ReqCrossSendChat() {
  // @@protoc_insertion_point(destructor:ReqCrossSendChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqCrossSendChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
  otherpid_.Destroy();
  pid_.Destroy();
}

void ReqCrossSendChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCrossSendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqCrossSendChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  otherpid_.ClearToEmpty();
  pid_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCrossSendChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqCrossSendChat.content"));
        } else
          goto handle_unusual;
        continue;
      // string otherPid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_otherpid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqCrossSendChat.otherPid"));
        } else
          goto handle_unusual;
        continue;
      // string pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqCrossSendChat.pid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqCrossSendChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqCrossSendChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqCrossSendChat.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otherpid().data(), static_cast<int>(this->_internal_otherpid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqCrossSendChat.otherPid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otherpid(), target);
  }

  // string pid = 4;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqCrossSendChat.pid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqCrossSendChat)
  return target;
}

size_t ReqCrossSendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqCrossSendChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otherpid());
  }

  // string pid = 4;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqCrossSendChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqCrossSendChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqCrossSendChat::GetClassData() const { return &_class_data_; }

void ReqCrossSendChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqCrossSendChat *>(to)->MergeFrom(
      static_cast<const ReqCrossSendChat &>(from));
}


void ReqCrossSendChat::MergeFrom(const ReqCrossSendChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqCrossSendChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_otherpid().empty()) {
    _internal_set_otherpid(from._internal_otherpid());
  }
  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqCrossSendChat::CopyFrom(const ReqCrossSendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqCrossSendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCrossSendChat::IsInitialized() const {
  return true;
}

void ReqCrossSendChat::InternalSwap(ReqCrossSendChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &otherpid_, lhs_arena,
      &other->otherpid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCrossSendChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[8]);
}

// ===================================================================

class ResCrossSendChat::_Internal {
 public:
  static const ::ChatData& data(const ResCrossSendChat* msg);
};

const ::ChatData&
ResCrossSendChat::_Internal::data(const ResCrossSendChat* msg) {
  return *msg->data_;
}
void ResCrossSendChat::clear_baseinfo() {
  baseinfo_.Clear();
}
ResCrossSendChat::ResCrossSendChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  baseinfo_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ResCrossSendChat)
}
ResCrossSendChat::ResCrossSendChat(const ResCrossSendChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      baseinfo_(from.baseinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::ChatData(*from.data_);
  } else {
    data_ = nullptr;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ResCrossSendChat)
}

inline void ResCrossSendChat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&data_)) + sizeof(channel_));
}

ResCrossSendChat::~ResCrossSendChat() {
  // @@protoc_insertion_point(destructor:ResCrossSendChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResCrossSendChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ResCrossSendChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResCrossSendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:ResCrossSendChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baseinfo_.Clear();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResCrossSendChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChatData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PayerBaseInfo baseInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_baseinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResCrossSendChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResCrossSendChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // .ChatData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // repeated .PayerBaseInfo baseInfo = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_baseinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_baseinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResCrossSendChat)
  return target;
}

size_t ResCrossSendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResCrossSendChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PayerBaseInfo baseInfo = 3;
  total_size += 1UL * this->_internal_baseinfo_size();
  for (const auto& msg : this->baseinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResCrossSendChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResCrossSendChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResCrossSendChat::GetClassData() const { return &_class_data_; }

void ResCrossSendChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResCrossSendChat *>(to)->MergeFrom(
      static_cast<const ResCrossSendChat &>(from));
}


void ResCrossSendChat::MergeFrom(const ResCrossSendChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResCrossSendChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  baseinfo_.MergeFrom(from.baseinfo_);
  if (from._internal_has_data()) {
    _internal_mutable_data()->::ChatData::MergeFrom(from._internal_data());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResCrossSendChat::CopyFrom(const ResCrossSendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResCrossSendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCrossSendChat::IsInitialized() const {
  return true;
}

void ResCrossSendChat::InternalSwap(ResCrossSendChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  baseinfo_.InternalSwap(&other->baseinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResCrossSendChat, channel_)
      + sizeof(ResCrossSendChat::channel_)
      - PROTOBUF_FIELD_OFFSET(ResCrossSendChat, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCrossSendChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[9]);
}

// ===================================================================

class ReqAddNewChatData::_Internal {
 public:
};

ReqAddNewChatData::ReqAddNewChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ReqAddNewChatData)
}
ReqAddNewChatData::ReqAddNewChatData(const ReqAddNewChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  otherpid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otherpid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_otherpid().empty()) {
    otherpid_.Set(from._internal_otherpid(), 
      GetArenaForAllocation());
  }
  pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    pid_.Set(from._internal_pid(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ReqAddNewChatData)
}

inline void ReqAddNewChatData::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otherpid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otherpid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0;
}

ReqAddNewChatData::~ReqAddNewChatData() {
  // @@protoc_insertion_point(destructor:ReqAddNewChatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqAddNewChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
  otherpid_.Destroy();
  pid_.Destroy();
}

void ReqAddNewChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAddNewChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:ReqAddNewChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  otherpid_.ClearToEmpty();
  pid_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAddNewChatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqAddNewChatData.content"));
        } else
          goto handle_unusual;
        continue;
      // string otherPid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_otherpid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqAddNewChatData.otherPid"));
        } else
          goto handle_unusual;
        continue;
      // string pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReqAddNewChatData.pid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqAddNewChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqAddNewChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqAddNewChatData.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otherpid().data(), static_cast<int>(this->_internal_otherpid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqAddNewChatData.otherPid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otherpid(), target);
  }

  // string pid = 4;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReqAddNewChatData.pid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqAddNewChatData)
  return target;
}

size_t ReqAddNewChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReqAddNewChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string otherPid = 3;
  if (!this->_internal_otherpid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otherpid());
  }

  // string pid = 4;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqAddNewChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqAddNewChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqAddNewChatData::GetClassData() const { return &_class_data_; }

void ReqAddNewChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqAddNewChatData *>(to)->MergeFrom(
      static_cast<const ReqAddNewChatData &>(from));
}


void ReqAddNewChatData::MergeFrom(const ReqAddNewChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReqAddNewChatData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_otherpid().empty()) {
    _internal_set_otherpid(from._internal_otherpid());
  }
  if (!from._internal_pid().empty()) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqAddNewChatData::CopyFrom(const ReqAddNewChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReqAddNewChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddNewChatData::IsInitialized() const {
  return true;
}

void ReqAddNewChatData::InternalSwap(ReqAddNewChatData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &otherpid_, lhs_arena,
      &other->otherpid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pid_, lhs_arena,
      &other->pid_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAddNewChatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Chat_2eproto_getter, &descriptor_table_Chat_2eproto_once,
      file_level_metadata_Chat_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatData*
Arena::CreateMaybeMessage< ::ChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::AllChatData*
Arena::CreateMaybeMessage< ::AllChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AllChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqChatInfo*
Arena::CreateMaybeMessage< ::ReqChatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ResChatInfo*
Arena::CreateMaybeMessage< ::ResChatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqSendChat*
Arena::CreateMaybeMessage< ::ReqSendChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqSendChat >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyAddNewChat*
Arena::CreateMaybeMessage< ::NotifyAddNewChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyAddNewChat >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqGetCrossChatData*
Arena::CreateMaybeMessage< ::ReqGetCrossChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqGetCrossChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::ResCrossPlayerBaseInfo*
Arena::CreateMaybeMessage< ::ResCrossPlayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResCrossPlayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqCrossSendChat*
Arena::CreateMaybeMessage< ::ReqCrossSendChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqCrossSendChat >(arena);
}
template<> PROTOBUF_NOINLINE ::ResCrossSendChat*
Arena::CreateMaybeMessage< ::ResCrossSendChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResCrossSendChat >(arena);
}
template<> PROTOBUF_NOINLINE ::ReqAddNewChatData*
Arena::CreateMaybeMessage< ::ReqAddNewChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReqAddNewChatData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
