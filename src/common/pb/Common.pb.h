// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2eproto;
class NotifyAddNewTips;
struct NotifyAddNewTipsDefaultTypeInternal;
extern NotifyAddNewTipsDefaultTypeInternal _NotifyAddNewTips_default_instance_;
class ReqGetNewPeopleGuide;
struct ReqGetNewPeopleGuideDefaultTypeInternal;
extern ReqGetNewPeopleGuideDefaultTypeInternal _ReqGetNewPeopleGuide_default_instance_;
class ReqNpcGiftData;
struct ReqNpcGiftDataDefaultTypeInternal;
extern ReqNpcGiftDataDefaultTypeInternal _ReqNpcGiftData_default_instance_;
class ReqNpcGiftRecv;
struct ReqNpcGiftRecvDefaultTypeInternal;
extern ReqNpcGiftRecvDefaultTypeInternal _ReqNpcGiftRecv_default_instance_;
class ReqQuickBuy;
struct ReqQuickBuyDefaultTypeInternal;
extern ReqQuickBuyDefaultTypeInternal _ReqQuickBuy_default_instance_;
class ReqSaveNewPeopleGuide;
struct ReqSaveNewPeopleGuideDefaultTypeInternal;
extern ReqSaveNewPeopleGuideDefaultTypeInternal _ReqSaveNewPeopleGuide_default_instance_;
class ReqSaveNpcGift;
struct ReqSaveNpcGiftDefaultTypeInternal;
extern ReqSaveNpcGiftDefaultTypeInternal _ReqSaveNpcGift_default_instance_;
class ReqSendNewPeopleGuideRd;
struct ReqSendNewPeopleGuideRdDefaultTypeInternal;
extern ReqSendNewPeopleGuideRdDefaultTypeInternal _ReqSendNewPeopleGuideRd_default_instance_;
class ReqUseCdkey;
struct ReqUseCdkeyDefaultTypeInternal;
extern ReqUseCdkeyDefaultTypeInternal _ReqUseCdkey_default_instance_;
class ResGetNewPeopleGuide;
struct ResGetNewPeopleGuideDefaultTypeInternal;
extern ResGetNewPeopleGuideDefaultTypeInternal _ResGetNewPeopleGuide_default_instance_;
class ResNpcGiftData;
struct ResNpcGiftDataDefaultTypeInternal;
extern ResNpcGiftDataDefaultTypeInternal _ResNpcGiftData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NotifyAddNewTips* Arena::CreateMaybeMessage<::NotifyAddNewTips>(Arena*);
template<> ::ReqGetNewPeopleGuide* Arena::CreateMaybeMessage<::ReqGetNewPeopleGuide>(Arena*);
template<> ::ReqNpcGiftData* Arena::CreateMaybeMessage<::ReqNpcGiftData>(Arena*);
template<> ::ReqNpcGiftRecv* Arena::CreateMaybeMessage<::ReqNpcGiftRecv>(Arena*);
template<> ::ReqQuickBuy* Arena::CreateMaybeMessage<::ReqQuickBuy>(Arena*);
template<> ::ReqSaveNewPeopleGuide* Arena::CreateMaybeMessage<::ReqSaveNewPeopleGuide>(Arena*);
template<> ::ReqSaveNpcGift* Arena::CreateMaybeMessage<::ReqSaveNpcGift>(Arena*);
template<> ::ReqSendNewPeopleGuideRd* Arena::CreateMaybeMessage<::ReqSendNewPeopleGuideRd>(Arena*);
template<> ::ReqUseCdkey* Arena::CreateMaybeMessage<::ReqUseCdkey>(Arena*);
template<> ::ResGetNewPeopleGuide* Arena::CreateMaybeMessage<::ResGetNewPeopleGuide>(Arena*);
template<> ::ResNpcGiftData* Arena::CreateMaybeMessage<::ResNpcGiftData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReqUseCdkey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqUseCdkey) */ {
 public:
  inline ReqUseCdkey() : ReqUseCdkey(nullptr) {}
  ~ReqUseCdkey() override;
  explicit PROTOBUF_CONSTEXPR ReqUseCdkey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUseCdkey(const ReqUseCdkey& from);
  ReqUseCdkey(ReqUseCdkey&& from) noexcept
    : ReqUseCdkey() {
    *this = ::std::move(from);
  }

  inline ReqUseCdkey& operator=(const ReqUseCdkey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUseCdkey& operator=(ReqUseCdkey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUseCdkey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUseCdkey* internal_default_instance() {
    return reinterpret_cast<const ReqUseCdkey*>(
               &_ReqUseCdkey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqUseCdkey& a, ReqUseCdkey& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUseCdkey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUseCdkey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqUseCdkey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqUseCdkey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqUseCdkey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqUseCdkey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUseCdkey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqUseCdkey";
  }
  protected:
  explicit ReqUseCdkey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCdKeyFieldNumber = 1,
  };
  // string cdKey = 1;
  void clear_cdkey();
  const std::string& cdkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cdkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cdkey();
  PROTOBUF_NODISCARD std::string* release_cdkey();
  void set_allocated_cdkey(std::string* cdkey);
  private:
  const std::string& _internal_cdkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cdkey(const std::string& value);
  std::string* _internal_mutable_cdkey();
  public:

  // @@protoc_insertion_point(class_scope:ReqUseCdkey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqSaveNewPeopleGuide final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSaveNewPeopleGuide) */ {
 public:
  inline ReqSaveNewPeopleGuide() : ReqSaveNewPeopleGuide(nullptr) {}
  ~ReqSaveNewPeopleGuide() override;
  explicit PROTOBUF_CONSTEXPR ReqSaveNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSaveNewPeopleGuide(const ReqSaveNewPeopleGuide& from);
  ReqSaveNewPeopleGuide(ReqSaveNewPeopleGuide&& from) noexcept
    : ReqSaveNewPeopleGuide() {
    *this = ::std::move(from);
  }

  inline ReqSaveNewPeopleGuide& operator=(const ReqSaveNewPeopleGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSaveNewPeopleGuide& operator=(ReqSaveNewPeopleGuide&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSaveNewPeopleGuide& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSaveNewPeopleGuide* internal_default_instance() {
    return reinterpret_cast<const ReqSaveNewPeopleGuide*>(
               &_ReqSaveNewPeopleGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqSaveNewPeopleGuide& a, ReqSaveNewPeopleGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSaveNewPeopleGuide* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSaveNewPeopleGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSaveNewPeopleGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSaveNewPeopleGuide>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSaveNewPeopleGuide& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSaveNewPeopleGuide& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSaveNewPeopleGuide* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSaveNewPeopleGuide";
  }
  protected:
  explicit ReqSaveNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSaveNewPeopleGuide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqGetNewPeopleGuide final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqGetNewPeopleGuide) */ {
 public:
  inline ReqGetNewPeopleGuide() : ReqGetNewPeopleGuide(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqGetNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetNewPeopleGuide(const ReqGetNewPeopleGuide& from);
  ReqGetNewPeopleGuide(ReqGetNewPeopleGuide&& from) noexcept
    : ReqGetNewPeopleGuide() {
    *this = ::std::move(from);
  }

  inline ReqGetNewPeopleGuide& operator=(const ReqGetNewPeopleGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetNewPeopleGuide& operator=(ReqGetNewPeopleGuide&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetNewPeopleGuide& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetNewPeopleGuide* internal_default_instance() {
    return reinterpret_cast<const ReqGetNewPeopleGuide*>(
               &_ReqGetNewPeopleGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqGetNewPeopleGuide& a, ReqGetNewPeopleGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetNewPeopleGuide* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetNewPeopleGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqGetNewPeopleGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqGetNewPeopleGuide>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqGetNewPeopleGuide& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqGetNewPeopleGuide& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqGetNewPeopleGuide";
  }
  protected:
  explicit ReqGetNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqGetNewPeopleGuide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ResGetNewPeopleGuide final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResGetNewPeopleGuide) */ {
 public:
  inline ResGetNewPeopleGuide() : ResGetNewPeopleGuide(nullptr) {}
  ~ResGetNewPeopleGuide() override;
  explicit PROTOBUF_CONSTEXPR ResGetNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResGetNewPeopleGuide(const ResGetNewPeopleGuide& from);
  ResGetNewPeopleGuide(ResGetNewPeopleGuide&& from) noexcept
    : ResGetNewPeopleGuide() {
    *this = ::std::move(from);
  }

  inline ResGetNewPeopleGuide& operator=(const ResGetNewPeopleGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResGetNewPeopleGuide& operator=(ResGetNewPeopleGuide&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResGetNewPeopleGuide& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResGetNewPeopleGuide* internal_default_instance() {
    return reinterpret_cast<const ResGetNewPeopleGuide*>(
               &_ResGetNewPeopleGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResGetNewPeopleGuide& a, ResGetNewPeopleGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(ResGetNewPeopleGuide* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResGetNewPeopleGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResGetNewPeopleGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResGetNewPeopleGuide>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResGetNewPeopleGuide& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResGetNewPeopleGuide& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResGetNewPeopleGuide* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResGetNewPeopleGuide";
  }
  protected:
  explicit ResGetNewPeopleGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ResGetNewPeopleGuide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqSendNewPeopleGuideRd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSendNewPeopleGuideRd) */ {
 public:
  inline ReqSendNewPeopleGuideRd() : ReqSendNewPeopleGuideRd(nullptr) {}
  ~ReqSendNewPeopleGuideRd() override;
  explicit PROTOBUF_CONSTEXPR ReqSendNewPeopleGuideRd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSendNewPeopleGuideRd(const ReqSendNewPeopleGuideRd& from);
  ReqSendNewPeopleGuideRd(ReqSendNewPeopleGuideRd&& from) noexcept
    : ReqSendNewPeopleGuideRd() {
    *this = ::std::move(from);
  }

  inline ReqSendNewPeopleGuideRd& operator=(const ReqSendNewPeopleGuideRd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSendNewPeopleGuideRd& operator=(ReqSendNewPeopleGuideRd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSendNewPeopleGuideRd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSendNewPeopleGuideRd* internal_default_instance() {
    return reinterpret_cast<const ReqSendNewPeopleGuideRd*>(
               &_ReqSendNewPeopleGuideRd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqSendNewPeopleGuideRd& a, ReqSendNewPeopleGuideRd& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSendNewPeopleGuideRd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSendNewPeopleGuideRd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSendNewPeopleGuideRd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSendNewPeopleGuideRd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSendNewPeopleGuideRd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSendNewPeopleGuideRd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSendNewPeopleGuideRd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSendNewPeopleGuideRd";
  }
  protected:
  explicit ReqSendNewPeopleGuideRd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqSendNewPeopleGuideRd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class NotifyAddNewTips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyAddNewTips) */ {
 public:
  inline NotifyAddNewTips() : NotifyAddNewTips(nullptr) {}
  ~NotifyAddNewTips() override;
  explicit PROTOBUF_CONSTEXPR NotifyAddNewTips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyAddNewTips(const NotifyAddNewTips& from);
  NotifyAddNewTips(NotifyAddNewTips&& from) noexcept
    : NotifyAddNewTips() {
    *this = ::std::move(from);
  }

  inline NotifyAddNewTips& operator=(const NotifyAddNewTips& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyAddNewTips& operator=(NotifyAddNewTips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyAddNewTips& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyAddNewTips* internal_default_instance() {
    return reinterpret_cast<const NotifyAddNewTips*>(
               &_NotifyAddNewTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NotifyAddNewTips& a, NotifyAddNewTips& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyAddNewTips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyAddNewTips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyAddNewTips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyAddNewTips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyAddNewTips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyAddNewTips& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyAddNewTips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyAddNewTips";
  }
  protected:
  explicit NotifyAddNewTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NotifyAddNewTips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqQuickBuy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqQuickBuy) */ {
 public:
  inline ReqQuickBuy() : ReqQuickBuy(nullptr) {}
  ~ReqQuickBuy() override;
  explicit PROTOBUF_CONSTEXPR ReqQuickBuy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQuickBuy(const ReqQuickBuy& from);
  ReqQuickBuy(ReqQuickBuy&& from) noexcept
    : ReqQuickBuy() {
    *this = ::std::move(from);
  }

  inline ReqQuickBuy& operator=(const ReqQuickBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQuickBuy& operator=(ReqQuickBuy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQuickBuy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQuickBuy* internal_default_instance() {
    return reinterpret_cast<const ReqQuickBuy*>(
               &_ReqQuickBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqQuickBuy& a, ReqQuickBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQuickBuy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQuickBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqQuickBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqQuickBuy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqQuickBuy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqQuickBuy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQuickBuy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqQuickBuy";
  }
  protected:
  explicit ReqQuickBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqQuickBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqSaveNpcGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqSaveNpcGift) */ {
 public:
  inline ReqSaveNpcGift() : ReqSaveNpcGift(nullptr) {}
  ~ReqSaveNpcGift() override;
  explicit PROTOBUF_CONSTEXPR ReqSaveNpcGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSaveNpcGift(const ReqSaveNpcGift& from);
  ReqSaveNpcGift(ReqSaveNpcGift&& from) noexcept
    : ReqSaveNpcGift() {
    *this = ::std::move(from);
  }

  inline ReqSaveNpcGift& operator=(const ReqSaveNpcGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSaveNpcGift& operator=(ReqSaveNpcGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSaveNpcGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSaveNpcGift* internal_default_instance() {
    return reinterpret_cast<const ReqSaveNpcGift*>(
               &_ReqSaveNpcGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqSaveNpcGift& a, ReqSaveNpcGift& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSaveNpcGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSaveNpcGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSaveNpcGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSaveNpcGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSaveNpcGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqSaveNpcGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSaveNpcGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqSaveNpcGift";
  }
  protected:
  explicit ReqSaveNpcGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:ReqSaveNpcGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqNpcGiftData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ReqNpcGiftData) */ {
 public:
  inline ReqNpcGiftData() : ReqNpcGiftData(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReqNpcGiftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqNpcGiftData(const ReqNpcGiftData& from);
  ReqNpcGiftData(ReqNpcGiftData&& from) noexcept
    : ReqNpcGiftData() {
    *this = ::std::move(from);
  }

  inline ReqNpcGiftData& operator=(const ReqNpcGiftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqNpcGiftData& operator=(ReqNpcGiftData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqNpcGiftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqNpcGiftData* internal_default_instance() {
    return reinterpret_cast<const ReqNpcGiftData*>(
               &_ReqNpcGiftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqNpcGiftData& a, ReqNpcGiftData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqNpcGiftData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqNpcGiftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqNpcGiftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqNpcGiftData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReqNpcGiftData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReqNpcGiftData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqNpcGiftData";
  }
  protected:
  explicit ReqNpcGiftData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqNpcGiftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ResNpcGiftData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResNpcGiftData) */ {
 public:
  inline ResNpcGiftData() : ResNpcGiftData(nullptr) {}
  ~ResNpcGiftData() override;
  explicit PROTOBUF_CONSTEXPR ResNpcGiftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResNpcGiftData(const ResNpcGiftData& from);
  ResNpcGiftData(ResNpcGiftData&& from) noexcept
    : ResNpcGiftData() {
    *this = ::std::move(from);
  }

  inline ResNpcGiftData& operator=(const ResNpcGiftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResNpcGiftData& operator=(ResNpcGiftData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResNpcGiftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResNpcGiftData* internal_default_instance() {
    return reinterpret_cast<const ResNpcGiftData*>(
               &_ResNpcGiftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResNpcGiftData& a, ResNpcGiftData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResNpcGiftData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResNpcGiftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResNpcGiftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResNpcGiftData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResNpcGiftData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResNpcGiftData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResNpcGiftData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResNpcGiftData";
  }
  protected:
  explicit ResNpcGiftData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:ResNpcGiftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class ReqNpcGiftRecv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqNpcGiftRecv) */ {
 public:
  inline ReqNpcGiftRecv() : ReqNpcGiftRecv(nullptr) {}
  ~ReqNpcGiftRecv() override;
  explicit PROTOBUF_CONSTEXPR ReqNpcGiftRecv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqNpcGiftRecv(const ReqNpcGiftRecv& from);
  ReqNpcGiftRecv(ReqNpcGiftRecv&& from) noexcept
    : ReqNpcGiftRecv() {
    *this = ::std::move(from);
  }

  inline ReqNpcGiftRecv& operator=(const ReqNpcGiftRecv& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqNpcGiftRecv& operator=(ReqNpcGiftRecv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqNpcGiftRecv& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqNpcGiftRecv* internal_default_instance() {
    return reinterpret_cast<const ReqNpcGiftRecv*>(
               &_ReqNpcGiftRecv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqNpcGiftRecv& a, ReqNpcGiftRecv& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqNpcGiftRecv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqNpcGiftRecv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqNpcGiftRecv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqNpcGiftRecv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqNpcGiftRecv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqNpcGiftRecv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqNpcGiftRecv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqNpcGiftRecv";
  }
  protected:
  explicit ReqNpcGiftRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:ReqNpcGiftRecv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqUseCdkey

// string cdKey = 1;
inline void ReqUseCdkey::clear_cdkey() {
  cdkey_.ClearToEmpty();
}
inline const std::string& ReqUseCdkey::cdkey() const {
  // @@protoc_insertion_point(field_get:ReqUseCdkey.cdKey)
  return _internal_cdkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUseCdkey::set_cdkey(ArgT0&& arg0, ArgT... args) {
 
 cdkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReqUseCdkey.cdKey)
}
inline std::string* ReqUseCdkey::mutable_cdkey() {
  std::string* _s = _internal_mutable_cdkey();
  // @@protoc_insertion_point(field_mutable:ReqUseCdkey.cdKey)
  return _s;
}
inline const std::string& ReqUseCdkey::_internal_cdkey() const {
  return cdkey_.Get();
}
inline void ReqUseCdkey::_internal_set_cdkey(const std::string& value) {
  
  cdkey_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqUseCdkey::_internal_mutable_cdkey() {
  
  return cdkey_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqUseCdkey::release_cdkey() {
  // @@protoc_insertion_point(field_release:ReqUseCdkey.cdKey)
  return cdkey_.Release();
}
inline void ReqUseCdkey::set_allocated_cdkey(std::string* cdkey) {
  if (cdkey != nullptr) {
    
  } else {
    
  }
  cdkey_.SetAllocated(cdkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cdkey_.IsDefault()) {
    cdkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReqUseCdkey.cdKey)
}

// -------------------------------------------------------------------

// ReqSaveNewPeopleGuide

// int32 id = 1;
inline void ReqSaveNewPeopleGuide::clear_id() {
  id_ = 0;
}
inline int32_t ReqSaveNewPeopleGuide::_internal_id() const {
  return id_;
}
inline int32_t ReqSaveNewPeopleGuide::id() const {
  // @@protoc_insertion_point(field_get:ReqSaveNewPeopleGuide.id)
  return _internal_id();
}
inline void ReqSaveNewPeopleGuide::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ReqSaveNewPeopleGuide::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ReqSaveNewPeopleGuide.id)
}

// -------------------------------------------------------------------

// ReqGetNewPeopleGuide

// -------------------------------------------------------------------

// ResGetNewPeopleGuide

// repeated int32 data = 1;
inline int ResGetNewPeopleGuide::_internal_data_size() const {
  return data_.size();
}
inline int ResGetNewPeopleGuide::data_size() const {
  return _internal_data_size();
}
inline void ResGetNewPeopleGuide::clear_data() {
  data_.Clear();
}
inline int32_t ResGetNewPeopleGuide::_internal_data(int index) const {
  return data_.Get(index);
}
inline int32_t ResGetNewPeopleGuide::data(int index) const {
  // @@protoc_insertion_point(field_get:ResGetNewPeopleGuide.data)
  return _internal_data(index);
}
inline void ResGetNewPeopleGuide::set_data(int index, int32_t value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ResGetNewPeopleGuide.data)
}
inline void ResGetNewPeopleGuide::_internal_add_data(int32_t value) {
  data_.Add(value);
}
inline void ResGetNewPeopleGuide::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ResGetNewPeopleGuide.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResGetNewPeopleGuide::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResGetNewPeopleGuide::data() const {
  // @@protoc_insertion_point(field_list:ResGetNewPeopleGuide.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResGetNewPeopleGuide::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResGetNewPeopleGuide::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ResGetNewPeopleGuide.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ReqSendNewPeopleGuideRd

// int32 id = 1;
inline void ReqSendNewPeopleGuideRd::clear_id() {
  id_ = 0;
}
inline int32_t ReqSendNewPeopleGuideRd::_internal_id() const {
  return id_;
}
inline int32_t ReqSendNewPeopleGuideRd::id() const {
  // @@protoc_insertion_point(field_get:ReqSendNewPeopleGuideRd.id)
  return _internal_id();
}
inline void ReqSendNewPeopleGuideRd::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ReqSendNewPeopleGuideRd::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ReqSendNewPeopleGuideRd.id)
}

// -------------------------------------------------------------------

// NotifyAddNewTips

// string content = 1;
inline void NotifyAddNewTips::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& NotifyAddNewTips::content() const {
  // @@protoc_insertion_point(field_get:NotifyAddNewTips.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyAddNewTips::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NotifyAddNewTips.content)
}
inline std::string* NotifyAddNewTips::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:NotifyAddNewTips.content)
  return _s;
}
inline const std::string& NotifyAddNewTips::_internal_content() const {
  return content_.Get();
}
inline void NotifyAddNewTips::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* NotifyAddNewTips::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* NotifyAddNewTips::release_content() {
  // @@protoc_insertion_point(field_release:NotifyAddNewTips.content)
  return content_.Release();
}
inline void NotifyAddNewTips::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NotifyAddNewTips.content)
}

// int32 type = 2;
inline void NotifyAddNewTips::clear_type() {
  type_ = 0;
}
inline int32_t NotifyAddNewTips::_internal_type() const {
  return type_;
}
inline int32_t NotifyAddNewTips::type() const {
  // @@protoc_insertion_point(field_get:NotifyAddNewTips.type)
  return _internal_type();
}
inline void NotifyAddNewTips::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void NotifyAddNewTips::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NotifyAddNewTips.type)
}

// -------------------------------------------------------------------

// ReqQuickBuy

// int32 id = 1;
inline void ReqQuickBuy::clear_id() {
  id_ = 0;
}
inline int32_t ReqQuickBuy::_internal_id() const {
  return id_;
}
inline int32_t ReqQuickBuy::id() const {
  // @@protoc_insertion_point(field_get:ReqQuickBuy.id)
  return _internal_id();
}
inline void ReqQuickBuy::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ReqQuickBuy::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ReqQuickBuy.id)
}

// int32 count = 2;
inline void ReqQuickBuy::clear_count() {
  count_ = 0;
}
inline int32_t ReqQuickBuy::_internal_count() const {
  return count_;
}
inline int32_t ReqQuickBuy::count() const {
  // @@protoc_insertion_point(field_get:ReqQuickBuy.count)
  return _internal_count();
}
inline void ReqQuickBuy::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void ReqQuickBuy::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ReqQuickBuy.count)
}

// -------------------------------------------------------------------

// ReqSaveNpcGift

// repeated int32 ids = 1;
inline int ReqSaveNpcGift::_internal_ids_size() const {
  return ids_.size();
}
inline int ReqSaveNpcGift::ids_size() const {
  return _internal_ids_size();
}
inline void ReqSaveNpcGift::clear_ids() {
  ids_.Clear();
}
inline int32_t ReqSaveNpcGift::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline int32_t ReqSaveNpcGift::ids(int index) const {
  // @@protoc_insertion_point(field_get:ReqSaveNpcGift.ids)
  return _internal_ids(index);
}
inline void ReqSaveNpcGift::set_ids(int index, int32_t value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReqSaveNpcGift.ids)
}
inline void ReqSaveNpcGift::_internal_add_ids(int32_t value) {
  ids_.Add(value);
}
inline void ReqSaveNpcGift::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:ReqSaveNpcGift.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReqSaveNpcGift::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReqSaveNpcGift::ids() const {
  // @@protoc_insertion_point(field_list:ReqSaveNpcGift.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReqSaveNpcGift::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReqSaveNpcGift::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ReqSaveNpcGift.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// ReqNpcGiftData

// -------------------------------------------------------------------

// ResNpcGiftData

// repeated int32 ids = 1;
inline int ResNpcGiftData::_internal_ids_size() const {
  return ids_.size();
}
inline int ResNpcGiftData::ids_size() const {
  return _internal_ids_size();
}
inline void ResNpcGiftData::clear_ids() {
  ids_.Clear();
}
inline int32_t ResNpcGiftData::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline int32_t ResNpcGiftData::ids(int index) const {
  // @@protoc_insertion_point(field_get:ResNpcGiftData.ids)
  return _internal_ids(index);
}
inline void ResNpcGiftData::set_ids(int index, int32_t value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ResNpcGiftData.ids)
}
inline void ResNpcGiftData::_internal_add_ids(int32_t value) {
  ids_.Add(value);
}
inline void ResNpcGiftData::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:ResNpcGiftData.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResNpcGiftData::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ResNpcGiftData::ids() const {
  // @@protoc_insertion_point(field_list:ResNpcGiftData.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResNpcGiftData::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ResNpcGiftData::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ResNpcGiftData.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// ReqNpcGiftRecv

// repeated int32 ids = 1;
inline int ReqNpcGiftRecv::_internal_ids_size() const {
  return ids_.size();
}
inline int ReqNpcGiftRecv::ids_size() const {
  return _internal_ids_size();
}
inline void ReqNpcGiftRecv::clear_ids() {
  ids_.Clear();
}
inline int32_t ReqNpcGiftRecv::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline int32_t ReqNpcGiftRecv::ids(int index) const {
  // @@protoc_insertion_point(field_get:ReqNpcGiftRecv.ids)
  return _internal_ids(index);
}
inline void ReqNpcGiftRecv::set_ids(int index, int32_t value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReqNpcGiftRecv.ids)
}
inline void ReqNpcGiftRecv::_internal_add_ids(int32_t value) {
  ids_.Add(value);
}
inline void ReqNpcGiftRecv::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:ReqNpcGiftRecv.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReqNpcGiftRecv::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReqNpcGiftRecv::ids() const {
  // @@protoc_insertion_point(field_list:ReqNpcGiftRecv.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReqNpcGiftRecv::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReqNpcGiftRecv::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ReqNpcGiftRecv.ids)
  return _internal_mutable_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2eproto
